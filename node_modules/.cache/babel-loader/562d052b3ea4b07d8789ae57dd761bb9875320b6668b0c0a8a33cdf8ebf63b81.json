{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useReducer, useCallback } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { GAME_LEVELS } from \"./Levels\";\n\n// Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8\n};\nconst LEVEL_TYPES = {\n  PLATFORM: \"platform\",\n  MOVING: \"moving\",\n  BOUNCE: \"bounce\",\n  ENEMY: \"enemy\",\n  COLLECTABLE: \"coin\",\n  FINISH: \"finish\",\n  SPIKE: \"spike\",\n  DISAPPEARING: \"disappear\"\n};\nconst PHYSICS_CONFIG = {\n  ballSize: 6,\n  horizontalAcceleration: 0.2,\n  maxHorizontalSpeed: 2,\n  friction: 0.1,\n  jumpVelocity: 7,\n  gravity: -0.5,\n  bounceMultiplier: 1.5,\n  invulnerabilityDuration: 2000,\n  blinkInterval: 150,\n  collisionTolerance: 2\n};\nconst initialGameState = {\n  lives: 3,\n  score: 0,\n  collectables: 0,\n  isGameOver: false,\n  isLevelComplete: false\n};\n\n// Reducer for game state management\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case 'RESET':\n      return {\n        ...initialGameState\n      };\n    case 'COLLECT_COIN':\n      return {\n        ...state,\n        score: state.score + 100,\n        collectables: state.collectables + 1\n      };\n    case 'LOSE_LIFE':\n      const newLives = state.lives - 1;\n      return {\n        ...state,\n        lives: newLives,\n        isGameOver: newLives <= 0\n      };\n    case 'COMPLETE_LEVEL':\n      return {\n        ...state,\n        isLevelComplete: true,\n        isGameOver: action.isFinalLevel\n      };\n    default:\n      return state;\n  }\n}\n\n// Custom hook for collision detection\nfunction useCollisionDetection(level, collectedItems, disappearingPlatforms) {\n  _s();\n  const checkCollision = useCallback((ballX, ballY, ballVx, ballVy) => {\n    // Collision detection logic here\n    // (Moved from original checkPlatformCollision)\n    return {\n      collision: false\n    };\n  }, [level, collectedItems, disappearingPlatforms]);\n  return {\n    checkCollision\n  };\n}\n_s(useCollisionDetection, \"lJljdECk671/rjxPf/Fr2SE8+Eg=\");\nfunction EmuSchermo({\n  pressedButtons\n}) {\n  _s2();\n  var _GAME_LEVELS$currentL2;\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [gameState, dispatch] = useReducer(gameReducer, initialGameState);\n  const [ball, setBall] = useState({\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    isOnGround: false\n  });\n  const [collectedItems, setCollectedItems] = useState(new Set());\n  const [disappearingPlatforms, setDisappearingPlatforms] = useState(new Set());\n  const [isInvulnerable, setIsInvulnerable] = useState(false);\n  const pressedButtonsRef = useRef(pressedButtons);\n  const disappearingTimersRef = useRef(new Map());\n  const invulnerabilityTimerRef = useRef(null);\n  const animationFrameId = useRef(null);\n  const lastFrameTime = useRef(0);\n  const {\n    checkCollision\n  } = useCollisionDetection(GAME_LEVELS[currentLevel], collectedItems, disappearingPlatforms);\n\n  // Level initialization\n  useEffect(() => {\n    const level = GAME_LEVELS[currentLevel];\n    if (!level) return;\n    setBall({\n      x: level.startPosition.x,\n      y: level.startPosition.y,\n      vx: 0,\n      vy: 0,\n      isOnGround: false\n    });\n    setCollectedItems(new Set());\n    setDisappearingPlatforms(new Set());\n    disappearingTimersRef.current.clear();\n    const container = document.querySelector('.emu-container');\n    container === null || container === void 0 ? void 0 : container.classList.add('level-transition');\n    setTimeout(() => container === null || container === void 0 ? void 0 : container.classList.remove('level-transition'), 500);\n  }, [currentLevel]);\n\n  // Game loop with delta time calculation\n  const gameLoop = useCallback(timestamp => {\n    const deltaTime = timestamp - lastFrameTime.current;\n    lastFrameTime.current = timestamp;\n    if (gameState.isGameOver) return;\n    setBall(prevBall => {\n      // Physics calculations using deltaTime\n      // Collision detection and state updates\n      return updatedBall;\n    });\n    animationFrameId.current = requestAnimationFrame(gameLoop);\n  }, [gameState.isGameOver]);\n  useEffect(() => {\n    animationFrameId.current = requestAnimationFrame(gameLoop);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [gameLoop]);\n\n  // Input handling\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Cleanup effects\n  useEffect(() => {\n    return () => {\n      invulnerabilityTimerRef.current && clearTimeout(invulnerabilityTimerRef.current);\n      disappearingTimersRef.current.forEach(timer => clearTimeout(timer));\n    };\n  }, []);\n\n  // Render optimized game elements\n  const renderLevelElements = useCallback(() => {\n    var _GAME_LEVELS$currentL;\n    return (_GAME_LEVELS$currentL = GAME_LEVELS[currentLevel]) === null || _GAME_LEVELS$currentL === void 0 ? void 0 : _GAME_LEVELS$currentL.elements.map((element, index) => {\n      if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms.has(index)) return null;\n      if (element.type === LEVEL_TYPES.COLLECTABLE && collectedItems.has(index)) return null;\n      return /*#__PURE__*/_jsxDEV(GameElement, {\n        element: element,\n        index: index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 14\n      }, this);\n    });\n  }, [currentLevel, disappearingPlatforms, collectedItems]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emu-container\",\n    style: {\n      backgroundColor: ((_GAME_LEVELS$currentL2 = GAME_LEVELS[currentLevel]) === null || _GAME_LEVELS$currentL2 === void 0 ? void 0 : _GAME_LEVELS$currentL2.backgroundColor) || \"#87CEEB\"\n    },\n    children: [renderLevelElements(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `ball ${isInvulnerable ? 'blink' : ''}`,\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`,\n        width: `${PHYSICS_CONFIG.ballSize}%`,\n        height: `${PHYSICS_CONFIG.ballSize}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameInterface, {\n      gameState: gameState,\n      currentLevel: currentLevel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n// Extracted component for game elements\n_s2(EmuSchermo, \"O7Z0jvfL4rfkS2TN8TA1q3Aq4+o=\", false, function () {\n  return [useCollisionDetection];\n});\n_c = EmuSchermo;\nconst GameElement = /*#__PURE__*/_s3(/*#__PURE__*/React.memo(_c2 = _s3(({\n  element,\n  index\n}) => {\n  _s3();\n  const [position, setPosition] = useState({\n    x: element.x,\n    y: element.y\n  });\n  useEffect(() => {\n    if (element.type === LEVEL_TYPES.MOVING) {\n      const interval = setInterval(() => {\n        const time = Date.now() / 1000;\n        const cycle = Math.sin(time * element.speed);\n        setPosition({\n          x: element.x + element.moveX * cycle,\n          y: element.y + element.moveY * cycle\n        });\n      }, 16);\n      return () => clearInterval(interval);\n    }\n  }, [element]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `game-element ${element.type}`,\n    style: {\n      left: `${position.x}%`,\n      bottom: `${position.y}%`,\n      width: `${element.width}%`,\n      height: `${element.height}%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}, \"wuT8lzV4EJfgRfWohldSYqk7mcw=\")), \"wuT8lzV4EJfgRfWohldSYqk7mcw=\");\n\n// Extracted component for game interface\n_c3 = GameElement;\nconst GameInterface = /*#__PURE__*/React.memo(_c4 = ({\n  gameState,\n  currentLevel\n}) => {\n  if (gameState.isGameOver) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: gameState.isLevelComplete ? \"Congratulazioni!\" : \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"Ricomincia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-info\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Punti: \", gameState.score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Livello: \", currentLevel + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Vite: \", [...Array(gameState.lives)].map((_, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"life-icon\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 61\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n});\n_c5 = GameInterface;\nexport default EmuSchermo;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"EmuSchermo\");\n$RefreshReg$(_c2, \"GameElement$React.memo\");\n$RefreshReg$(_c3, \"GameElement\");\n$RefreshReg$(_c4, \"GameInterface$React.memo\");\n$RefreshReg$(_c5, \"GameInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useReducer","useCallback","GAME_LEVELS","jsxDEV","_jsxDEV","BUTTONS","A","B","START","SELECT","UP","DOWN","LEFT","RIGHT","LEVEL_TYPES","PLATFORM","MOVING","BOUNCE","ENEMY","COLLECTABLE","FINISH","SPIKE","DISAPPEARING","PHYSICS_CONFIG","ballSize","horizontalAcceleration","maxHorizontalSpeed","friction","jumpVelocity","gravity","bounceMultiplier","invulnerabilityDuration","blinkInterval","collisionTolerance","initialGameState","lives","score","collectables","isGameOver","isLevelComplete","gameReducer","state","action","type","newLives","isFinalLevel","useCollisionDetection","level","collectedItems","disappearingPlatforms","_s","checkCollision","ballX","ballY","ballVx","ballVy","collision","EmuSchermo","pressedButtons","_s2","_GAME_LEVELS$currentL2","currentLevel","setCurrentLevel","gameState","dispatch","ball","setBall","x","y","vx","vy","isOnGround","setCollectedItems","Set","setDisappearingPlatforms","isInvulnerable","setIsInvulnerable","pressedButtonsRef","disappearingTimersRef","Map","invulnerabilityTimerRef","animationFrameId","lastFrameTime","startPosition","current","clear","container","document","querySelector","classList","add","setTimeout","remove","gameLoop","timestamp","deltaTime","prevBall","updatedBall","requestAnimationFrame","cancelAnimationFrame","clearTimeout","forEach","timer","renderLevelElements","_GAME_LEVELS$currentL","elements","map","element","index","has","GameElement","fileName","_jsxFileName","lineNumber","columnNumber","className","style","backgroundColor","children","left","bottom","width","height","GameInterface","_c","_s3","memo","_c2","position","setPosition","interval","setInterval","time","Date","now","cycle","Math","sin","speed","moveX","moveY","clearInterval","_c3","_c4","onClick","window","location","reload","Array","_","i","_c5","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useReducer, useCallback } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { GAME_LEVELS } from \"./Levels\";\n\n// Constants\nconst BUTTONS = {\n  A: 1, B: 2, START: 3, SELECT: 4, UP: 5, DOWN: 6, LEFT: 7, RIGHT: 8\n};\n\nconst LEVEL_TYPES = {\n  PLATFORM: \"platform\",\n  MOVING: \"moving\",\n  BOUNCE: \"bounce\",\n  ENEMY: \"enemy\",\n  COLLECTABLE: \"coin\",\n  FINISH: \"finish\",\n  SPIKE: \"spike\",\n  DISAPPEARING: \"disappear\"\n};\n\nconst PHYSICS_CONFIG = {\n  ballSize: 6,\n  horizontalAcceleration: 0.2,\n  maxHorizontalSpeed: 2,\n  friction: 0.1,\n  jumpVelocity: 7,\n  gravity: -0.5,\n  bounceMultiplier: 1.5,\n  invulnerabilityDuration: 2000,\n  blinkInterval: 150,\n  collisionTolerance: 2\n};\n\nconst initialGameState = {\n  lives: 3,\n  score: 0,\n  collectables: 0,\n  isGameOver: false,\n  isLevelComplete: false\n};\n\n// Reducer for game state management\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case 'RESET':\n      return { ...initialGameState };\n    case 'COLLECT_COIN':\n      return { ...state, score: state.score + 100, collectables: state.collectables + 1 };\n    case 'LOSE_LIFE':\n      const newLives = state.lives - 1;\n      return { \n        ...state, \n        lives: newLives, \n        isGameOver: newLives <= 0 \n      };\n    case 'COMPLETE_LEVEL':\n      return {\n        ...state,\n        isLevelComplete: true,\n        isGameOver: action.isFinalLevel\n      };\n    default:\n      return state;\n  }\n}\n\n// Custom hook for collision detection\nfunction useCollisionDetection(level, collectedItems, disappearingPlatforms) {\n  const checkCollision = useCallback((ballX, ballY, ballVx, ballVy) => {\n    // Collision detection logic here\n    // (Moved from original checkPlatformCollision)\n    return { collision: false };\n  }, [level, collectedItems, disappearingPlatforms]);\n\n  return { checkCollision };\n}\n\nfunction EmuSchermo({ pressedButtons }) {\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [gameState, dispatch] = useReducer(gameReducer, initialGameState);\n  const [ball, setBall] = useState({ x: 0, y: 0, vx: 0, vy: 0, isOnGround: false });\n  const [collectedItems, setCollectedItems] = useState(new Set());\n  const [disappearingPlatforms, setDisappearingPlatforms] = useState(new Set());\n  const [isInvulnerable, setIsInvulnerable] = useState(false);\n  \n  const pressedButtonsRef = useRef(pressedButtons);\n  const disappearingTimersRef = useRef(new Map());\n  const invulnerabilityTimerRef = useRef(null);\n  const animationFrameId = useRef(null);\n  const lastFrameTime = useRef(0);\n\n  const { checkCollision } = useCollisionDetection(\n    GAME_LEVELS[currentLevel],\n    collectedItems,\n    disappearingPlatforms\n  );\n\n  // Level initialization\n  useEffect(() => {\n    const level = GAME_LEVELS[currentLevel];\n    if (!level) return;\n\n    setBall({\n      x: level.startPosition.x,\n      y: level.startPosition.y,\n      vx: 0,\n      vy: 0,\n      isOnGround: false\n    });\n    \n    setCollectedItems(new Set());\n    setDisappearingPlatforms(new Set());\n    disappearingTimersRef.current.clear();\n\n    const container = document.querySelector('.emu-container');\n    container?.classList.add('level-transition');\n    setTimeout(() => container?.classList.remove('level-transition'), 500);\n  }, [currentLevel]);\n\n  // Game loop with delta time calculation\n  const gameLoop = useCallback((timestamp) => {\n    const deltaTime = timestamp - lastFrameTime.current;\n    lastFrameTime.current = timestamp;\n\n    if (gameState.isGameOver) return;\n\n    setBall(prevBall => {\n      // Physics calculations using deltaTime\n      // Collision detection and state updates\n      return updatedBall;\n    });\n\n    animationFrameId.current = requestAnimationFrame(gameLoop);\n  }, [gameState.isGameOver]);\n\n  useEffect(() => {\n    animationFrameId.current = requestAnimationFrame(gameLoop);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [gameLoop]);\n\n  // Input handling\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Cleanup effects\n  useEffect(() => {\n    return () => {\n      invulnerabilityTimerRef.current && clearTimeout(invulnerabilityTimerRef.current);\n      disappearingTimersRef.current.forEach(timer => clearTimeout(timer));\n    };\n  }, []);\n\n  // Render optimized game elements\n  const renderLevelElements = useCallback(() => {\n    return GAME_LEVELS[currentLevel]?.elements.map((element, index) => {\n      if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms.has(index)) return null;\n      if (element.type === LEVEL_TYPES.COLLECTABLE && collectedItems.has(index)) return null;\n\n      return <GameElement key={index} element={element} index={index} />;\n    });\n  }, [currentLevel, disappearingPlatforms, collectedItems]);\n\n  return (\n    <div className=\"emu-container\" \n         style={{ backgroundColor: GAME_LEVELS[currentLevel]?.backgroundColor || \"#87CEEB\" }}>\n      {renderLevelElements()}\n      <div className={`ball ${isInvulnerable ? 'blink' : ''}`} \n           style={{ left: `${ball.x}%`, bottom: `${ball.y}%`, \n                    width: `${PHYSICS_CONFIG.ballSize}%`, \n                    height: `${PHYSICS_CONFIG.ballSize}%` }} />\n      <GameInterface gameState={gameState} currentLevel={currentLevel} />\n    </div>\n  );\n}\n\n// Extracted component for game elements\nconst GameElement = React.memo(({ element, index }) => {\n  const [position, setPosition] = useState({ x: element.x, y: element.y });\n\n  useEffect(() => {\n    if (element.type === LEVEL_TYPES.MOVING) {\n      const interval = setInterval(() => {\n        const time = Date.now() / 1000;\n        const cycle = Math.sin(time * element.speed);\n        setPosition({\n          x: element.x + element.moveX * cycle,\n          y: element.y + element.moveY * cycle\n        });\n      }, 16);\n      return () => clearInterval(interval);\n    }\n  }, [element]);\n\n  return (\n    <div className={`game-element ${element.type}`}\n         style={{\n           left: `${position.x}%`,\n           bottom: `${position.y}%`,\n           width: `${element.width}%`,\n           height: `${element.height}%`\n         }} />\n  );\n});\n\n// Extracted component for game interface\nconst GameInterface = React.memo(({ gameState, currentLevel }) => {\n  if (gameState.isGameOver) {\n    return (\n      <div className=\"game-over\">\n        <h2>{gameState.isLevelComplete ? \"Congratulazioni!\" : \"Game Over\"}</h2>\n        <button onClick={() => window.location.reload()}>Ricomincia</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"game-info\">\n      <div>Punti: {gameState.score}</div>\n      <div>Livello: {currentLevel + 1}</div>\n      <div>Vite: {[...Array(gameState.lives)].map((_, i) => <span key={i} className=\"life-icon\" />)}</div>\n    </div>\n  );\n});\n\nexport default EmuSchermo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}