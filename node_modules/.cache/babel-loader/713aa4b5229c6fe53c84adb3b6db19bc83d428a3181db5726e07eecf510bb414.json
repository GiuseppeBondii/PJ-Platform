{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { GAME_LEVELS } from \"./Levels\"; // Importa i livelli dal file creato\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8\n};\nconst LEVEL_TYPES = {\n  PLATFORM: \"platform\",\n  MOVING: \"moving\",\n  BOUNCE: \"bounce\",\n  ENEMY: \"enemy\",\n  COLLECTABLE: \"coin\",\n  FINISH: \"finish\",\n  SPIKE: \"spike\",\n  DISAPPEARING: \"disappear\"\n};\nfunction EmuSchermo({\n  pressedButtons\n}) {\n  _s();\n  var _GAME_LEVELS$currentL;\n  // Costanti di fisica espresse in percentuali\n  const ballSize = 6;\n  const horizontalAcceleration = 0.2;\n  const maxHorizontalSpeed = 2;\n  const friction = 0.1;\n  const jumpVelocity = 7;\n  const gravity = -0.5;\n  const bounceMultiplier = 1.5; // Moltiplicatore per piattaforme rimbalzanti\n\n  // Stato di gioco\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [gameState, setGameState] = useState({\n    lives: 3,\n    score: 0,\n    collectables: 0,\n    isGameOver: false,\n    isLevelComplete: false\n  });\n\n  // Array per tenere traccia degli oggetti collezionabili raccolti\n  const [collectedItems, setCollectedItems] = useState([]);\n\n  // Stato delle piattaforme che scompaiono\n  const [disappearingPlatforms, setDisappearingPlatforms] = useState({});\n\n  // Riferimento al timer per piattaforme che scompaiono\n  const disappearingTimersRef = useRef({});\n\n  // Stato dell'invulnerabilità\n  const [isInvulnerable, setIsInvulnerable] = useState(false);\n  const [blinkEffect, setBlinkEffect] = useState(false);\n  const invulnerabilityTimerRef = useRef(null);\n  const blinkTimerRef = useRef(null);\n\n  // Stato della pallina\n  const [ball, setBall] = useState({\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    isOnGround: false,\n    isJumping: false\n  });\n\n  // Inizializza la posizione della pallina all'inizio del livello\n  useEffect(() => {\n    if (GAME_LEVELS[currentLevel]) {\n      const {\n        startPosition\n      } = GAME_LEVELS[currentLevel];\n      setBall(prev => ({\n        ...prev,\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false\n      }));\n\n      // Resetta lo stato delle piattaforme che scompaiono\n      setDisappearingPlatforms({});\n\n      // Cancella i timer esistenti\n      Object.values(disappearingTimersRef.current).forEach(timer => clearTimeout(timer));\n      disappearingTimersRef.current = {};\n\n      // Resetta gli oggetti collezionabili raccolti\n      setCollectedItems([]);\n\n      // Aggiungi classe per l'animazione di transizione\n      const container = document.querySelector('.emu-container');\n      if (container) {\n        container.classList.add('level-transition');\n        setTimeout(() => {\n          container.classList.remove('level-transition');\n        }, 500);\n      }\n    }\n  }, [currentLevel]);\n\n  // Usiamo un ref per tenere traccia dell'ultimo valore di pressedButtons\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Verifica se c'è una collisione con una piattaforma\n  const checkPlatformCollision = (x, y, vx, vy) => {\n    if (!GAME_LEVELS[currentLevel]) return {\n      collision: false\n    };\n    const elements = GAME_LEVELS[currentLevel].elements;\n    const ballBottom = y;\n    const ballTop = y + ballSize;\n    const ballLeft = x;\n    const ballRight = x + ballSize;\n    const tolerance = 2; // Tolleranza per una collisione più precisa\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n\n      // Salta se la piattaforma è scomparsa\n      if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[i]) {\n        continue;\n      }\n      if (element.type === LEVEL_TYPES.PLATFORM || element.type === LEVEL_TYPES.MOVING || element.type === LEVEL_TYPES.BOUNCE || element.type === LEVEL_TYPES.DISAPPEARING) {\n        // Ottieni posizione effettiva per piattaforme in movimento\n        let elementX = element.x;\n        let elementY = element.y;\n        if (element.type === LEVEL_TYPES.MOVING) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n          elementY = element.y + element.moveY * cycle;\n        }\n        const elementLeft = elementX;\n        const elementRight = elementX + element.width;\n        const elementTop = elementY + element.height;\n        const elementBottom = elementY;\n\n        // Verifica se c'è una sovrapposizione tra la pallina e la piattaforma\n        if (ballRight > elementLeft && ballLeft < elementRight && ballTop > elementBottom && ballBottom < elementTop) {\n          // Calcola le distanze di penetrazione\n          const fromTop = ballBottom - elementTop;\n          const fromBottom = elementBottom - ballTop;\n          const fromLeft = ballRight - elementLeft;\n          const fromRight = elementRight - ballLeft;\n\n          // Trova la direzione di minima penetrazione\n          const minPenetration = Math.min(Math.abs(fromTop), Math.abs(fromBottom), Math.abs(fromLeft), Math.abs(fromRight));\n\n          // Collisione dall'alto (atterraggio sulla piattaforma)\n          if (minPenetration === Math.abs(fromTop) && vy < 0) {\n            // Fa scomparire la piattaforma se è di tipo DISAPPEARING\n            if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n              disappearingTimersRef.current[i] = setTimeout(() => {\n                setDisappearingPlatforms(prev => ({\n                  ...prev,\n                  [i]: true\n                }));\n              }, element.timeout || 1000);\n            }\n\n            // Rimbalza se la piattaforma è di tipo BOUNCE\n            if (element.type === LEVEL_TYPES.BOUNCE) {\n              return {\n                collision: true,\n                y: elementTop,\n                vy: jumpVelocity * (element.power || bounceMultiplier),\n                isOnGround: false\n              };\n            }\n\n            // Atterraggio normale\n            return {\n              collision: true,\n              y: elementTop,\n              vy: 0,\n              isOnGround: true\n            };\n          }\n\n          // Collisione dal basso (colpire una piattaforma saltando)\n          if (minPenetration === Math.abs(fromBottom) && vy > 0) {\n            return {\n              collision: true,\n              y: elementBottom - ballSize,\n              vy: -vy * 0.2,\n              // Rimbalza leggermente verso il basso\n              isOnGround: false\n            };\n          }\n\n          // Collisione da sinistra\n          if (minPenetration === Math.abs(fromLeft) && Math.abs(vx) > 0) {\n            return {\n              collision: true,\n              x: elementLeft - ballSize,\n              vx: 0\n            };\n          }\n\n          // Collisione da destra\n          if (minPenetration === Math.abs(fromRight) && Math.abs(vx) > 0) {\n            return {\n              collision: true,\n              x: elementRight,\n              vx: 0\n            };\n          }\n        }\n\n        // Gestione speciale per l'atterraggio più preciso\n        // Verifica se stiamo cadendo appena sopra una piattaforma\n        if (vy < 0 && ballBottom >= elementTop - tolerance && ballBottom <= elementTop + tolerance && ballRight > elementLeft + 1 && ballLeft < elementRight - 1) {\n          // Fa scomparire la piattaforma se è di tipo DISAPPEARING\n          if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n            disappearingTimersRef.current[i] = setTimeout(() => {\n              setDisappearingPlatforms(prev => ({\n                ...prev,\n                [i]: true\n              }));\n            }, element.timeout || 1000);\n          }\n\n          // Rimbalza se la piattaforma è di tipo BOUNCE\n          if (element.type === LEVEL_TYPES.BOUNCE) {\n            return {\n              collision: true,\n              y: elementTop,\n              vy: jumpVelocity * (element.power || bounceMultiplier),\n              isOnGround: false\n            };\n          }\n\n          // Atterraggio normale con aggancio alla piattaforma\n          return {\n            collision: true,\n            y: elementTop,\n            vy: 0,\n            isOnGround: true\n          };\n        }\n      }\n    }\n    return {\n      collision: false\n    };\n  };\n\n  // Controlla se c'è una collisione con un oggetto collezionabile\n  const checkCollectableCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.COLLECTABLE) {\n        // Salta se l'oggetto è già stato raccolto\n        if (collectedItems.includes(i)) continue;\n\n        // Controllo collisione (oggetto collezionabile è un punto)\n        const collectableSize = 5; // Dimensione approssimativa dell'oggetto\n        if (x < element.x + collectableSize && x + ballSize > element.x && y < element.y + collectableSize && y + ballSize > element.y) {\n          // Aggiorna lo stato di gioco\n          setGameState(prev => ({\n            ...prev,\n            score: prev.score + 100,\n            collectables: prev.collectables + 1\n          }));\n\n          // Aggiorna l'array degli oggetti raccolti\n          setCollectedItems(prev => [...prev, i]);\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Controlla se c'è una collisione con un nemico o una punta\n  const checkHazardCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.ENEMY || element.type === LEVEL_TYPES.SPIKE) {\n        let elementX = element.x;\n        let elementY = element.y;\n\n        // Aggiorna la posizione per nemici in movimento\n        if (element.type === LEVEL_TYPES.ENEMY && element.moveX) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n        }\n\n        // Controllo collisione\n        if (x < elementX + element.width && x + ballSize > elementX && y < elementY + element.height && y + ballSize > elementY) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Controlla se il giocatore ha raggiunto il traguardo\n  const checkFinishCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.FINISH) {\n        const finishSize = 10; // Dimensione approssimativa del traguardo\n        if (x < element.x + finishSize && x + ballSize > element.x && y < element.y + finishSize && y + ballSize > element.y) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Gestisce il completamento del livello\n  const completeLevel = () => {\n    // Verifica se ci sono altri livelli\n    if (currentLevel < GAME_LEVELS.length - 1) {\n      // Passa al livello successivo\n      setCurrentLevel(prev => prev);\n    } else {\n      // Hai completato tutti i livelli\n      setGameState(prev => ({\n        ...prev,\n        isGameOver: true,\n        isLevelComplete: true\n      }));\n    }\n  };\n\n  // Gestisce la morte del giocatore\n  const playerDeath = () => {\n    // Riduce il numero di vite\n    setGameState(prev => {\n      const newLives = prev.lives - 1;\n      if (newLives <= 0) {\n        return {\n          ...prev,\n          lives: 0,\n          isGameOver: true\n        };\n      }\n      return {\n        ...prev,\n        lives: newLives\n      };\n    });\n\n    // Reimposta la posizione della pallina all'inizio del livello\n    if (GAME_LEVELS[currentLevel]) {\n      const {\n        startPosition\n      } = GAME_LEVELS[currentLevel];\n      setBall(prev => ({\n        ...prev,\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false\n      }));\n    }\n  };\n\n  // Pulizia dei timer\n  useEffect(() => {\n    return () => {\n      clearTimeout(invulnerabilityTimerRef.current);\n      clearInterval(blinkTimerRef.current);\n      Object.values(disappearingTimersRef.current).forEach(timer => clearTimeout(timer));\n    };\n  }, []);\n\n  // Ciclo di animazione continuo con requestAnimationFrame\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      // Salta l'aggiornamento se il gioco è in pausa o finito\n      if (gameState.isGameOver) {\n        return;\n      }\n      setBall(prev => {\n        let {\n          x,\n          y,\n          vx,\n          vy,\n          isOnGround,\n          isJumping\n        } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione dell'accelerazione orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) {\n          vx -= horizontalAcceleration;\n        }\n        if (currentPressedButtons[BUTTONS.RIGHT]) {\n          vx += horizontalAcceleration;\n        }\n\n        // Se non ci sono input orizzontali, applica attrito\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          // Applica attrito per rallentare gradualmente\n          if (vx > 0) {\n            vx = Math.max(vx - friction, 0);\n          } else if (vx < 0) {\n            vx = Math.min(vx + friction, 0);\n          }\n        }\n\n        // Limita la velocità orizzontale\n        if (vx > maxHorizontalSpeed) vx = maxHorizontalSpeed;\n        if (vx < -maxHorizontalSpeed) vx = -maxHorizontalSpeed;\n\n        // Gestione per il pulsante A (salto)\n        if (currentPressedButtons[BUTTONS.A] && isOnGround) {\n          vy = jumpVelocity;\n          isOnGround = false;\n          isJumping = true;\n        } else if (!currentPressedButtons[BUTTONS.A]) {\n          isJumping = false;\n        }\n\n        // Applica la gravità alla velocità verticale\n        vy += gravity;\n\n        // Aggiorna le posizioni\n        const newX = x + vx;\n        const newY = y + vy;\n\n        // Controlla collisioni con le piattaforme\n        const platformCollision = checkPlatformCollision(newX, newY, vx, vy);\n        if (platformCollision.collision) {\n          // Aggiorna posizione e velocità in base alla collisione\n          x = platformCollision.x !== undefined ? platformCollision.x : newX;\n          y = platformCollision.y !== undefined ? platformCollision.y : newY;\n          vx = platformCollision.vx !== undefined ? platformCollision.vx : vx;\n          vy = platformCollision.vy !== undefined ? platformCollision.vy : vy;\n          isOnGround = platformCollision.isOnGround !== undefined ? platformCollision.isOnGround : isOnGround;\n        } else {\n          // Nessuna collisione, aggiorna normalmente\n          x = newX;\n          y = newY;\n          isOnGround = false;\n        }\n\n        // Controlla se è stato raccolto un oggetto collezionabile\n        checkCollectableCollision(x, y);\n\n        // Controlla collisioni con nemici o punte\n        if (checkHazardCollision(x, y) && !isInvulnerable) {\n          playerDeath();\n        }\n\n        // Controlla se il giocatore ha raggiunto il traguardo\n        if (checkFinishCollision(x, y)) {\n          completeLevel();\n        }\n\n        // Controllo se il giocatore è caduto dal livello\n        if (y < -10) {\n          playerDeath();\n          return {\n            x,\n            y: 0,\n            vx: 0,\n            vy: 0,\n            isOnGround: false,\n            isJumping: false\n          };\n        }\n\n        // Clamping della posizione orizzontale nel container\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 100 - ballSize) {\n          x = 100 - ballSize;\n          vx = 0;\n        }\n\n        // Gestione dei pulsanti START e SELECT\n        if (currentPressedButtons[BUTTONS.START]) {\n          // Reimposta il livello\n          if (GAME_LEVELS[currentLevel]) {\n            const {\n              startPosition\n            } = GAME_LEVELS[currentLevel];\n            return {\n              x: startPosition.x,\n              y: startPosition.y,\n              vx: 0,\n              vy: 0,\n              isOnGround: false,\n              isJumping: false\n            };\n          }\n        }\n        if (currentPressedButtons[BUTTONS.SELECT]) {\n          // Cambia il livello\n          setCurrentLevel(prev => (prev + 1) % GAME_LEVELS.length);\n        }\n\n        // Supporto per la pressione DOWN (abbassarsi o accelerare la caduta)\n        if (currentPressedButtons[BUTTONS.DOWN] && !isOnGround) {\n          vy -= 0.5; // Accelera la caduta\n        }\n        return {\n          x,\n          y,\n          vx,\n          vy,\n          isOnGround,\n          isJumping\n        };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [currentLevel, gameState.isGameOver]);\n\n  // Renderizza il livello corrente\n  const renderLevel = () => {\n    if (!GAME_LEVELS[currentLevel]) return null;\n    const level = GAME_LEVELS[currentLevel];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: level.elements.map((element, index) => {\n        // Salta se la piattaforma è scomparsa\n        if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[index]) {\n          return null;\n        }\n\n        // Salta se l'oggetto collezionabile è stato raccolto\n        if (element.type === LEVEL_TYPES.COLLECTABLE && collectedItems.includes(index)) {\n          return null;\n        }\n\n        // Calcola la posizione per elementi in movimento\n        let elementX = element.x;\n        let elementY = element.y;\n        if (element.type === LEVEL_TYPES.MOVING) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          const offset = element.offset || 0;\n          elementX = element.x + element.moveX * cycle;\n          elementY = element.y + element.moveY * cycle;\n        }\n\n        // Renderizza in base al tipo\n        switch (element.type) {\n          case LEVEL_TYPES.PLATFORM:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.MOVING:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform moving\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.BOUNCE:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform bounce\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.DISAPPEARING:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform disappearing\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.ENEMY:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"enemy\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 644,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.SPIKE:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spike\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.COLLECTABLE:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"collectable\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: \"5%\",\n                height: \"5%\"\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.FINISH:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"finish\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: \"10%\",\n                height: \"10%\"\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 17\n            }, this);\n          default:\n            return null;\n        }\n      })\n    }, void 0, false);\n  };\n\n  // Renderizza l'interfaccia di gioco\n  const renderGameInterface = () => {\n    if (gameState.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: gameState.isLevelComplete ? \"Congratulazioni!\" : \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Punteggio: \", gameState.score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Oggetti raccolti: \", gameState.collectables]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setCurrentLevel(0);\n            setGameState({\n              lives: 3,\n              score: 0,\n              collectables: 0,\n              isGameOver: false,\n              isLevelComplete: false\n            });\n          },\n          children: \"Ricomincia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 9\n      }, this);\n    }\n    const renderLives = () => {\n      const livesArray = [];\n      for (let i = 0; i < gameState.lives; i++) {\n        livesArray.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"life-icon\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 25\n        }, this));\n      }\n      return livesArray;\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Punti: \", gameState.score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lives-display\",\n          children: [\"Vite: \", renderLives()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emu-container\",\n    style: {\n      backgroundColor: ((_GAME_LEVELS$currentL = GAME_LEVELS[currentLevel]) === null || _GAME_LEVELS$currentL === void 0 ? void 0 : _GAME_LEVELS$currentL.backgroundColor) || \"#87CEEB\"\n    },\n    children: [renderLevel(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `ball ${blinkEffect ? 'blink' : ''}`,\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`,\n        width: `${ballSize}%`,\n        height: `${ballSize}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 7\n    }, this), renderGameInterface()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 749,\n    columnNumber: 5\n  }, this);\n}\n_s(EmuSchermo, \"3iajrLxGpZAJ0ktE4fsXd1qb64c=\");\n_c = EmuSchermo;\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GAME_LEVELS","jsxDEV","_jsxDEV","Fragment","_Fragment","BUTTONS","A","B","START","SELECT","UP","DOWN","LEFT","RIGHT","LEVEL_TYPES","PLATFORM","MOVING","BOUNCE","ENEMY","COLLECTABLE","FINISH","SPIKE","DISAPPEARING","EmuSchermo","pressedButtons","_s","_GAME_LEVELS$currentL","ballSize","horizontalAcceleration","maxHorizontalSpeed","friction","jumpVelocity","gravity","bounceMultiplier","currentLevel","setCurrentLevel","gameState","setGameState","lives","score","collectables","isGameOver","isLevelComplete","collectedItems","setCollectedItems","disappearingPlatforms","setDisappearingPlatforms","disappearingTimersRef","isInvulnerable","setIsInvulnerable","blinkEffect","setBlinkEffect","invulnerabilityTimerRef","blinkTimerRef","ball","setBall","x","y","vx","vy","isOnGround","isJumping","startPosition","prev","Object","values","current","forEach","timer","clearTimeout","container","document","querySelector","classList","add","setTimeout","remove","pressedButtonsRef","checkPlatformCollision","collision","elements","ballBottom","ballTop","ballLeft","ballRight","tolerance","i","length","element","type","elementX","elementY","time","Date","now","cycle","Math","sin","speed","moveX","moveY","elementLeft","elementRight","width","elementTop","height","elementBottom","fromTop","fromBottom","fromLeft","fromRight","minPenetration","min","abs","timeout","power","checkCollectableCollision","includes","collectableSize","checkHazardCollision","checkFinishCollision","finishSize","completeLevel","playerDeath","newLives","clearInterval","animationFrameId","update","currentPressedButtons","max","newX","newY","platformCollision","undefined","requestAnimationFrame","cancelAnimationFrame","renderLevel","level","children","map","index","offset","className","style","left","bottom","fileName","_jsxFileName","lineNumber","columnNumber","renderGameInterface","onClick","renderLives","livesArray","push","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { GAME_LEVELS } from \"./Levels\"; // Importa i livelli dal file creato\n\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8,\n};\n\nconst LEVEL_TYPES = {\n  PLATFORM: \"platform\",\n  MOVING: \"moving\",\n  BOUNCE: \"bounce\",\n  ENEMY: \"enemy\",\n  COLLECTABLE: \"coin\",\n  FINISH: \"finish\",\n  SPIKE: \"spike\",\n  DISAPPEARING: \"disappear\"\n};\n\nfunction EmuSchermo({ pressedButtons }) {\n  // Costanti di fisica espresse in percentuali\n  const ballSize = 6;\n  const horizontalAcceleration = 0.2;\n  const maxHorizontalSpeed = 2;\n  const friction = 0.1;\n  const jumpVelocity = 7;\n  const gravity = -0.5;\n  const bounceMultiplier = 1.5; // Moltiplicatore per piattaforme rimbalzanti\n\n  // Stato di gioco\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [gameState, setGameState] = useState({\n    lives: 3,\n    score: 0,\n    collectables: 0,\n    isGameOver: false,\n    isLevelComplete: false\n  });\n\n  // Array per tenere traccia degli oggetti collezionabili raccolti\n  const [collectedItems, setCollectedItems] = useState([]);\n  \n  // Stato delle piattaforme che scompaiono\n  const [disappearingPlatforms, setDisappearingPlatforms] = useState({});\n\n  // Riferimento al timer per piattaforme che scompaiono\n  const disappearingTimersRef = useRef({});\n\n  // Stato dell'invulnerabilità\n  const [isInvulnerable, setIsInvulnerable] = useState(false);\n  const [blinkEffect, setBlinkEffect] = useState(false);\n  const invulnerabilityTimerRef = useRef(null);\n  const blinkTimerRef = useRef(null);\n\n  // Stato della pallina\n  const [ball, setBall] = useState({\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    isOnGround: false,\n    isJumping: false\n  });\n\n  // Inizializza la posizione della pallina all'inizio del livello\n  useEffect(() => {\n    if (GAME_LEVELS[currentLevel]) {\n      const { startPosition } = GAME_LEVELS[currentLevel];\n      setBall(prev => ({\n        ...prev,\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false\n      }));\n      \n      // Resetta lo stato delle piattaforme che scompaiono\n      setDisappearingPlatforms({});\n      \n      // Cancella i timer esistenti\n      Object.values(disappearingTimersRef.current).forEach(timer => clearTimeout(timer));\n      disappearingTimersRef.current = {};\n      \n      // Resetta gli oggetti collezionabili raccolti\n      setCollectedItems([]);\n\n      // Aggiungi classe per l'animazione di transizione\n      const container = document.querySelector('.emu-container');\n      if (container) {\n        container.classList.add('level-transition');\n        setTimeout(() => {\n          container.classList.remove('level-transition');\n        }, 500);\n      }\n    }\n  }, [currentLevel]);\n\n  // Usiamo un ref per tenere traccia dell'ultimo valore di pressedButtons\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Verifica se c'è una collisione con una piattaforma\n  const checkPlatformCollision = (x, y, vx, vy) => {\n    if (!GAME_LEVELS[currentLevel]) return { collision: false };\n\n    const elements = GAME_LEVELS[currentLevel].elements;\n    const ballBottom = y;\n    const ballTop = y + ballSize;\n    const ballLeft = x;\n    const ballRight = x + ballSize;\n    const tolerance = 2; // Tolleranza per una collisione più precisa\n  \n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      \n      // Salta se la piattaforma è scomparsa\n      if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[i]) {\n        continue;\n      }\n      \n      if (element.type === LEVEL_TYPES.PLATFORM || \n          element.type === LEVEL_TYPES.MOVING || \n          element.type === LEVEL_TYPES.BOUNCE || \n          element.type === LEVEL_TYPES.DISAPPEARING) {\n        \n        // Ottieni posizione effettiva per piattaforme in movimento\n        let elementX = element.x;\n        let elementY = element.y;\n        \n        if (element.type === LEVEL_TYPES.MOVING) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          \n          elementX = element.x + element.moveX * cycle;\n          elementY = element.y + element.moveY * cycle;\n        }\n        \n        const elementLeft = elementX;\n        const elementRight = elementX + element.width;\n        const elementTop = elementY + element.height;\n        const elementBottom = elementY;\n        \n        // Verifica se c'è una sovrapposizione tra la pallina e la piattaforma\n        if (ballRight > elementLeft && \n            ballLeft < elementRight && \n            ballTop > elementBottom && \n            ballBottom < elementTop) {\n          \n          // Calcola le distanze di penetrazione\n          const fromTop = ballBottom - elementTop;\n          const fromBottom = elementBottom - ballTop;\n          const fromLeft = ballRight - elementLeft;\n          const fromRight = elementRight - ballLeft;\n          \n          // Trova la direzione di minima penetrazione\n          const minPenetration = Math.min(Math.abs(fromTop), Math.abs(fromBottom), Math.abs(fromLeft), Math.abs(fromRight));\n          \n          // Collisione dall'alto (atterraggio sulla piattaforma)\n          if (minPenetration === Math.abs(fromTop) && vy < 0) {\n            // Fa scomparire la piattaforma se è di tipo DISAPPEARING\n            if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n              disappearingTimersRef.current[i] = setTimeout(() => {\n                setDisappearingPlatforms(prev => ({ ...prev, [i]: true }));\n              }, element.timeout || 1000);\n            }\n            \n            // Rimbalza se la piattaforma è di tipo BOUNCE\n            if (element.type === LEVEL_TYPES.BOUNCE) {\n              return { \n                collision: true, \n                y: elementTop, \n                vy: jumpVelocity * (element.power || bounceMultiplier),\n                isOnGround: false\n              };\n            }\n            \n            // Atterraggio normale\n            return { \n              collision: true, \n              y: elementTop, \n              vy: 0,\n              isOnGround: true\n            };\n          }\n          \n          // Collisione dal basso (colpire una piattaforma saltando)\n          if (minPenetration === Math.abs(fromBottom) && vy > 0) {\n            return {\n              collision: true,\n              y: elementBottom - ballSize,\n              vy: -vy * 0.2, // Rimbalza leggermente verso il basso\n              isOnGround: false\n            };\n          }\n          \n          // Collisione da sinistra\n          if (minPenetration === Math.abs(fromLeft) && Math.abs(vx) > 0) {\n            return {\n              collision: true,\n              x: elementLeft - ballSize,\n              vx: 0\n            };\n          }\n          \n          // Collisione da destra\n          if (minPenetration === Math.abs(fromRight) && Math.abs(vx) > 0) {\n            return {\n              collision: true,\n              x: elementRight,\n              vx: 0\n            };\n          }\n        }\n        \n        // Gestione speciale per l'atterraggio più preciso\n        // Verifica se stiamo cadendo appena sopra una piattaforma\n        if (vy < 0 && \n            ballBottom >= elementTop - tolerance && \n            ballBottom <= elementTop + tolerance &&\n            ballRight > elementLeft + 1 && \n            ballLeft < elementRight - 1) {\n          \n          // Fa scomparire la piattaforma se è di tipo DISAPPEARING\n          if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n            disappearingTimersRef.current[i] = setTimeout(() => {\n              setDisappearingPlatforms(prev => ({ ...prev, [i]: true }));\n            }, element.timeout || 1000);\n          }\n          \n          // Rimbalza se la piattaforma è di tipo BOUNCE\n          if (element.type === LEVEL_TYPES.BOUNCE) {\n            return { \n              collision: true, \n              y: elementTop, \n              vy: jumpVelocity * (element.power || bounceMultiplier),\n              isOnGround: false\n            };\n          }\n          \n          // Atterraggio normale con aggancio alla piattaforma\n          return { \n            collision: true, \n            y: elementTop, \n            vy: 0,\n            isOnGround: true\n          };\n        }\n      }\n    }\n    \n    return { collision: false };\n  };\n\n  // Controlla se c'è una collisione con un oggetto collezionabile\n  const checkCollectableCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n\n    const elements = GAME_LEVELS[currentLevel].elements;\n    \n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      \n      if (element.type === LEVEL_TYPES.COLLECTABLE) {\n        // Salta se l'oggetto è già stato raccolto\n        if (collectedItems.includes(i)) continue;\n        \n        // Controllo collisione (oggetto collezionabile è un punto)\n        const collectableSize = 5; // Dimensione approssimativa dell'oggetto\n        if (x < element.x + collectableSize && \n            x + ballSize > element.x && \n            y < element.y + collectableSize && \n            y + ballSize > element.y) {\n          \n          // Aggiorna lo stato di gioco\n          setGameState(prev => ({\n            ...prev,\n            score: prev.score + 100,\n            collectables: prev.collectables + 1\n          }));\n          \n          // Aggiorna l'array degli oggetti raccolti\n          setCollectedItems(prev => [...prev, i]);\n          \n          return true;\n        }\n      }\n    }\n    \n    return false;\n  };\n\n  // Controlla se c'è una collisione con un nemico o una punta\n  const checkHazardCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n\n    const elements = GAME_LEVELS[currentLevel].elements;\n    \n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      \n      if (element.type === LEVEL_TYPES.ENEMY || element.type === LEVEL_TYPES.SPIKE) {\n        let elementX = element.x;\n        let elementY = element.y;\n        \n        // Aggiorna la posizione per nemici in movimento\n        if (element.type === LEVEL_TYPES.ENEMY && element.moveX) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n        }\n        \n        // Controllo collisione\n        if (x < elementX + element.width && \n            x + ballSize > elementX && \n            y < elementY + element.height && \n            y + ballSize > elementY) {\n          \n          return true;\n        }\n      }\n    }\n    \n    return false;\n  };\n\n  // Controlla se il giocatore ha raggiunto il traguardo\n  const checkFinishCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n\n    const elements = GAME_LEVELS[currentLevel].elements;\n    \n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      \n      if (element.type === LEVEL_TYPES.FINISH) {\n        const finishSize = 10; // Dimensione approssimativa del traguardo\n        if (x < element.x + finishSize && \n            x + ballSize > element.x && \n            y < element.y + finishSize && \n            y + ballSize > element.y) {\n          \n          return true;\n        }\n      }\n    }\n    \n    return false;\n  };\n\n  // Gestisce il completamento del livello\n  const completeLevel = () => {\n    // Verifica se ci sono altri livelli\n    if (currentLevel < GAME_LEVELS.length - 1) {\n      // Passa al livello successivo\n      setCurrentLevel(prev => prev );\n    } else {\n      // Hai completato tutti i livelli\n      setGameState(prev => ({\n        ...prev,\n        isGameOver: true,\n        isLevelComplete: true\n      }));\n    }\n  };\n\n  // Gestisce la morte del giocatore\n  const playerDeath = () => {    \n    // Riduce il numero di vite\n    setGameState(prev => {\n      const newLives = prev.lives - 1;\n      \n      if (newLives <= 0) {\n        return {\n          ...prev,\n          lives: 0,\n          isGameOver: true\n        };\n      }\n      \n      return {\n        ...prev,\n        lives: newLives\n      };\n    });\n    \n    \n    \n    // Reimposta la posizione della pallina all'inizio del livello\n    if (GAME_LEVELS[currentLevel]) {\n      const { startPosition } = GAME_LEVELS[currentLevel];\n      setBall(prev => ({\n        ...prev,\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false\n      }));\n    }\n  };\n\n  // Pulizia dei timer\n  useEffect(() => {\n    return () => {\n      clearTimeout(invulnerabilityTimerRef.current);\n      clearInterval(blinkTimerRef.current);\n      Object.values(disappearingTimersRef.current).forEach(timer => clearTimeout(timer));\n    };\n  }, []);\n\n  // Ciclo di animazione continuo con requestAnimationFrame\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      // Salta l'aggiornamento se il gioco è in pausa o finito\n      if (gameState.isGameOver) {\n        return;\n      }\n      \n      setBall(prev => {\n        let { x, y, vx, vy, isOnGround, isJumping } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione dell'accelerazione orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) {\n          vx -= horizontalAcceleration;\n        } \n        if (currentPressedButtons[BUTTONS.RIGHT]) {\n          vx += horizontalAcceleration;\n        } \n        \n        // Se non ci sono input orizzontali, applica attrito\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          // Applica attrito per rallentare gradualmente\n          if (vx > 0) {\n            vx = Math.max(vx - friction, 0);\n          } else if (vx < 0) {\n            vx = Math.min(vx + friction, 0);\n          }\n        }\n\n        // Limita la velocità orizzontale\n        if (vx > maxHorizontalSpeed) vx = maxHorizontalSpeed;\n        if (vx < -maxHorizontalSpeed) vx = -maxHorizontalSpeed;\n\n        // Gestione per il pulsante A (salto)\n        if (currentPressedButtons[BUTTONS.A] && isOnGround) {\n          vy = jumpVelocity;\n          isOnGround = false;\n          isJumping = true;\n        } else if (!currentPressedButtons[BUTTONS.A]) {\n          isJumping = false;\n        }\n\n        // Applica la gravità alla velocità verticale\n        vy += gravity;\n\n        // Aggiorna le posizioni\n        const newX = x + vx;\n        const newY = y + vy;\n        \n        // Controlla collisioni con le piattaforme\n        const platformCollision = checkPlatformCollision(newX, newY, vx, vy);\n        \n        if (platformCollision.collision) {\n          // Aggiorna posizione e velocità in base alla collisione\n          x = platformCollision.x !== undefined ? platformCollision.x : newX;\n          y = platformCollision.y !== undefined ? platformCollision.y : newY;\n          vx = platformCollision.vx !== undefined ? platformCollision.vx : vx;\n          vy = platformCollision.vy !== undefined ? platformCollision.vy : vy;\n          isOnGround = platformCollision.isOnGround !== undefined ? platformCollision.isOnGround : isOnGround;\n        } else {\n          // Nessuna collisione, aggiorna normalmente\n          x = newX;\n          y = newY;\n          isOnGround = false;\n        }\n        \n        // Controlla se è stato raccolto un oggetto collezionabile\n        checkCollectableCollision(x, y);\n        \n        // Controlla collisioni con nemici o punte\n        if (checkHazardCollision(x, y) && !isInvulnerable) {\n          playerDeath();\n        }\n        \n        // Controlla se il giocatore ha raggiunto il traguardo\n        if (checkFinishCollision(x, y)) {\n          completeLevel();\n        }\n        \n        // Controllo se il giocatore è caduto dal livello\n        if (y < -10) {\n          playerDeath();\n          return { x, y: 0, vx: 0, vy: 0, isOnGround: false, isJumping: false };\n        }\n\n        // Clamping della posizione orizzontale nel container\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 100 - ballSize) {\n          x = 100 - ballSize;\n          vx = 0;\n        }\n\n        // Gestione dei pulsanti START e SELECT\n        if (currentPressedButtons[BUTTONS.START]) {\n          // Reimposta il livello\n          if (GAME_LEVELS[currentLevel]) {\n            const { startPosition } = GAME_LEVELS[currentLevel];\n            return {\n              x: startPosition.x,\n              y: startPosition.y,\n              vx: 0,\n              vy: 0,\n              isOnGround: false,\n              isJumping: false\n            };\n          }\n        }\n\n        if (currentPressedButtons[BUTTONS.SELECT]) {\n          // Cambia il livello\n          setCurrentLevel(prev => (prev + 1) % GAME_LEVELS.length);\n        }\n\n        // Supporto per la pressione DOWN (abbassarsi o accelerare la caduta)\n        if (currentPressedButtons[BUTTONS.DOWN] && !isOnGround) {\n          vy -= 0.5; // Accelera la caduta\n        }\n\n        return { x, y, vx, vy, isOnGround, isJumping };\n      });\n      \n      animationFrameId.current = requestAnimationFrame(update);\n    };\n\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [currentLevel, gameState.isGameOver]);\n\n  // Renderizza il livello corrente\n  const renderLevel = () => {\n    if (!GAME_LEVELS[currentLevel]) return null;\n    \n    const level = GAME_LEVELS[currentLevel];\n    \n    return (\n      <>\n        {level.elements.map((element, index) => {\n          // Salta se la piattaforma è scomparsa\n          if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[index]) {\n            return null;\n          }\n          \n          // Salta se l'oggetto collezionabile è stato raccolto\n          if (element.type === LEVEL_TYPES.COLLECTABLE && collectedItems.includes(index)) {\n            return null;\n          }\n          \n          // Calcola la posizione per elementi in movimento\n          let elementX = element.x;\n          let elementY = element.y;\n          \n          if (element.type === LEVEL_TYPES.MOVING) {\n            const time = Date.now() / 1000;\n            const cycle = Math.sin(time * element.speed);\n            const offset = element.offset || 0;\n            \n            elementX = element.x + element.moveX * cycle;\n            elementY = element.y + element.moveY * cycle;\n          }\n          \n          // Renderizza in base al tipo\n          switch(element.type) {\n            case LEVEL_TYPES.PLATFORM:\n              return (\n                <div\n                  key={index}\n                  className=\"platform\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.MOVING:\n              return (\n                <div\n                  key={index}\n                  className=\"platform moving\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.BOUNCE:\n              return (\n                <div\n                  key={index}\n                  className=\"platform bounce\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.DISAPPEARING:\n              return (\n                <div\n                  key={index}\n                  className=\"platform disappearing\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.ENEMY:\n              return (\n                <div\n                  key={index}\n                  className=\"enemy\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.SPIKE:\n              return (\n                <div\n                  key={index}\n                  className=\"spike\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.COLLECTABLE:\n              return (\n                <div\n                  key={index}\n                  className=\"collectable\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: \"5%\",\n                    height: \"5%\"\n                  }}\n                />\n              );\n            case LEVEL_TYPES.FINISH:\n              return (\n                <div\n                  key={index}\n                  className=\"finish\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: \"10%\",\n                    height: \"10%\"\n                  }}\n                />\n              );\n            default:\n              return null;\n          }\n        })}\n      </>\n    );\n  };\n\n  // Renderizza l'interfaccia di gioco\n  const renderGameInterface = () => {\n    if (gameState.isGameOver) {\n      return (\n        <div className=\"game-over\">\n          <h2>{gameState.isLevelComplete ? \"Congratulazioni!\" : \"Game Over\"}</h2>\n          <p>Punteggio: {gameState.score}</p>\n          <p>Oggetti raccolti: {gameState.collectables}</p>\n          <button \n            onClick={() => {\n              setCurrentLevel(0);\n              setGameState({\n                lives: 3,\n                score: 0,\n                collectables: 0,\n                isGameOver: false,\n                isLevelComplete: false\n              });\n            }}\n          >\n            Ricomincia\n          </button>\n        </div>\n      );\n    }\n    \n    const renderLives = () => {\n      const livesArray = [];\n      for (let i = 0; i < gameState.lives; i++) {\n        livesArray.push(<span key={i} className=\"life-icon\"></span>);\n      }\n      return livesArray;\n    };\n    \n    return (\n      <>\n        <div className=\"game-info\">\n          <div>Punti: {gameState.score}</div>\n          <div className=\"lives-display\">\n            Vite: {renderLives()}\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"emu-container\" style={{ backgroundColor: GAME_LEVELS[currentLevel]?.backgroundColor || \"#87CEEB\" }}>\n      {renderLevel()}\n      \n      <div\n        className={`ball ${blinkEffect ? 'blink' : ''}`}\n        style={{\n          left: `${ball.x}%`,\n          bottom: `${ball.y}%`,\n          width: `${ballSize}%`,\n          height: `${ballSize}%`\n        }}\n      ></div>\n      \n      {renderGameInterface()}\n    </div>\n  );\n}\n\nexport default EmuSchermo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}