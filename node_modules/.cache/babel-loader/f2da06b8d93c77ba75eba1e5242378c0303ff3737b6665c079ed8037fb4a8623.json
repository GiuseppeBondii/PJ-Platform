{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  LEFT: 7,\n  RIGHT: 8\n};\nfunction createSeededRandom(seed) {\n  const a = 1664525;\n  const c = 1013904222;\n  const m = 2 ** 32;\n  let state = seed;\n  return function () {\n    state = (a * state + c) % m;\n    return state / m;\n  };\n}\nfunction generateLevel(seed) {\n  const rand = createSeededRandom(seed);\n  const platforms = [];\n  const maxX = 100;\n\n  // Parametri per la generazione controllata\n  const N = 10; // numero di piattaforme\n  const minWidth = 5;\n  const maxWidth = 30;\n  const minVertical = 5; // incremento minimo in altezza\n  const maxVertical = 13; // incremento massimo in altezza\n  const maxHorizontalOffset = 15; // offset massimo in orizzontale dal centro della piattaforma precedente\n\n  // Genera la prima piattaforma in maniera totalmente casuale\n  const width0 = Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth;\n  const posStart0 = Math.floor(rand() * (maxX - width0));\n  const posEnd0 = posStart0 + width0;\n  const center0 = posStart0 + width0 / 2;\n  // Per comodità consideriamo la prima piattaforma come base, a un'altezza fissata (ad es. 20)\n  const baseHeight = 20;\n  platforms.push({\n    type: 'p',\n    height: baseHeight,\n    posStartX: posStart0,\n    posEndX: posEnd0\n  });\n  let prevCenter = center0;\n  let prevHeight = baseHeight;\n\n  // Genera le piattaforme successive, assicurandone la raggiungibilità\n  for (let i = 1; i < N; i++) {\n    // Calcola incremento verticale in modo controllato\n    const heightIncrement = Math.floor(rand() * (maxVertical - minVertical + 1)) + minVertical;\n    const newHeight = prevHeight + heightIncrement;\n\n    // Calcola larghezza della piattaforma\n    const width = Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth;\n\n    // Calcola un nuovo centro limitando lo spostamento orizzontale\n    const offset = (rand() * 2 - 1) * maxHorizontalOffset;\n    let newCenter = prevCenter + offset;\n    // Assicura che il centro non esca dai bordi\n    if (newCenter < width / 2) newCenter = width / 2;\n    if (newCenter > maxX - width / 2) newCenter = maxX - width / 2;\n    const posStartX = Math.floor(newCenter - width / 2);\n    const posEndX = posStartX + width;\n\n    // Se è l'ultima piattaforma, designala come piattaforma \"T\"\n    const type = i === N - 1 ? \"T\" : rand() < 0.3 ? \"s\" : \"p\";\n    platforms.push({\n      type,\n      height: newHeight,\n      posStartX,\n      posEndX\n    });\n\n    // Aggiorna i riferimenti per il prossimo ciclo\n    prevCenter = newCenter;\n    prevHeight = newHeight;\n  }\n  return platforms;\n}\nfunction EmuSchermo({\n  pressedButtons\n}) {\n  _s();\n  const ballSize = 4;\n  const horizontalAcceleration = 0.1;\n  const maxHorizontalSpeed = 1;\n  const friction = 0.2;\n  const jumpVelocity = 6;\n  const gravity = -0.5;\n  const [level, setLevel] = useState(1);\n  const [LEVEL, SETLEVEL] = useState(generateLevel(1));\n  const platformsRef = useRef(LEVEL);\n  useEffect(() => {\n    platformsRef.current = LEVEL;\n  }, [LEVEL]);\n  const [ball, setBall] = useState({\n    x: 2,\n    y: 0,\n    vx: 0,\n    vy: 0\n  });\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      setBall(prev => {\n        let {\n          x,\n          y,\n          vx,\n          vy\n        } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione input orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) vx -= horizontalAcceleration;\n        if (currentPressedButtons[BUTTONS.RIGHT]) vx += horizontalAcceleration;\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          vx = vx > 0 ? Math.max(vx - friction, 0) : Math.min(vx + friction, 0);\n        }\n        vx = Math.min(Math.max(vx, -maxHorizontalSpeed), maxHorizontalSpeed);\n\n        // Salto solo se a terra o su piattaforma\n        const isOnGroundOrPlatform = prev.y === 0 || platformsRef.current.some(p => {\n          const platformTop = p.height + 2;\n          const horizontalOverlap = prev.x <= p.posEndX && prev.x + ballSize >= p.posStartX;\n          return prev.y === platformTop && horizontalOverlap;\n        });\n        if (currentPressedButtons[BUTTONS.A] && isOnGroundOrPlatform) {\n          vy = jumpVelocity;\n        }\n        vy += gravity;\n        let newY = y + vy;\n        let newX = x + vx;\n\n        // Collisioni con piattaforme\n        let collided = false;\n        platformsRef.current.forEach(platform => {\n          const platformTop = platform.height + 2; // Top della piattaforma (2% di spessore)\n          const platformBottom = platform.height; // Base della piattaforma\n\n          // 1. Controllo overlap orizzontale\n          const horizontalOverlap = newX < platform.posEndX && newX + ballSize > platform.posStartX;\n\n          // 2. Controllo overlap verticale\n          const verticalOverlap = newY <= platformTop && newY + ballSize >= platformBottom;\n\n          // 3. Determinazione direzione collisione\n          if (horizontalOverlap && verticalOverlap) {\n            const prevBottom = prev.y + ballSize;\n            if (prevBottom <= platformBottom && vy > 0) {\n              // Collisione dal basso (salto contro piattaforma)\n              newY = platformBottom - ballSize;\n              vy = 0;\n            } else if (vy <= 0) {\n              // Collisione dall'alto (atterraggio su piattaforma)\n              newY = platformTop;\n              vy = 0;\n            }\n            collided = true;\n          }\n        });\n\n        // Collisione con il terreno solo se non abbiamo colliso con piattaforme\n        if (!collided && newY < 0) {\n          newY = 0;\n          vy = 0;\n        }\n\n        // Clamping orizzontale\n        newX = Math.max(0, Math.min(newX, 100 - ballSize));\n        platformsRef.current.forEach(platform => {\n          if (platform.type === \"s\") {\n            const spikeLeft = platform.posStartX;\n            const spikeRight = platform.posEndX;\n            const spikeTop = platform.height + 3;\n            const spikeBottom = platform.height;\n            const horizontalCollision = x + ballSize > spikeLeft && x < spikeRight;\n            const verticalCollision = y < spikeTop && y + ballSize > spikeBottom && vy <= 0;\n            if (horizontalCollision && verticalCollision) {\n              newX = 2;\n              newY = 0;\n              vx = 0;\n              vy = 0;\n              SETLEVEL(generateLevel(level));\n            }\n          }\n          if (platform.type === \"T\") {\n            const spikeLeft = platform.posStartX;\n            const spikeRight = platform.posEndX;\n            const spikeTop = platform.height + 3;\n            const spikeBottom = platform.height + 2;\n            const horizontalCollision = x + ballSize > spikeLeft && x < spikeRight;\n            const verticalCollision = y < spikeTop && y + ballSize > spikeBottom && vy <= 0;\n            if (horizontalCollision && verticalCollision) {\n              const newLevel = level + 1;\n              setLevel(newLevel);\n              SETLEVEL(generateLevel(newLevel)); // Aggiorna lo stato correttamente\n              newX = 2;\n              newY = 0;\n              vx = 0;\n              vy = 0;\n            }\n          }\n        });\n        return {\n          x: newX,\n          y: newY,\n          vx,\n          vy\n        };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [level, ballSize, horizontalAcceleration, friction, maxHorizontalSpeed, jumpVelocity, gravity]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emu-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ball\",\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`,\n        width: `${ballSize}%`,\n        height: `${ballSize + 2}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), LEVEL.map((item, i) => {\n      if (item.type === \"T\") {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"t-platform\",\n          style: {\n            left: `${item.posStartX}%`,\n            width: `${item.posEndX - item.posStartX}%`,\n            bottom: `${item.height}%`,\n            height: \"2%\"\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this);\n      } else if (item.type === \"p\") {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"platform\",\n          style: {\n            left: `${item.posStartX}%`,\n            width: `${item.posEndX - item.posStartX}%`,\n            bottom: `${item.height}%`,\n            height: \"2%\"\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spike\",\n          style: {\n            left: `${item.posStartX}%`,\n            width: `${item.posEndX - item.posStartX}%`,\n            bottom: `${item.height}%`,\n            height: \"2%\"\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this);\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n}\n_s(EmuSchermo, \"W9HxADwyY9lDZR10Sc6DM7DCH8k=\");\n_c = EmuSchermo;\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","BUTTONS","A","B","START","SELECT","LEFT","RIGHT","createSeededRandom","seed","a","c","m","state","generateLevel","rand","platforms","maxX","N","minWidth","maxWidth","minVertical","maxVertical","maxHorizontalOffset","width0","Math","floor","posStart0","posEnd0","center0","baseHeight","push","type","height","posStartX","posEndX","prevCenter","prevHeight","i","heightIncrement","newHeight","width","offset","newCenter","EmuSchermo","pressedButtons","_s","ballSize","horizontalAcceleration","maxHorizontalSpeed","friction","jumpVelocity","gravity","level","setLevel","LEVEL","SETLEVEL","platformsRef","current","ball","setBall","x","y","vx","vy","pressedButtonsRef","animationFrameId","update","prev","currentPressedButtons","max","min","isOnGroundOrPlatform","some","p","platformTop","horizontalOverlap","newY","newX","collided","forEach","platform","platformBottom","verticalOverlap","prevBottom","spikeLeft","spikeRight","spikeTop","spikeBottom","horizontalCollision","verticalCollision","newLevel","requestAnimationFrame","cancelAnimationFrame","className","children","style","left","bottom","fileName","_jsxFileName","lineNumber","columnNumber","map","item","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\n\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  LEFT: 7,\n  RIGHT: 8,\n};       \n\nfunction createSeededRandom(seed) {\n  const a = 1664525;\n  const c = 1013904222;\n  const m = 2**32;\n  let state = seed;\n  return function() {\n    state = (a * state + c) % m;\n    return state / m;\n  };\n}\n\nfunction generateLevel(seed) {\n  const rand = createSeededRandom(seed);\n  const platforms = [];\n  const maxX = 100;\n\n  // Parametri per la generazione controllata\n  const N = 10; // numero di piattaforme\n  const minWidth = 5;\n  const maxWidth = 30;\n  const minVertical = 5;  // incremento minimo in altezza\n  const maxVertical = 13; // incremento massimo in altezza\n  const maxHorizontalOffset = 15; // offset massimo in orizzontale dal centro della piattaforma precedente\n\n  // Genera la prima piattaforma in maniera totalmente casuale\n  const width0 = Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth;\n  const posStart0 = Math.floor(rand() * (maxX - width0));\n  const posEnd0 = posStart0 + width0;\n  const center0 = posStart0 + width0 / 2;\n  // Per comodità consideriamo la prima piattaforma come base, a un'altezza fissata (ad es. 20)\n  const baseHeight = 20;\n  platforms.push({\n    type: 'p',\n    height: baseHeight,\n    posStartX: posStart0,\n    posEndX: posEnd0,\n  });\n\n  let prevCenter = center0;\n  let prevHeight = baseHeight;\n\n  // Genera le piattaforme successive, assicurandone la raggiungibilità\n  for (let i = 1; i < N; i++) {\n    // Calcola incremento verticale in modo controllato\n    const heightIncrement = Math.floor(rand() * (maxVertical - minVertical + 1)) + minVertical;\n    const newHeight = prevHeight + heightIncrement;\n\n    // Calcola larghezza della piattaforma\n    const width = Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth;\n\n    // Calcola un nuovo centro limitando lo spostamento orizzontale\n    const offset = (rand() * 2 - 1) * maxHorizontalOffset;\n    let newCenter = prevCenter + offset;\n    // Assicura che il centro non esca dai bordi\n    if (newCenter < width / 2) newCenter = width / 2;\n    if (newCenter > maxX - width / 2) newCenter = maxX - width / 2;\n    const posStartX = Math.floor(newCenter - width / 2);\n    const posEndX = posStartX + width;\n\n    // Se è l'ultima piattaforma, designala come piattaforma \"T\"\n    const type = (i === N - 1) ? \"T\" : (rand() < 0.3 ? \"s\" : \"p\");\n\n    platforms.push({\n      type,\n      height: newHeight,\n      posStartX,\n      posEndX,\n    });\n\n    // Aggiorna i riferimenti per il prossimo ciclo\n    prevCenter = newCenter;\n    prevHeight = newHeight;\n  }\n\n  return platforms;\n}\n\nfunction EmuSchermo({ pressedButtons }) {\n  const ballSize = 4;\n  const horizontalAcceleration = 0.1;\n  const maxHorizontalSpeed = 1;\n  const friction = 0.2;\n  const jumpVelocity = 6;\n  const gravity = -0.5;\n  const [level, setLevel] = useState(1);\n  const [LEVEL, SETLEVEL] = useState(generateLevel(1));\n  const platformsRef = useRef(LEVEL);\n\n  useEffect(() => {\n    platformsRef.current = LEVEL;\n  }, [LEVEL]);\n\n  const [ball, setBall] = useState({\n    x: 2,\n    y: 0,\n    vx: 0,\n    vy: 0,\n  });\n\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  const animationFrameId = useRef(null);\n\n  useEffect(() => {\n    const update = () => {\n      setBall((prev) => {\n        let { x, y, vx, vy } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione input orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) vx -= horizontalAcceleration;\n        if (currentPressedButtons[BUTTONS.RIGHT]) vx += horizontalAcceleration;\n\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          vx = vx > 0 ? Math.max(vx - friction, 0) : Math.min(vx + friction, 0);\n        }\n\n        vx = Math.min(Math.max(vx, -maxHorizontalSpeed), maxHorizontalSpeed);\n\n        // Salto solo se a terra o su piattaforma\n        const isOnGroundOrPlatform =\n          prev.y === 0 ||\n          platformsRef.current.some(p => {\n            const platformTop = p.height + 2;\n            const horizontalOverlap = (\n              prev.x <= p.posEndX &&\n              (prev.x + ballSize) >= p.posStartX\n            );\n            return prev.y === platformTop && horizontalOverlap;\n          });\n\n        if (currentPressedButtons[BUTTONS.A] && isOnGroundOrPlatform) {\n          vy = jumpVelocity;\n        }\n\n        vy += gravity;\n        let newY = y + vy;\n        let newX = x + vx;\n\n        // Collisioni con piattaforme\n        let collided = false;\n\n        platformsRef.current.forEach(platform => {\n          const platformTop = platform.height + 2; // Top della piattaforma (2% di spessore)\n          const platformBottom = platform.height;   // Base della piattaforma\n\n          // 1. Controllo overlap orizzontale\n          const horizontalOverlap = (\n            newX < platform.posEndX &&\n            (newX + ballSize) > platform.posStartX\n          );\n\n          // 2. Controllo overlap verticale\n          const verticalOverlap = (\n            newY <= platformTop &&\n            (newY + ballSize) >= platformBottom\n          );\n\n          // 3. Determinazione direzione collisione\n          if (horizontalOverlap && verticalOverlap) {\n            const prevBottom = prev.y + ballSize;\n            if (prevBottom <= platformBottom && vy > 0) {\n              // Collisione dal basso (salto contro piattaforma)\n              newY = platformBottom - ballSize;\n              vy = 0;\n            } else if (vy <= 0) {\n              // Collisione dall'alto (atterraggio su piattaforma)\n              newY = platformTop;\n              vy = 0;\n            }\n            collided = true;\n          }\n        });\n\n        // Collisione con il terreno solo se non abbiamo colliso con piattaforme\n        if (!collided && newY < 0) {\n          newY = 0;\n          vy = 0;\n        }\n\n        // Clamping orizzontale\n        newX = Math.max(0, Math.min(newX, 100 - ballSize));\n\n        platformsRef.current.forEach(platform => {\n          if (platform.type === \"s\") {\n            const spikeLeft = platform.posStartX;\n            const spikeRight = platform.posEndX;\n            const spikeTop = platform.height + 3;\n            const spikeBottom = platform.height;\n\n            const horizontalCollision = (\n              x + ballSize > spikeLeft &&\n              x < spikeRight\n            );\n\n            const verticalCollision = (\n              y  < spikeTop &&\n              y + ballSize  > spikeBottom &&\n              vy <= 0\n            );\n\n            if (horizontalCollision && verticalCollision) {\n              newX = 2;\n              newY = 0;\n              vx = 0;\n              vy = 0;\n              SETLEVEL(generateLevel(level));\n            }\n          }\n          if (platform.type === \"T\") {\n            const spikeLeft = platform.posStartX;\n            const spikeRight = platform.posEndX;\n            const spikeTop = platform.height + 3;\n            const spikeBottom = platform.height +2 ;\n\n            const horizontalCollision = (\n              x + ballSize > spikeLeft &&\n              x < spikeRight\n            );\n\n            const verticalCollision = (\n              y < spikeTop &&\n              y + ballSize > spikeBottom &&\n              vy <= 0\n            );\n\n            if (horizontalCollision && verticalCollision) {\n              const newLevel = level + 1;\n              setLevel(newLevel);\n              SETLEVEL(generateLevel(newLevel)); // Aggiorna lo stato correttamente\n              newX = 2;\n              newY = 0;\n              vx = 0;\n              vy = 0;\n            }\n          }\n        });\n        return { x: newX, y: newY, vx, vy };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [level, ballSize, horizontalAcceleration, friction, maxHorizontalSpeed, jumpVelocity, gravity]);\n\n  return (\n    <div className=\"emu-container\">\n      <div\n        className=\"ball\"\n        style={{\n          left: `${ball.x}%`,\n          bottom: `${ball.y}%`,\n          width: `${ballSize}%`,\n          height: `${ballSize + 2}%`,\n        }}\n      ></div>\n\n      {LEVEL.map((item, i) => {\n        if (item.type === \"T\") {\n          return (\n            <div\n              key={i}\n              className=\"t-platform\"\n              style={{\n                left: `${item.posStartX}%`,\n                width: `${item.posEndX - item.posStartX}%`,\n                bottom: `${item.height}%`,\n                height: \"2%\",\n              }}\n            />\n          );\n        } else if (item.type === \"p\") {\n          return (\n            <div\n              key={i}\n              className=\"platform\"\n              style={{\n                left: `${item.posStartX}%`,\n                width: `${item.posEndX - item.posStartX}%`,\n                bottom: `${item.height}%`,\n                height: \"2%\",\n              }}\n            />\n          );\n        } else {\n          return (\n            <div\n              key={i}\n              className=\"spike\"\n              style={{\n                left: `${item.posStartX}%`,\n                width: `${item.posEndX - item.posStartX}%`,\n                bottom: `${item.height}%`,\n                height: \"2%\",\n              }}\n            />\n          );\n        }\n      })}\n    </div>\n  );\n}\n\nexport default EmuSchermo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}