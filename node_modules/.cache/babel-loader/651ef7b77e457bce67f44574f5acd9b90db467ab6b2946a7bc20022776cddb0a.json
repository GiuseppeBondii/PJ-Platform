{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$();\n// EmuSchermo.jsx\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\n// Sposta le costanti fuori dal componente\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PHYSICS_CONSTANTS = {\n  GRAVITY: 0.5,\n  JUMP_FORCE: -12,\n  MOVE_SPEED: 5,\n  BALL_SIZE: 30\n};\nconst EmuSchermo = ({\n  inputQueue\n}) => {\n  _s();\n  const screenRef = useRef(null);\n  const [position, setPosition] = useState({\n    x: 50,\n    y: 50\n  });\n  const [velocity, setVelocity] = useState({\n    dx: 0,\n    dy: 0\n  });\n  const [isGrounded, setIsGrounded] = useState(false);\n  const [screenSize, setScreenSize] = useState({\n    width: 0,\n    height: 0\n  });\n\n  // Aggiorna dimensione schermo\n  const updateSize = useCallback(() => {\n    if (screenRef.current) {\n      setScreenSize({\n        width: screenRef.current.offsetWidth,\n        height: screenRef.current.offsetHeight\n      });\n    }\n  }, []);\n  useEffect(() => {\n    window.addEventListener('resize', updateSize);\n    return () => window.removeEventListener('resize', updateSize);\n  }, [updateSize]);\n\n  // Gestione input\n  const handleInput = useCallback(() => {\n    setVelocity(prev => {\n      const {\n        MOVE_SPEED,\n        JUMP_FORCE,\n        GRAVITY\n      } = PHYSICS_CONSTANTS;\n      let newDx = prev.dx;\n      let newDy = prev.dy;\n      if (inputQueue.includes('LEFT')) newDx = -MOVE_SPEED;else if (inputQueue.includes('RIGHT')) newDx = MOVE_SPEED;else newDx = 0;\n      if (inputQueue.includes('UP') && isGrounded) {\n        newDy = JUMP_FORCE;\n        setIsGrounded(false);\n      }\n      return {\n        dx: newDx,\n        dy: newDy + (!isGrounded ? GRAVITY : 0)\n      };\n    });\n  }, [inputQueue, isGrounded]);\n  useEffect(() => {\n    handleInput();\n  }, [handleInput]);\n\n  // Game loop\n  useEffect(() => {\n    const {\n      BALL_SIZE,\n      GRAVITY\n    } = PHYSICS_CONSTANTS;\n    const animationId = {\n      current: null\n    };\n    const gameLoop = () => {\n      setPosition(prev => {\n        let newX = prev.x + velocity.dx;\n        let newY = prev.y + velocity.dy;\n        if (newX < 0) newX = 0;\n        if (newX > screenSize.width - BALL_SIZE) {\n          newX = screenSize.width - BALL_SIZE;\n        }\n        if (newY > screenSize.height - BALL_SIZE) {\n          newY = screenSize.height - BALL_SIZE;\n          setIsGrounded(true);\n          setVelocity(v => ({\n            ...v,\n            dy: 0\n          }));\n        } else {\n          setIsGrounded(false);\n        }\n        return {\n          x: newX,\n          y: newY\n        };\n      });\n      animationId.current = requestAnimationFrame(gameLoop);\n    };\n    animationId.current = requestAnimationFrame(gameLoop);\n    return () => cancelAnimationFrame(animationId.current);\n  }, [velocity, screenSize, PHYSICS_CONSTANTS.BALL_SIZE]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"windowEmu\",\n    ref: screenRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ball\",\n      style: {\n        left: position.x,\n        top: position.y,\n        width: PHYSICS_CONSTANTS.BALL_SIZE,\n        height: PHYSICS_CONSTANTS.BALL_SIZE,\n        borderRadius: '50%',\n        backgroundColor: 'red',\n        position: 'absolute',\n        transition: 'left 0.1s linear, top 0.1s ease-out'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(EmuSchermo, \"KNXWYtJjQv6PaF9DIAnDiWKBRw8=\");\n_c = EmuSchermo;\nEmuSchermo.propTypes = {\n  inputQueue: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","PropTypes","jsxDEV","_jsxDEV","PHYSICS_CONSTANTS","GRAVITY","JUMP_FORCE","MOVE_SPEED","BALL_SIZE","EmuSchermo","inputQueue","_s","screenRef","position","setPosition","x","y","velocity","setVelocity","dx","dy","isGrounded","setIsGrounded","screenSize","setScreenSize","width","height","updateSize","current","offsetWidth","offsetHeight","window","addEventListener","removeEventListener","handleInput","prev","newDx","newDy","includes","animationId","gameLoop","newX","newY","v","requestAnimationFrame","cancelAnimationFrame","className","ref","children","style","left","top","borderRadius","backgroundColor","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","arrayOf","string","isRequired","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["// EmuSchermo.jsx\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\n// Sposta le costanti fuori dal componente\nconst PHYSICS_CONSTANTS = {\n  GRAVITY: 0.5,\n  JUMP_FORCE: -12,\n  MOVE_SPEED: 5,\n  BALL_SIZE: 30\n};\n\nconst EmuSchermo = ({ inputQueue }) => {\n  const screenRef = useRef(null);\n  const [position, setPosition] = useState({ x: 50, y: 50 });\n  const [velocity, setVelocity] = useState({ dx: 0, dy: 0 });\n  const [isGrounded, setIsGrounded] = useState(false);\n  const [screenSize, setScreenSize] = useState({ width: 0, height: 0 });\n\n  // Aggiorna dimensione schermo\n  const updateSize = useCallback(() => {\n    if(screenRef.current) {\n      setScreenSize({\n        width: screenRef.current.offsetWidth,\n        height: screenRef.current.offsetHeight\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('resize', updateSize);\n    return () => window.removeEventListener('resize', updateSize);\n  }, [updateSize]);\n\n  // Gestione input\n  const handleInput = useCallback(() => {\n    setVelocity(prev => {\n      const { MOVE_SPEED, JUMP_FORCE, GRAVITY } = PHYSICS_CONSTANTS;\n      let newDx = prev.dx;\n      let newDy = prev.dy;\n      \n      if(inputQueue.includes('LEFT')) newDx = -MOVE_SPEED;\n      else if(inputQueue.includes('RIGHT')) newDx = MOVE_SPEED;\n      else newDx = 0;\n\n      if(inputQueue.includes('UP') && isGrounded) {\n        newDy = JUMP_FORCE;\n        setIsGrounded(false);\n      }\n\n      return { \n        dx: newDx, \n        dy: newDy + (!isGrounded ? GRAVITY : 0) \n      };\n    });\n  }, [inputQueue, isGrounded]);\n\n  useEffect(() => {\n    handleInput();\n  }, [handleInput]);\n\n  // Game loop\n  useEffect(() => {\n    const { BALL_SIZE, GRAVITY } = PHYSICS_CONSTANTS;\n    const animationId = { current: null };\n\n    const gameLoop = () => {\n      setPosition(prev => {\n        let newX = prev.x + velocity.dx;\n        let newY = prev.y + velocity.dy;\n\n        if(newX < 0) newX = 0;\n        if(newX > screenSize.width - BALL_SIZE) {\n          newX = screenSize.width - BALL_SIZE;\n        }\n        \n        if(newY > screenSize.height - BALL_SIZE) {\n          newY = screenSize.height - BALL_SIZE;\n          setIsGrounded(true);\n          setVelocity(v => ({ ...v, dy: 0 }));\n        } else {\n          setIsGrounded(false);\n        }\n\n        return { x: newX, y: newY };\n      });\n\n      animationId.current = requestAnimationFrame(gameLoop);\n    };\n\n    animationId.current = requestAnimationFrame(gameLoop);\n    return () => cancelAnimationFrame(animationId.current);\n  }, [velocity, screenSize, PHYSICS_CONSTANTS.BALL_SIZE]);\n\n  return (\n    <div className=\"windowEmu\" ref={screenRef}>\n      <div \n        className=\"ball\" \n        style={{\n          left: position.x,\n          top: position.y,\n          width: PHYSICS_CONSTANTS.BALL_SIZE,\n          height: PHYSICS_CONSTANTS.BALL_SIZE,\n          borderRadius: '50%',\n          backgroundColor: 'red',\n          position: 'absolute',\n          transition: 'left 0.1s linear, top 0.1s ease-out'\n        }}\n      />\n    </div>\n  );\n};\n\nEmuSchermo.propTypes = {\n  inputQueue: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default EmuSchermo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}