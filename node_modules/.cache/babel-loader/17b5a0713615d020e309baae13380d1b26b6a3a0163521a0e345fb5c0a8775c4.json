{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8\n};\nfunction EmuSchermo({\n  pressedButtons\n}) {\n  _s();\n  // Costanti di fisica espresse in percentuali\n  const ballSize = 5; // dimensione della pallina (in % del container)\n  const horizontalAcceleration = 0.2; // accelerazione orizzontale per frame\n  const maxHorizontalSpeed = 2; // velocità massima orizzontale (% per frame)\n  const friction = 0.1; // attrito orizzontale quando non c'è input\n  const jumpVelocity = 7; // velocità iniziale del salto (% per frame)\n  const gravity = -0.5; // accelerazione di gravità (% per frame)\n\n  // Stato della pallina: x e y sono posizioni in percentuale,\n  // vx e vy sono le velocità orizzontale e verticale rispettivamente.\n  const [ball, setBall] = useState({\n    x: 50 - ballSize / 2,\n    // centrata orizzontalmente\n    y: 0,\n    // sul \"terreno\"\n    vx: 0,\n    vy: 0\n  });\n\n  // Usiamo un ref per tenere traccia dell'ultimo valore di pressedButtons\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Ciclo di animazione continuo con requestAnimationFrame\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      setBall(prev => {\n        let {\n          x,\n          y,\n          vx,\n          vy\n        } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione dell'accelerazione orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) {\n          vx -= horizontalAcceleration;\n        }\n        if (currentPressedButtons[BUTTONS.RIGHT]) {\n          vx += horizontalAcceleration;\n        }\n\n        // Se non ci sono input orizzontali, applica attrito\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          // Applica attrito per rallentare gradualmente\n          if (vx > 0) {\n            vx = Math.max(vx - friction, 0);\n          } else if (vx < 0) {\n            vx = Math.min(vx + friction, 0);\n          }\n        }\n\n        // Limita la velocità orizzontale\n        if (vx > maxHorizontalSpeed) vx = maxHorizontalSpeed;\n        if (vx < -maxHorizontalSpeed) vx = -maxHorizontalSpeed;\n\n        // Gestione per il pulsante A (salto)\n        if (currentPressedButtons[BUTTONS.A] && y === 0) {\n          vy = jumpVelocity;\n        }\n\n        // Applica la gravità alla velocità verticale\n        vy += gravity;\n\n        // Aggiorna le posizioni\n        x += vx;\n        y += vy;\n\n        // Clamping della posizione orizzontale nel container\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 100 - ballSize) {\n          x = 100 - ballSize;\n          vx = 0;\n        }\n\n        // Gestione del \"terreno\": la pallina non può andare sotto y=0\n        if (y < 0) {\n          y = 0;\n          vy = 0;\n        }\n\n        // Gestione dei pulsanti START e SELECT\n        if (currentPressedButtons[BUTTONS.START]) {\n          // Resetta la posizione della pallina al centro\n          x = 50 - ballSize / 2;\n          y = 0;\n          vx = 0;\n          vy = 0;\n        }\n        if (currentPressedButtons[BUTTONS.SELECT]) {\n          // Cambia il colore della pallina o applica un effetto speciale\n          // Questo richiederebbe un nuovo stato per il colore/effetto\n        }\n\n        // Supporto per la pressione simultanea di pulsanti (es. diagonali)\n        // Già gestito naturalmente dal modo in cui applichiamo le forze\n\n        // Supporto per la pressione DOWN (abbassarsi o accelerare la caduta)\n        if (currentPressedButtons[BUTTONS.DOWN] && y > 0) {\n          vy -= 0.5; // Accelera la caduta\n        }\n        return {\n          x,\n          y,\n          vx,\n          vy\n        };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emu-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ball\",\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(EmuSchermo, \"Fncdqmaw6Xrp0EAMFQSacrt2LDE=\");\n_c = EmuSchermo;\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","BUTTONS","A","B","START","SELECT","UP","DOWN","LEFT","RIGHT","EmuSchermo","pressedButtons","_s","ballSize","horizontalAcceleration","maxHorizontalSpeed","friction","jumpVelocity","gravity","ball","setBall","x","y","vx","vy","pressedButtonsRef","current","animationFrameId","update","prev","currentPressedButtons","Math","max","min","requestAnimationFrame","cancelAnimationFrame","className","children","style","left","bottom","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\n\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8,\n};\n\nfunction EmuSchermo({ pressedButtons }) {\n  // Costanti di fisica espresse in percentuali\n  const ballSize = 5;               // dimensione della pallina (in % del container)\n  const horizontalAcceleration = 0.2; // accelerazione orizzontale per frame\n  const maxHorizontalSpeed = 2;     // velocità massima orizzontale (% per frame)\n  const friction = 0.1;             // attrito orizzontale quando non c'è input\n  const jumpVelocity = 7;          // velocità iniziale del salto (% per frame)\n  const gravity = -0.5;             // accelerazione di gravità (% per frame)\n\n  // Stato della pallina: x e y sono posizioni in percentuale,\n  // vx e vy sono le velocità orizzontale e verticale rispettivamente.\n  const [ball, setBall] = useState({\n    x: 50 - ballSize / 2, // centrata orizzontalmente\n    y: 0,                 // sul \"terreno\"\n    vx: 0,\n    vy: 0,\n  });\n\n  // Usiamo un ref per tenere traccia dell'ultimo valore di pressedButtons\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Ciclo di animazione continuo con requestAnimationFrame\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      setBall(prev => {\n        let { x, y, vx, vy } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione dell'accelerazione orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) {\n          vx -= horizontalAcceleration;\n        } \n        if (currentPressedButtons[BUTTONS.RIGHT]) {\n          vx += horizontalAcceleration;\n        } \n        \n        // Se non ci sono input orizzontali, applica attrito\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          // Applica attrito per rallentare gradualmente\n          if (vx > 0) {\n            vx = Math.max(vx - friction, 0);\n          } else if (vx < 0) {\n            vx = Math.min(vx + friction, 0);\n          }\n        }\n\n        // Limita la velocità orizzontale\n        if (vx > maxHorizontalSpeed) vx = maxHorizontalSpeed;\n        if (vx < -maxHorizontalSpeed) vx = -maxHorizontalSpeed;\n\n\n        // Gestione per il pulsante A (salto)\n        if (currentPressedButtons[BUTTONS.A] && y === 0) {\n          vy = jumpVelocity; \n        }\n\n        // Applica la gravità alla velocità verticale\n        vy += gravity;\n\n        // Aggiorna le posizioni\n        x += vx;\n        y += vy;\n\n        // Clamping della posizione orizzontale nel container\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 100 - ballSize) {\n          x = 100 - ballSize;\n          vx = 0;\n        }\n\n        // Gestione del \"terreno\": la pallina non può andare sotto y=0\n        if (y < 0) {\n          y = 0;\n          vy = 0;\n        }\n\n        // Gestione dei pulsanti START e SELECT\n        if (currentPressedButtons[BUTTONS.START]) {\n          // Resetta la posizione della pallina al centro\n          x = 50 - ballSize / 2;\n          y = 0;\n          vx = 0;\n          vy = 0;\n        }\n\n        if (currentPressedButtons[BUTTONS.SELECT]) {\n          // Cambia il colore della pallina o applica un effetto speciale\n          // Questo richiederebbe un nuovo stato per il colore/effetto\n        }\n\n        // Supporto per la pressione simultanea di pulsanti (es. diagonali)\n        // Già gestito naturalmente dal modo in cui applichiamo le forze\n\n        // Supporto per la pressione DOWN (abbassarsi o accelerare la caduta)\n        if (currentPressedButtons[BUTTONS.DOWN] && y > 0) {\n          vy -= 0.5; // Accelera la caduta\n        }\n\n        return { x, y, vx, vy };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, []);\n\n  return (\n    <div className=\"emu-container\">\n      <div\n        className=\"ball\"\n        style={{\n          left: `${ball.x}%`,\n          bottom: `${ball.y}%`,\n        }}\n      ></div>\n    </div>\n  );\n}\n\nexport default EmuSchermo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}