{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ballSize = 4;\nconst horizontalAcceleration = 0.2;\nconst maxHorizontalSpeed = 1.2;\nconst friction = 0.1;\nconst jumpVelocity = 6;\nconst gravity = -0.5;\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  LEFT: 7,\n  RIGHT: 8\n};\n\n// Parametri per la generazione\nconst screenHeight = 80; // Altezza massima dello schermo\nconst maxX = 100; // Larghezza massima orizzontale\nconst minWidth = 10;\nconst maxWidth = 30;\nconst minVertical = 5;\nconst maxVertical = 20;\nconst marginSafety = 1; // Margine di sicurezza orizzontale per il salto\n\n// Parametri per la generazione pseudo-casuale\nconst a = Math.floor(Math.random() * 10000000000);\nconst c = Math.floor(Math.random() * 10000000000);\nfunction createSeededRandom(seed) {\n  const m = 2 ** 32;\n  let state = seed;\n  return function () {\n    state = (a * state + c) % m;\n    return state / m;\n  };\n}\n\n// Funzione che calcola il tempo di volo disponibile per un salto data la differenza verticale dy\nfunction getFlightTime(dy) {\n  // Se il target è sopra (dy > 0) il tempo di volo è minore\n  if (dy > 0) {\n    // Risolve: 0.5*gravity*t^2 + jumpVelocity*t - dy = 0\n    // Poiché gravity è negativo, usiamo la formula corretta per ottenere il tempo positivo\n    return (jumpVelocity + Math.sqrt(jumpVelocity * jumpVelocity + -2 * gravity * dy)) / -gravity;\n  } else {\n    // Se il target è allo stesso livello o più in basso, consideriamo il tempo d'aria massimo (salto completo)\n    return 2 * jumpVelocity / -gravity;\n  }\n}\n\n// Calcola la distanza orizzontale massima raggiungibile per una data differenza verticale dy\nfunction getMaxHorizontalDistance(dy) {\n  const t = getFlightTime(dy);\n  return maxHorizontalSpeed * t;\n}\nfunction generateLevel(seed) {\n  const rand = createSeededRandom(seed);\n  const platforms = [];\n\n  // Genera la piattaforma di partenza (base)\n  const baseHeight = 15;\n  const firstWidth = Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth;\n  const firstPosStartX = Math.floor(rand() * (maxX - firstWidth));\n  const firstPosEndX = firstPosStartX + firstWidth;\n  platforms.push({\n    type: 'p',\n    // piattaforma hazard: se ci salti sopra, il livello si riavvia\n    height: baseHeight,\n    posStartX: firstPosStartX,\n    posEndX: firstPosEndX\n  });\n  let prev = platforms[0];\n\n  // Genera piattaforme intermedie fino a rimanere entro screenHeight\n  // L'ultima piattaforma verrà forzata ad essere il traguardo (T)\n  while (true) {\n    // Scegli un incremento verticale che non superi l'altezza massima dello schermo\n    const verticalIncrement = Math.floor(rand() * (maxVertical - minVertical + 1)) + minVertical;\n    const newHeight = prev.height + verticalIncrement;\n    if (newHeight > screenHeight - 10) {\n      // Se il prossimo salto supererebbe quasi lo screenHeight, usciamo dal ciclo.\n      break;\n    }\n\n    // Calcola la distanza massima orizzontale raggiungibile per questo salto\n    const maxReach = getMaxHorizontalDistance(verticalIncrement) - marginSafety;\n\n    // Per sicurezza, limitiamo il gap tra le piattaforme a un valore ragionevole (almeno 2 e al massimo quanto raggiungibile o un valore fisso)\n    const gap = Math.floor(Math.min(rand() * (maxReach - 2) + 2, 13 // oppure si può usare 13 se si preferisce una soglia fissa\n    ));\n\n    // Scegli casualmente la direzione: 1 = a destra, -1 = a sinistra\n    let direction = rand() < 0.5 ? 1 : -1;\n    let posStartX;\n    if (direction === 1) {\n      // Prova a posizionare a destra della precedente piattaforma\n      if (prev.posEndX + gap + minWidth <= maxX) {\n        posStartX = prev.posEndX + gap;\n      } else if (prev.posStartX - gap - minWidth >= 0) {\n        // Se non c'è spazio a destra, prova a sinistra\n        direction = -1;\n        posStartX = prev.posStartX - gap - minWidth;\n      } else {\n        // Forza il posizionamento in caso di spazio ristretto\n        posStartX = Math.max(0, maxX - minWidth);\n      }\n    } else {\n      // Prova a posizionare a sinistra della precedente\n      if (prev.posStartX - gap - minWidth >= 0) {\n        posStartX = prev.posStartX - gap - minWidth;\n      } else if (prev.posEndX + gap + minWidth <= maxX) {\n        // Se non c'è spazio a sinistra, prova a destra\n        direction = 1;\n        posStartX = prev.posEndX + gap;\n      } else {\n        posStartX = 0;\n      }\n    }\n\n    // La larghezza della piattaforma la scegliamo casualmente entro i limiti, senza superare il bordo\n    const width = Math.min(Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth, maxX - posStartX);\n    const posEndX = posStartX + width;\n\n    // Determina il tipo: di default è \"p\" (hazard), ma c'è una possibilità del 20% di aggiungere spike (tipo \"s\")\n    let type = \"p\";\n    if (rand() < 0.3) {\n      type = \"s\";\n    }\n    const platform = {\n      type,\n      height: newHeight,\n      posStartX,\n      posEndX\n    };\n    platforms.push(platform);\n    prev = platform;\n  }\n\n  // Aggiungi la piattaforma finale \"T\" (traguardo) in una posizione raggiungibile dall'ultima piattaforma\n  // Per farlo, scegliamo un incremento verticale che faccia rimanere il traguardo entro lo screenHeight\n  const remainingVertical = screenHeight - prev.height;\n  // Se remainingVertical è troppo piccolo, possiamo impostare un piccolo incremento\n  const finalVerticalIncrement = remainingVertical > minVertical ? Math.floor(rand() * (Math.min(maxVertical, remainingVertical) - minVertical + 1)) + minVertical : remainingVertical;\n  const newHeight = prev.height + finalVerticalIncrement;\n  const maxReach = getMaxHorizontalDistance(finalVerticalIncrement) - marginSafety;\n  const gap = Math.floor(Math.min(rand() * (maxReach - 2) + 2, 13));\n  let direction = rand() < 0.5 ? 1 : -1;\n  let posStartX;\n  if (direction === 1) {\n    if (prev.posEndX + gap + minWidth <= maxX) {\n      posStartX = prev.posEndX + gap;\n    } else if (prev.posStartX - gap - minWidth >= 0) {\n      direction = -1;\n      posStartX = prev.posStartX - gap - minWidth;\n    } else {\n      posStartX = Math.max(0, maxX - minWidth);\n    }\n  } else {\n    if (prev.posStartX - gap - minWidth >= 0) {\n      posStartX = prev.posStartX - gap - minWidth;\n    } else if (prev.posEndX + gap + minWidth <= maxX) {\n      direction = 1;\n      posStartX = prev.posEndX + gap;\n    } else {\n      posStartX = 0;\n    }\n  }\n  const width = Math.min(Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth, maxX - posStartX);\n  const posEndX = posStartX + width;\n\n  // La piattaforma finale è il traguardo \"T\"\n  platforms.push({\n    type: \"T\",\n    height: newHeight,\n    posStartX,\n    posEndX\n  });\n  return platforms;\n}\nfunction EmuSchermo({\n  pressedButtons\n}) {\n  _s();\n  const ballSize = 4;\n  const horizontalAcceleration = 0.2;\n  const maxHorizontalSpeed = 1.2;\n  const friction = 0.1;\n  const jumpVelocity = 6;\n  const gravity = -0.5;\n\n  // Stato di gioco: \"countdown\", \"playing\", \"gameOver\"\n  const [gameState, setGameState] = useState(\"countdown\");\n  const [countdown, setCountdown] = useState(3);\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [level, setLevel] = useState(1);\n  const [LEVEL, SETLEVEL] = useState(generateLevel(1));\n  const platformsRef = useRef(LEVEL);\n  useEffect(() => {\n    platformsRef.current = LEVEL;\n  }, [LEVEL]);\n  const [ball, setBall] = useState({\n    x: 2,\n    y: 0,\n    vx: 0,\n    vy: 0\n  });\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n  const animationFrameId = useRef(null);\n  function renderImpact(x, y) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hud\",\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`,\n        height: `${ballSize + 2}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Countdown iniziale di 3 secondi\n  useEffect(() => {\n    if (gameState === \"countdown\") {\n      const countdownInterval = setInterval(() => {\n        setCountdown(prev => {\n          if (prev <= 1) {\n            clearInterval(countdownInterval);\n            setGameState(\"playing\");\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => clearInterval(countdownInterval);\n    }\n  }, [gameState]);\n\n  // Timer di gioco: decrementa ogni secondo durante il gioco\n  useEffect(() => {\n    if (gameState === \"playing\") {\n      const timerInterval = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            clearInterval(timerInterval);\n            setGameState(\"gameOver\");\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    }\n  }, [gameState]);\n\n  // Loop di aggiornamento del gioco (solo se in stato \"playing\")\n  useEffect(() => {\n    if (gameState !== \"playing\") return;\n    const update = () => {\n      setBall(prev => {\n        let {\n          x,\n          y,\n          vx,\n          vy\n        } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione input orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) vx -= horizontalAcceleration;\n        if (currentPressedButtons[BUTTONS.RIGHT]) vx += horizontalAcceleration;\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          vx = vx > 0 ? Math.max(vx - friction, 0) : Math.min(vx + friction, 0);\n        }\n        vx = Math.min(Math.max(vx, -maxHorizontalSpeed), maxHorizontalSpeed);\n\n        // Controllo per permettere il salto (a terra o su piattaforma)\n        const isOnGroundOrPlatform = y === 0 || platformsRef.current.some(p => {\n          const platformTop = p.height + 2;\n          const horizontalOverlap = x <= p.posEndX && x + ballSize >= p.posStartX;\n          return y === platformTop && horizontalOverlap;\n        });\n        if (currentPressedButtons[BUTTONS.A] && isOnGroundOrPlatform) {\n          vy = jumpVelocity;\n        }\n        vy += gravity;\n        let newY = y + vy;\n        let newX = x + vx;\n\n        // Collisione base con piattaforme (aterraggio/scontro)\n        let collided = false;\n        platformsRef.current.forEach(platform => {\n          const platformTop = platform.height + 2;\n          const platformBottom = platform.height;\n          const horizontalOverlap = newX < platform.posEndX && newX + ballSize > platform.posStartX;\n          const verticalOverlap = newY <= platformTop && newY + ballSize >= platformBottom;\n          if (horizontalOverlap && verticalOverlap) {\n            const prevBottom = y + ballSize;\n            if (prevBottom <= platformBottom && vy > 0) {\n              // Salto contro la piattaforma\n              newY = platformBottom - ballSize;\n              vy = 0;\n            } else if (vy <= 0) {\n              // Atterraggio sulla piattaforma\n              newY = platformTop;\n              vy = 0;\n            }\n            collided = true;\n          }\n        });\n        if (!collided && newY < 0) {\n          newY = 0;\n          vy = 0;\n        }\n        newX = Math.max(0, Math.min(newX, 100 - ballSize));\n\n        // Gestione collisione con spike (\"s\") e traguardo (\"T\")\n        for (const platform of platformsRef.current) {\n          if (platform.type === \"s\") {\n            const spikeLeft = platform.posStartX;\n            const spikeRight = platform.posEndX;\n            const spikeBottom = platform.height;\n            const spikeTop = platform.height + 3;\n            const horizontalCollision = x + ballSize > spikeLeft && x < spikeRight;\n            const verticalCollision = y < spikeTop && y + ballSize > spikeBottom && vy <= 0;\n            if (horizontalCollision && verticalCollision) {\n              setTimeLeft(prev => prev - 10);\n              renderImpact();\n              platform.type = \"p\";\n              break;\n            }\n          } else if (platform.type === \"T\") {\n            const goalLeft = platform.posStartX;\n            const goalRight = platform.posEndX;\n            const goalBottom = platform.height;\n            const goalTop = platform.height + 3;\n            const horizontalCollision = x + ballSize > goalLeft && x < goalRight;\n            const verticalCollision = y < goalTop && y + ballSize > goalBottom && vy <= 0;\n            if (horizontalCollision && verticalCollision) {\n              // Aggiunge 15 secondi e passa al livello successivo\n              setTimeLeft(prev => prev + 5);\n              const newLevel = level + 1;\n              setLevel(newLevel);\n              SETLEVEL(generateLevel(newLevel));\n              newX = 2;\n              newY = 0;\n              vx = 0;\n              vy = 0;\n              break;\n            }\n          }\n        }\n        return {\n          x: newX,\n          y: newY,\n          vx,\n          vy\n        };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [gameState, level, ballSize, horizontalAcceleration, friction, maxHorizontalSpeed, jumpVelocity, gravity]);\n\n  // Funzione per ripartire la partita (Play Again)\n  const handlePlayAgain = () => {\n    setLevel(1);\n    SETLEVEL(generateLevel(1));\n    setBall({\n      x: 2,\n      y: 0,\n      vx: 0,\n      vy: 0\n    });\n    setTimeLeft(60);\n    setCountdown(3);\n    setGameState(\"countdown\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emu-container\",\n    children: [gameState === \"countdown\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"countdown-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: countdown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 9\n    }, this), gameState === \"gameOver\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameover-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Livello raggiunto: \", level]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePlayAgain,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 9\n    }, this), gameState === \"playing\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hud\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time: \", timeLeft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Level: \", level]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ball\",\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`,\n        width: `${ballSize}%`,\n        height: `${ballSize + 2}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), LEVEL.map((item, i) => {\n      if (item.type === \"T\") {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"t-platform\",\n          style: {\n            left: `${item.posStartX}%`,\n            width: `${item.posEndX - item.posStartX}%`,\n            bottom: `${item.height}%`,\n            height: \"2%\"\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this);\n      } else if (item.type === \"p\") {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"platform\",\n          style: {\n            left: `${item.posStartX}%`,\n            width: `${item.posEndX - item.posStartX}%`,\n            bottom: `${item.height}%`,\n            height: \"2%\"\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 13\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spike\",\n          style: {\n            left: `${item.posStartX}%`,\n            width: `${item.posEndX - item.posStartX}%`,\n            bottom: `${item.height}%`,\n            height: \"2%\"\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 13\n        }, this);\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 5\n  }, this);\n}\n_s(EmuSchermo, \"RRX6Ds3q0GhgM5zstTUGC+T93+Y=\");\n_c = EmuSchermo;\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ballSize","horizontalAcceleration","maxHorizontalSpeed","friction","jumpVelocity","gravity","BUTTONS","A","B","START","SELECT","LEFT","RIGHT","screenHeight","maxX","minWidth","maxWidth","minVertical","maxVertical","marginSafety","a","Math","floor","random","c","createSeededRandom","seed","m","state","getFlightTime","dy","sqrt","getMaxHorizontalDistance","t","generateLevel","rand","platforms","baseHeight","firstWidth","firstPosStartX","firstPosEndX","push","type","height","posStartX","posEndX","prev","verticalIncrement","newHeight","maxReach","gap","min","direction","max","width","platform","remainingVertical","finalVerticalIncrement","EmuSchermo","pressedButtons","_s","gameState","setGameState","countdown","setCountdown","timeLeft","setTimeLeft","level","setLevel","LEVEL","SETLEVEL","platformsRef","current","ball","setBall","x","y","vx","vy","pressedButtonsRef","animationFrameId","renderImpact","className","style","left","bottom","fileName","_jsxFileName","lineNumber","columnNumber","countdownInterval","setInterval","clearInterval","timerInterval","update","currentPressedButtons","isOnGroundOrPlatform","some","p","platformTop","horizontalOverlap","newY","newX","collided","forEach","platformBottom","verticalOverlap","prevBottom","spikeLeft","spikeRight","spikeBottom","spikeTop","horizontalCollision","verticalCollision","goalLeft","goalRight","goalBottom","goalTop","newLevel","requestAnimationFrame","cancelAnimationFrame","handlePlayAgain","children","onClick","map","item","i","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\n\nconst ballSize = 4;\nconst horizontalAcceleration = 0.2;\nconst maxHorizontalSpeed = 1.2;\nconst friction = 0.1;\nconst jumpVelocity = 6;\nconst gravity = -0.5;\n\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  LEFT: 7,\n  RIGHT: 8,\n};\n\n// Parametri per la generazione\nconst screenHeight = 80; // Altezza massima dello schermo\nconst maxX = 100;        // Larghezza massima orizzontale\nconst minWidth = 10;\nconst maxWidth = 30;\nconst minVertical = 5;\nconst maxVertical = 20;\nconst marginSafety = 1;  // Margine di sicurezza orizzontale per il salto\n\n// Parametri per la generazione pseudo-casuale\nconst a = Math.floor(Math.random() * 10000000000);\nconst c = Math.floor(Math.random() * 10000000000);\n\nfunction createSeededRandom(seed) {\n  const m = 2 ** 32;\n  let state = seed;\n  return function () {\n    state = (a * state + c) % m;\n    return state / m;\n  };\n}\n\n// Funzione che calcola il tempo di volo disponibile per un salto data la differenza verticale dy\nfunction getFlightTime(dy) {\n  // Se il target è sopra (dy > 0) il tempo di volo è minore\n  if (dy > 0) {\n    // Risolve: 0.5*gravity*t^2 + jumpVelocity*t - dy = 0\n    // Poiché gravity è negativo, usiamo la formula corretta per ottenere il tempo positivo\n    return (jumpVelocity + Math.sqrt(jumpVelocity * jumpVelocity + (-2 * gravity * dy))) / (-gravity);\n  } else {\n    // Se il target è allo stesso livello o più in basso, consideriamo il tempo d'aria massimo (salto completo)\n    return 2 * jumpVelocity / (-gravity);\n  }\n}\n\n// Calcola la distanza orizzontale massima raggiungibile per una data differenza verticale dy\nfunction getMaxHorizontalDistance(dy) {\n  const t = getFlightTime(dy);\n  return maxHorizontalSpeed * t;\n}\n\nfunction generateLevel(seed) {\n  const rand = createSeededRandom(seed);\n  const platforms = [];\n\n  // Genera la piattaforma di partenza (base)\n  const baseHeight = 15;\n  const firstWidth = Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth;\n  const firstPosStartX = Math.floor(rand() * (maxX - firstWidth));\n  const firstPosEndX = firstPosStartX + firstWidth;\n  platforms.push({\n    type: 'p', // piattaforma hazard: se ci salti sopra, il livello si riavvia\n    height: baseHeight,\n    posStartX: firstPosStartX,\n    posEndX: firstPosEndX\n  });\n\n  let prev = platforms[0];\n\n  // Genera piattaforme intermedie fino a rimanere entro screenHeight\n  // L'ultima piattaforma verrà forzata ad essere il traguardo (T)\n  while (true) {\n    // Scegli un incremento verticale che non superi l'altezza massima dello schermo\n    const verticalIncrement = Math.floor(rand() * (maxVertical - minVertical + 1)) + minVertical;\n    const newHeight = prev.height + verticalIncrement;\n    if (newHeight > screenHeight - 10) { \n      // Se il prossimo salto supererebbe quasi lo screenHeight, usciamo dal ciclo.\n      break;\n    }\n    \n    // Calcola la distanza massima orizzontale raggiungibile per questo salto\n    const maxReach = getMaxHorizontalDistance(verticalIncrement) - marginSafety;\n    \n    // Per sicurezza, limitiamo il gap tra le piattaforme a un valore ragionevole (almeno 2 e al massimo quanto raggiungibile o un valore fisso)\n    const gap = Math.floor(Math.min(\n      (rand() * (maxReach - 2) + 2),\n      13  // oppure si può usare 13 se si preferisce una soglia fissa\n    ));\n    \n    // Scegli casualmente la direzione: 1 = a destra, -1 = a sinistra\n    let direction = rand() < 0.5 ? 1 : -1;\n    let posStartX;\n    \n    if (direction === 1) {\n      // Prova a posizionare a destra della precedente piattaforma\n      if (prev.posEndX + gap + minWidth <= maxX) {\n        posStartX = prev.posEndX + gap;\n      } else if (prev.posStartX - gap - minWidth >= 0) {\n        // Se non c'è spazio a destra, prova a sinistra\n        direction = -1;\n        posStartX = prev.posStartX - gap - minWidth;\n      } else {\n        // Forza il posizionamento in caso di spazio ristretto\n        posStartX = Math.max(0, maxX - minWidth);\n      }\n    } else {\n      // Prova a posizionare a sinistra della precedente\n      if (prev.posStartX - gap - minWidth >= 0) {\n        posStartX = prev.posStartX - gap - minWidth;\n      } else if (prev.posEndX + gap + minWidth <= maxX) {\n        // Se non c'è spazio a sinistra, prova a destra\n        direction = 1;\n        posStartX = prev.posEndX + gap;\n      } else {\n        posStartX = 0;\n      }\n    }\n    \n    // La larghezza della piattaforma la scegliamo casualmente entro i limiti, senza superare il bordo\n    const width = Math.min(\n      Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth,\n      maxX - posStartX\n    );\n    const posEndX = posStartX + width;\n    \n    // Determina il tipo: di default è \"p\" (hazard), ma c'è una possibilità del 20% di aggiungere spike (tipo \"s\")\n    let type = \"p\";\n    if (rand() < 0.3) {\n      type = \"s\";\n    }\n    \n    const platform = {\n      type,\n      height: newHeight,\n      posStartX,\n      posEndX\n    };\n    platforms.push(platform);\n    prev = platform;\n  }\n  \n  // Aggiungi la piattaforma finale \"T\" (traguardo) in una posizione raggiungibile dall'ultima piattaforma\n  // Per farlo, scegliamo un incremento verticale che faccia rimanere il traguardo entro lo screenHeight\n  const remainingVertical = screenHeight - prev.height;\n  // Se remainingVertical è troppo piccolo, possiamo impostare un piccolo incremento\n  const finalVerticalIncrement = remainingVertical > minVertical ? \n    Math.floor(rand() * (Math.min(maxVertical, remainingVertical) - minVertical + 1)) + minVertical :\n    remainingVertical;\n  const newHeight = prev.height + finalVerticalIncrement;\n  const maxReach = getMaxHorizontalDistance(finalVerticalIncrement) - marginSafety;\n  const gap = Math.floor(Math.min((rand() * (maxReach - 2) + 2), 13));\n  let direction = rand() < 0.5 ? 1 : -1;\n  let posStartX;\n  \n  if (direction === 1) {\n    if (prev.posEndX + gap + minWidth <= maxX) {\n      posStartX = prev.posEndX + gap;\n    } else if (prev.posStartX - gap - minWidth >= 0) {\n      direction = -1;\n      posStartX = prev.posStartX - gap - minWidth;\n    } else {\n      posStartX = Math.max(0, maxX - minWidth);\n    }\n  } else {\n    if (prev.posStartX - gap - minWidth >= 0) {\n      posStartX = prev.posStartX - gap - minWidth;\n    } else if (prev.posEndX + gap + minWidth <= maxX) {\n      direction = 1;\n      posStartX = prev.posEndX + gap;\n    } else {\n      posStartX = 0;\n    }\n  }\n  \n  const width = Math.min(\n    Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth,\n    maxX - posStartX\n  );\n  const posEndX = posStartX + width;\n  \n  // La piattaforma finale è il traguardo \"T\"\n  platforms.push({\n    type: \"T\",\n    height: newHeight,\n    posStartX,\n    posEndX\n  });\n  \n  return platforms;\n}\n\n\n\nfunction EmuSchermo({ pressedButtons }) {\n  const ballSize = 4;\n  const horizontalAcceleration = 0.2;\n  const maxHorizontalSpeed = 1.2;\n  const friction = 0.1;\n  const jumpVelocity = 6;\n  const gravity = -0.5;\n\n  // Stato di gioco: \"countdown\", \"playing\", \"gameOver\"\n  const [gameState, setGameState] = useState(\"countdown\");\n  const [countdown, setCountdown] = useState(3);\n  const [timeLeft, setTimeLeft] = useState(30);\n\n  const [level, setLevel] = useState(1);\n  const [LEVEL, SETLEVEL] = useState(generateLevel(1));\n  const platformsRef = useRef(LEVEL);\n  useEffect(() => {\n    platformsRef.current = LEVEL;\n  }, [LEVEL]);\n\n  const [ball, setBall] = useState({\n    x: 2,\n    y: 0,\n    vx: 0,\n    vy: 0,\n  });\n\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  const animationFrameId = useRef(null);\n\n\n\n  function renderImpact(x,y) {\n    return(\n      <div\n        className=\"hud\"\n        style={{\n          left: `${ball.x}%`,\n          bottom: `${ball.y}%`,\n          height: `${ballSize + 2}%`,\n        }}\n      ></div>\n    );\n  }\n\n  // Countdown iniziale di 3 secondi\n  useEffect(() => {\n    if (gameState === \"countdown\") {\n      const countdownInterval = setInterval(() => {\n        setCountdown(prev => {\n          if (prev <= 1) {\n            clearInterval(countdownInterval);\n            setGameState(\"playing\");\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => clearInterval(countdownInterval);\n    }\n  }, [gameState]);\n\n  // Timer di gioco: decrementa ogni secondo durante il gioco\n  useEffect(() => {\n    if (gameState === \"playing\") {\n      const timerInterval = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            clearInterval(timerInterval);\n            setGameState(\"gameOver\");\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    }\n  }, [gameState]);\n\n  // Loop di aggiornamento del gioco (solo se in stato \"playing\")\n  useEffect(() => {\n    if (gameState !== \"playing\") return;\n    \n    const update = () => {\n      setBall((prev) => {\n        let { x, y, vx, vy } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione input orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) vx -= horizontalAcceleration;\n        if (currentPressedButtons[BUTTONS.RIGHT]) vx += horizontalAcceleration;\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          vx = vx > 0 ? Math.max(vx - friction, 0) : Math.min(vx + friction, 0);\n        }\n        vx = Math.min(Math.max(vx, -maxHorizontalSpeed), maxHorizontalSpeed);\n\n        // Controllo per permettere il salto (a terra o su piattaforma)\n        const isOnGroundOrPlatform =\n          y === 0 ||\n          platformsRef.current.some(p => {\n            const platformTop = p.height + 2;\n            const horizontalOverlap = (\n              x <= p.posEndX &&\n              (x + ballSize) >= p.posStartX\n            );\n            return y === platformTop && horizontalOverlap;\n          });\n\n        if (currentPressedButtons[BUTTONS.A] && isOnGroundOrPlatform) {\n          vy = jumpVelocity;\n        }\n\n        vy += gravity;\n        let newY = y + vy;\n        let newX = x + vx;\n\n        // Collisione base con piattaforme (aterraggio/scontro)\n        let collided = false;\n        platformsRef.current.forEach(platform => {\n          const platformTop = platform.height + 2;\n          const platformBottom = platform.height;\n          const horizontalOverlap = (\n            newX < platform.posEndX &&\n            (newX + ballSize) > platform.posStartX\n          );\n          const verticalOverlap = (\n            newY <= platformTop &&\n            (newY + ballSize) >= platformBottom\n          );\n          if (horizontalOverlap && verticalOverlap) {\n            const prevBottom = y + ballSize;\n            if (prevBottom <= platformBottom && vy > 0) {\n              // Salto contro la piattaforma\n              newY = platformBottom - ballSize;\n              vy = 0;\n            } else if (vy <= 0) {\n              // Atterraggio sulla piattaforma\n              newY = platformTop;\n              vy = 0;\n            }\n            collided = true;\n          }\n        });\n        if (!collided && newY < 0) {\n          newY = 0;\n          vy = 0;\n        }\n        newX = Math.max(0, Math.min(newX, 100 - ballSize));\n\n        // Gestione collisione con spike (\"s\") e traguardo (\"T\")\n        for (const platform of platformsRef.current) {\n          if (platform.type === \"s\") {\n            const spikeLeft = platform.posStartX;\n            const spikeRight = platform.posEndX;\n            const spikeBottom = platform.height;\n            const spikeTop = platform.height + 3;\n            const horizontalCollision = (x + ballSize > spikeLeft && x < spikeRight);\n            const verticalCollision = (y < spikeTop && y + ballSize > spikeBottom && vy <= 0);\n            if (horizontalCollision && verticalCollision) {\n              setTimeLeft(prev => prev - 10);\n              renderImpact()\n              platform.type = \"p\";\n              break;\n            }\n          } else if (platform.type === \"T\") {\n            const goalLeft = platform.posStartX;\n            const goalRight = platform.posEndX;\n            const goalBottom = platform.height;\n            const goalTop = platform.height + 3;\n            const horizontalCollision = (x + ballSize > goalLeft && x < goalRight);\n            const verticalCollision = (y < goalTop && y + ballSize > goalBottom && vy <= 0);\n            if (horizontalCollision && verticalCollision) {\n              // Aggiunge 15 secondi e passa al livello successivo\n              setTimeLeft(prev => prev + 5);\n              const newLevel = level + 1;\n              setLevel(newLevel);\n              SETLEVEL(generateLevel(newLevel));\n              newX = 2;\n              newY = 0;\n              vx = 0;\n              vy = 0;\n              break;\n            }\n          }\n        }\n\n        return { x: newX, y: newY, vx, vy };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [gameState, level, ballSize, horizontalAcceleration, friction, maxHorizontalSpeed, jumpVelocity, gravity]);\n\n  // Funzione per ripartire la partita (Play Again)\n  const handlePlayAgain = () => {\n    setLevel(1);\n    SETLEVEL(generateLevel(1));\n    setBall({ x: 2, y: 0, vx: 0, vy: 0 });\n    setTimeLeft(60);\n    setCountdown(3);\n    setGameState(\"countdown\");\n  };\n\n  return (\n    <div className=\"emu-container\">\n      {/* Overlay per il countdown iniziale */}\n      {gameState === \"countdown\" && (\n        <div className=\"countdown-overlay\">\n          <h1>{countdown}</h1>\n        </div>\n      )}\n\n      {/* Overlay Game Over */}\n      {gameState === \"gameOver\" && (\n        <div className=\"gameover-overlay\">\n          <h1>Game Over</h1>\n          <p>Livello raggiunto: {level}</p>\n          <button onClick={handlePlayAgain}>Play Again</button>\n        </div>\n      )}\n\n      {/* HUD durante il gioco */}\n      {gameState === \"playing\" && (\n        <div className=\"hud\">\n          <p>Time: {timeLeft}</p>\n          <p>Level: {level}</p>\n        </div>\n      )}\n\n      <div\n        className=\"ball\"\n        style={{\n          left: `${ball.x}%`,\n          bottom: `${ball.y}%`,\n          width: `${ballSize}%`,\n          height: `${ballSize + 2}%`,\n        }}\n      ></div>\n\n      {LEVEL.map((item, i) => {\n        if (item.type === \"T\") {\n          return (\n            <div\n              key={i}\n              className=\"t-platform\"\n              style={{\n                left: `${item.posStartX}%`,\n                width: `${item.posEndX - item.posStartX}%`,\n                bottom: `${item.height}%`,\n                height: \"2%\",\n              }}\n            />\n          );\n        } else if (item.type === \"p\") {\n          return (\n            <div\n              key={i}\n              className=\"platform\"\n              style={{\n                left: `${item.posStartX}%`,\n                width: `${item.posEndX - item.posStartX}%`,\n                bottom: `${item.height}%`,\n                height: \"2%\",\n              }}\n            />\n          );\n        } else {\n          return (\n            <div\n              key={i}\n              className=\"spike\"\n              style={{\n                left: `${item.posStartX}%`,\n                width: `${item.posEndX - item.posStartX}%`,\n                bottom: `${item.height}%`,\n                height: \"2%\",\n              }}\n            />\n          );\n        }\n      })}\n    </div>\n  );\n}\n\n\nexport default EmuSchermo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}