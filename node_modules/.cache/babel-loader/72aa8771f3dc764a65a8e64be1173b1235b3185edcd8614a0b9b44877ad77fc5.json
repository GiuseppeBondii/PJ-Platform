{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { GAME_LEVELS } from \"./Levels\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8\n};\nconst LEVEL_TYPES = {\n  PLATFORM: \"platform\",\n  MOVING: \"moving\",\n  BOUNCE: \"bounce\",\n  ENEMY: \"enemy\",\n  FINISH: \"finish\",\n  SPIKE: \"spike\",\n  DISAPPEARING: \"disappear\"\n};\n\n// Costanti fisiche\nconst ballSize = 6;\nconst horizontalAcceleration = 0.2;\nconst maxHorizontalSpeed = 2;\nconst friction = 0.1;\nconst jumpVelocity = 7;\nconst gravity = -0.5;\nconst bounceMultiplier = 1;\nfunction EmuSchermo({\n  pressedButtons\n}) {\n  _s();\n  var _GAME_LEVELS$currentL;\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [gameState, setGameState] = useState({\n    lives: 3,\n    isGameOver: false,\n    isLevelComplete: false\n  });\n  // Flag per evitare transizioni multiple\n  const [levelTransitioning, setLevelTransitioning] = useState(false);\n  const [disappearingPlatforms, setDisappearingPlatforms] = useState({});\n  const disappearingTimersRef = useRef({});\n  const [ball, setBall] = useState({\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    isOnGround: false,\n    isJumping: false\n  });\n\n  // Inizializzazione per ogni livello\n  useEffect(() => {\n    if (GAME_LEVELS[currentLevel]) {\n      const {\n        startPosition\n      } = GAME_LEVELS[currentLevel];\n      setBall({\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false\n      });\n      setDisappearingPlatforms({});\n      Object.values(disappearingTimersRef.current).forEach(timer => clearTimeout(timer));\n      disappearingTimersRef.current = {};\n      setLevelTransitioning(false);\n      const container = document.querySelector('.emu-container');\n      if (container) {\n        container.classList.add('level-transition');\n        setTimeout(() => container.classList.remove('level-transition'), 500);\n      }\n    }\n  }, [currentLevel]);\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Funzione che gestisce il passaggio al livello successivo in modo debounced\n  const completeLevel = () => {\n    if (levelTransitioning) return;\n    setLevelTransitioning(true);\n    if (currentLevel < GAME_LEVELS.length - 1) {\n      setTimeout(() => {\n        setCurrentLevel(prev => prev + 1);\n        setLevelTransitioning(false);\n      }, 500); // Attendi la transizione\n    } else {\n      setGameState(prev => ({\n        ...prev,\n        isGameOver: true,\n        isLevelComplete: true\n      }));\n    }\n  };\n  const playerDeath = () => {\n    setGameState(prev => {\n      const newLives = prev.lives - 1;\n      if (newLives <= 0) {\n        return {\n          ...prev,\n          lives: 0,\n          isGameOver: true\n        };\n      }\n      return {\n        ...prev,\n        lives: newLives\n      };\n    });\n    if (GAME_LEVELS[currentLevel]) {\n      const {\n        startPosition\n      } = GAME_LEVELS[currentLevel];\n      setBall({\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false\n      });\n    }\n  };\n\n  // Le funzioni di collisione (platform, hazard, finish) rimangono invariate\n  const checkPlatformCollision = (x, y, vx, vy) => {\n    if (!GAME_LEVELS[currentLevel]) return {\n      collision: false\n    };\n    const elements = GAME_LEVELS[currentLevel].elements;\n    const ballBottom = y;\n    const ballTop = y + ballSize;\n    const ballLeft = x;\n    const ballRight = x + ballSize;\n    const tolerance = 2;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[i]) continue;\n      if ([LEVEL_TYPES.PLATFORM, LEVEL_TYPES.MOVING, LEVEL_TYPES.BOUNCE, LEVEL_TYPES.DISAPPEARING].includes(element.type)) {\n        let elementX = element.x;\n        let elementY = element.y;\n        if (element.type === LEVEL_TYPES.MOVING) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n          elementY = element.y + element.moveY * cycle;\n        }\n        const elementLeft = elementX;\n        const elementRight = elementX + element.width;\n        const elementTop = elementY + element.height;\n        const elementBottom = elementY;\n        if (ballRight > elementLeft && ballLeft < elementRight && ballTop > elementBottom && ballBottom < elementTop) {\n          const fromTop = ballBottom - elementTop;\n          const fromBottom = elementBottom - ballTop;\n          const fromLeft = ballRight - elementLeft;\n          const fromRight = elementRight - ballLeft;\n          const minPenetration = Math.min(Math.abs(fromTop), Math.abs(fromBottom), Math.abs(fromLeft), Math.abs(fromRight));\n          if (minPenetration === Math.abs(fromTop) && vy < 0) {\n            if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n              disappearingTimersRef.current[i] = setTimeout(() => {\n                setDisappearingPlatforms(prev => ({\n                  ...prev,\n                  [i]: true\n                }));\n              }, element.timeout || 1000);\n            }\n            if (element.type === LEVEL_TYPES.BOUNCE) {\n              return {\n                collision: true,\n                y: elementTop,\n                vy: jumpVelocity * (element.power || bounceMultiplier),\n                isOnGround: false\n              };\n            }\n            return {\n              collision: true,\n              y: elementTop,\n              vy: 0,\n              isOnGround: true\n            };\n          }\n          if (minPenetration === Math.abs(fromBottom) && vy > 0) {\n            return {\n              collision: true,\n              y: elementBottom - ballSize,\n              vy: -vy * 0.2,\n              isOnGround: false\n            };\n          }\n          if (minPenetration === Math.abs(fromLeft) && Math.abs(vx) > 0) {\n            return {\n              collision: true,\n              x: elementLeft - ballSize,\n              vx: 0\n            };\n          }\n          if (minPenetration === Math.abs(fromRight) && Math.abs(vx) > 0) {\n            return {\n              collision: true,\n              x: elementRight,\n              vx: 0\n            };\n          }\n        }\n        if (vy < 0 && ballBottom >= elementTop - tolerance && ballBottom <= elementTop + tolerance && ballRight > elementLeft + 1 && ballLeft < elementRight - 1) {\n          if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n            disappearingTimersRef.current[i] = setTimeout(() => {\n              setDisappearingPlatforms(prev => ({\n                ...prev,\n                [i]: true\n              }));\n            }, element.timeout || 1000);\n          }\n          if (element.type === LEVEL_TYPES.BOUNCE) {\n            return {\n              collision: true,\n              y: elementTop,\n              vy: jumpVelocity * (element.power || bounceMultiplier),\n              isOnGround: false\n            };\n          }\n          return {\n            collision: true,\n            y: elementTop,\n            vy: 0,\n            isOnGround: true\n          };\n        }\n      }\n    }\n    return {\n      collision: false\n    };\n  };\n  const checkHazardCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if ([LEVEL_TYPES.ENEMY, LEVEL_TYPES.SPIKE].includes(element.type)) {\n        let elementX = element.x;\n        let elementY = element.y;\n        if (element.type === LEVEL_TYPES.ENEMY && element.moveX) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n        }\n        if (x < elementX + element.width && x + ballSize > elementX && y < elementY + element.height && y + ballSize > elementY) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Il controllo sul finish usa completeLevel (ora debounced)\n  const checkFinishCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.FINISH) {\n        const finishSize = 10;\n        if (x < element.x + finishSize && x + ballSize > element.x && y < element.y + finishSize && y + ballSize > element.y) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Ciclo principale di aggiornamento con requestAnimationFrame\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      if (gameState.isGameOver) return;\n      setBall(prev => {\n        let {\n          x,\n          y,\n          vx,\n          vy,\n          isOnGround,\n          isJumping\n        } = prev;\n        const currentPressed = pressedButtonsRef.current || {};\n        if (currentPressed[BUTTONS.LEFT]) vx -= horizontalAcceleration;\n        if (currentPressed[BUTTONS.RIGHT]) vx += horizontalAcceleration;\n        if (!currentPressed[BUTTONS.LEFT] && !currentPressed[BUTTONS.RIGHT]) {\n          if (vx > 0) vx = Math.max(vx - friction, 0);else if (vx < 0) vx = Math.min(vx + friction, 0);\n        }\n        vx = Math.min(Math.max(vx, -maxHorizontalSpeed), maxHorizontalSpeed);\n        if (currentPressed[BUTTONS.A] && isOnGround) {\n          vy = jumpVelocity;\n          isOnGround = false;\n          isJumping = true;\n        } else if (!currentPressed[BUTTONS.A]) {\n          isJumping = false;\n        }\n        vy += gravity;\n        const newX = x + vx;\n        const newY = y + vy;\n        const collision = checkPlatformCollision(newX, newY, vx, vy);\n        if (collision.collision) {\n          x = collision.x !== undefined ? collision.x : newX;\n          y = collision.y !== undefined ? collision.y : newY;\n          vx = collision.vx !== undefined ? collision.vx : vx;\n          vy = collision.vy !== undefined ? collision.vy : vy;\n          isOnGround = collision.isOnGround !== undefined ? collision.isOnGround : isOnGround;\n        } else {\n          x = newX;\n          y = newY;\n          isOnGround = false;\n        }\n        if (checkHazardCollision(x, y)) {\n          playerDeath();\n        }\n        if (checkFinishCollision(x, y)) {\n          completeLevel();\n        }\n        if (y < -10) {\n          playerDeath();\n          return {\n            x,\n            y: 0,\n            vx: 0,\n            vy: 0,\n            isOnGround: false,\n            isJumping: false\n          };\n        }\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 100 - ballSize) {\n          x = 100 - ballSize;\n          vx = 0;\n        }\n\n        // Esegui il reset solo se il pulsante START viene premuto una volta\n        if (currentPressed[BUTTONS.START] && GAME_LEVELS[currentLevel]) {\n          const {\n            startPosition\n          } = GAME_LEVELS[currentLevel];\n          return {\n            x: startPosition.x,\n            y: startPosition.y,\n            vx: 0,\n            vy: 0,\n            isOnGround: false,\n            isJumping: false\n          };\n        }\n\n        // Passa al livello successivo con SELECT solo se non siamo già in transizione\n        if (currentPressed[BUTTONS.SELECT] && !levelTransitioning) {\n          setLevelTransitioning(true);\n          setTimeout(() => {\n            setCurrentLevel(prev => (prev + 1) % GAME_LEVELS.length);\n            setLevelTransitioning(false);\n          }, 500);\n        }\n        if (currentPressed[BUTTONS.DOWN] && !isOnGround) {\n          vy -= 0.5;\n        }\n        return {\n          x,\n          y,\n          vx,\n          vy,\n          isOnGround,\n          isJumping\n        };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [currentLevel, gameState.isGameOver, levelTransitioning]);\n  const renderLevel = () => {\n    if (!GAME_LEVELS[currentLevel]) return null;\n    const level = GAME_LEVELS[currentLevel];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: level.elements.map((element, index) => {\n        if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[index]) return null;\n        if (element.type === \"collectable\") return null;\n        let elementX = element.x;\n        let elementY = element.y;\n        if (element.type === LEVEL_TYPES.MOVING) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n          elementY = element.y + element.moveY * cycle;\n        }\n        const commonStyle = {\n          left: `${elementX}%`,\n          bottom: `${elementY}%`,\n          width: `${element.width}%`,\n          height: `${element.height}%`\n        };\n        switch (element.type) {\n          case LEVEL_TYPES.PLATFORM:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform\",\n              style: commonStyle\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 22\n            }, this);\n          case LEVEL_TYPES.MOVING:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform moving\",\n              style: commonStyle\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 22\n            }, this);\n          case LEVEL_TYPES.BOUNCE:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform bounce\",\n              style: commonStyle\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 22\n            }, this);\n          case LEVEL_TYPES.DISAPPEARING:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform disappearing\",\n              style: commonStyle\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 22\n            }, this);\n          case LEVEL_TYPES.ENEMY:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"enemy\",\n              style: commonStyle\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 22\n            }, this);\n          case LEVEL_TYPES.SPIKE:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spike\",\n              style: commonStyle\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 22\n            }, this);\n          case LEVEL_TYPES.FINISH:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"finish\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: \"10%\",\n                height: \"10%\"\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 17\n            }, this);\n          default:\n            return null;\n        }\n      })\n    }, void 0, false);\n  };\n  const renderGameInterface = () => {\n    if (gameState.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: gameState.isLevelComplete ? \"Congratulazioni!\" : \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setCurrentLevel(0);\n            setGameState({\n              lives: 3,\n              isGameOver: false,\n              isLevelComplete: false\n            });\n            setLevelTransitioning(false);\n          },\n          children: \"Ricomincia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lives-display\",\n        children: [\"Vite: \", Array.from({\n          length: gameState.lives\n        }, (_, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"life-icon\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 68\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emu-container\",\n    style: {\n      backgroundColor: ((_GAME_LEVELS$currentL = GAME_LEVELS[currentLevel]) === null || _GAME_LEVELS$currentL === void 0 ? void 0 : _GAME_LEVELS$currentL.backgroundColor) || \"#87CEEB\"\n    },\n    children: [renderLevel(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ball\",\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`,\n        width: `${ballSize}%`,\n        height: `${ballSize}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this), renderGameInterface()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n}\n_s(EmuSchermo, \"LiQi+dP8dnqaARczkisorWHXwVc=\");\n_c = EmuSchermo;\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GAME_LEVELS","jsxDEV","_jsxDEV","Fragment","_Fragment","BUTTONS","A","B","START","SELECT","UP","DOWN","LEFT","RIGHT","LEVEL_TYPES","PLATFORM","MOVING","BOUNCE","ENEMY","FINISH","SPIKE","DISAPPEARING","ballSize","horizontalAcceleration","maxHorizontalSpeed","friction","jumpVelocity","gravity","bounceMultiplier","EmuSchermo","pressedButtons","_s","_GAME_LEVELS$currentL","currentLevel","setCurrentLevel","gameState","setGameState","lives","isGameOver","isLevelComplete","levelTransitioning","setLevelTransitioning","disappearingPlatforms","setDisappearingPlatforms","disappearingTimersRef","ball","setBall","x","y","vx","vy","isOnGround","isJumping","startPosition","Object","values","current","forEach","timer","clearTimeout","container","document","querySelector","classList","add","setTimeout","remove","pressedButtonsRef","completeLevel","length","prev","playerDeath","newLives","checkPlatformCollision","collision","elements","ballBottom","ballTop","ballLeft","ballRight","tolerance","i","element","type","includes","elementX","elementY","time","Date","now","cycle","Math","sin","speed","moveX","moveY","elementLeft","elementRight","width","elementTop","height","elementBottom","fromTop","fromBottom","fromLeft","fromRight","minPenetration","min","abs","timeout","power","checkHazardCollision","checkFinishCollision","finishSize","animationFrameId","update","currentPressed","max","newX","newY","undefined","requestAnimationFrame","cancelAnimationFrame","renderLevel","level","children","map","index","commonStyle","left","bottom","className","style","fileName","_jsxFileName","lineNumber","columnNumber","renderGameInterface","onClick","Array","from","_","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { GAME_LEVELS } from \"./Levels\";\n\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8,\n};\n\nconst LEVEL_TYPES = {\n  PLATFORM: \"platform\",\n  MOVING: \"moving\",\n  BOUNCE: \"bounce\",\n  ENEMY: \"enemy\",\n  FINISH: \"finish\",\n  SPIKE: \"spike\",\n  DISAPPEARING: \"disappear\"\n};\n\n// Costanti fisiche\nconst ballSize = 6;\nconst horizontalAcceleration = 0.2;\nconst maxHorizontalSpeed = 2;\nconst friction = 0.1;\nconst jumpVelocity = 7;\nconst gravity = -0.5;\nconst bounceMultiplier = 1;\n\nfunction EmuSchermo({ pressedButtons }) {\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [gameState, setGameState] = useState({\n    lives: 3,\n    isGameOver: false,\n    isLevelComplete: false,\n  });\n  // Flag per evitare transizioni multiple\n  const [levelTransitioning, setLevelTransitioning] = useState(false);\n\n  const [disappearingPlatforms, setDisappearingPlatforms] = useState({});\n  const disappearingTimersRef = useRef({});\n\n  const [ball, setBall] = useState({\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    isOnGround: false,\n    isJumping: false,\n  });\n\n  // Inizializzazione per ogni livello\n  useEffect(() => {\n    if (GAME_LEVELS[currentLevel]) {\n      const { startPosition } = GAME_LEVELS[currentLevel];\n      setBall({\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false,\n      });\n      setDisappearingPlatforms({});\n      Object.values(disappearingTimersRef.current).forEach(timer => clearTimeout(timer));\n      disappearingTimersRef.current = {};\n      setLevelTransitioning(false);\n\n      const container = document.querySelector('.emu-container');\n      if (container) {\n        container.classList.add('level-transition');\n        setTimeout(() => container.classList.remove('level-transition'), 500);\n      }\n    }\n  }, [currentLevel]);\n\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Funzione che gestisce il passaggio al livello successivo in modo debounced\n  const completeLevel = () => {\n    if (levelTransitioning) return;\n    setLevelTransitioning(true);\n    if (currentLevel < GAME_LEVELS.length - 1) {\n      setTimeout(() => {\n        setCurrentLevel(prev => prev + 1);\n        setLevelTransitioning(false);\n      }, 500); // Attendi la transizione\n    } else {\n      setGameState(prev => ({ ...prev, isGameOver: true, isLevelComplete: true }));\n    }\n  };\n\n  const playerDeath = () => {\n    setGameState(prev => {\n      const newLives = prev.lives - 1;\n      if (newLives <= 0) {\n        return { ...prev, lives: 0, isGameOver: true };\n      }\n      return { ...prev, lives: newLives };\n    });\n    if (GAME_LEVELS[currentLevel]) {\n      const { startPosition } = GAME_LEVELS[currentLevel];\n      setBall({\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false,\n      });\n    }\n  };\n\n  // Le funzioni di collisione (platform, hazard, finish) rimangono invariate\n  const checkPlatformCollision = (x, y, vx, vy) => {\n    if (!GAME_LEVELS[currentLevel]) return { collision: false };\n    const elements = GAME_LEVELS[currentLevel].elements;\n    const ballBottom = y;\n    const ballTop = y + ballSize;\n    const ballLeft = x;\n    const ballRight = x + ballSize;\n    const tolerance = 2;\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[i]) continue;\n\n      if ([LEVEL_TYPES.PLATFORM, LEVEL_TYPES.MOVING, LEVEL_TYPES.BOUNCE, LEVEL_TYPES.DISAPPEARING].includes(element.type)) {\n        let elementX = element.x;\n        let elementY = element.y;\n        if (element.type === LEVEL_TYPES.MOVING) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n          elementY = element.y + element.moveY * cycle;\n        }\n        const elementLeft = elementX;\n        const elementRight = elementX + element.width;\n        const elementTop = elementY + element.height;\n        const elementBottom = elementY;\n\n        if (ballRight > elementLeft && ballLeft < elementRight && ballTop > elementBottom && ballBottom < elementTop) {\n          const fromTop = ballBottom - elementTop;\n          const fromBottom = elementBottom - ballTop;\n          const fromLeft = ballRight - elementLeft;\n          const fromRight = elementRight - ballLeft;\n          const minPenetration = Math.min(Math.abs(fromTop), Math.abs(fromBottom), Math.abs(fromLeft), Math.abs(fromRight));\n\n          if (minPenetration === Math.abs(fromTop) && vy < 0) {\n            if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n              disappearingTimersRef.current[i] = setTimeout(() => {\n                setDisappearingPlatforms(prev => ({ ...prev, [i]: true }));\n              }, element.timeout || 1000);\n            }\n            if (element.type === LEVEL_TYPES.BOUNCE) {\n              return { collision: true, y: elementTop, vy: jumpVelocity * (element.power || bounceMultiplier), isOnGround: false };\n            }\n            return { collision: true, y: elementTop, vy: 0, isOnGround: true };\n          }\n          if (minPenetration === Math.abs(fromBottom) && vy > 0) {\n            return { collision: true, y: elementBottom - ballSize, vy: -vy * 0.2, isOnGround: false };\n          }\n          if (minPenetration === Math.abs(fromLeft) && Math.abs(vx) > 0) {\n            return { collision: true, x: elementLeft - ballSize, vx: 0 };\n          }\n          if (minPenetration === Math.abs(fromRight) && Math.abs(vx) > 0) {\n            return { collision: true, x: elementRight, vx: 0 };\n          }\n        }\n        if (vy < 0 && ballBottom >= elementTop - tolerance && ballBottom <= elementTop + tolerance &&\n            ballRight > elementLeft + 1 && ballLeft < elementRight - 1) {\n          if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n            disappearingTimersRef.current[i] = setTimeout(() => {\n              setDisappearingPlatforms(prev => ({ ...prev, [i]: true }));\n            }, element.timeout || 1000);\n          }\n          if (element.type === LEVEL_TYPES.BOUNCE) {\n            return { collision: true, y: elementTop, vy: jumpVelocity * (element.power || bounceMultiplier), isOnGround: false };\n          }\n          return { collision: true, y: elementTop, vy: 0, isOnGround: true };\n        }\n      }\n    }\n    return { collision: false };\n  };\n\n  const checkHazardCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if ([LEVEL_TYPES.ENEMY, LEVEL_TYPES.SPIKE].includes(element.type)) {\n        let elementX = element.x;\n        let elementY = element.y;\n        if (element.type === LEVEL_TYPES.ENEMY && element.moveX) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n        }\n        if (x < elementX + element.width && x + ballSize > elementX &&\n            y < elementY + element.height && y + ballSize > elementY) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Il controllo sul finish usa completeLevel (ora debounced)\n  const checkFinishCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.FINISH) {\n        const finishSize = 10;\n        if (x < element.x + finishSize && x + ballSize > element.x &&\n            y < element.y + finishSize && y + ballSize > element.y) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Ciclo principale di aggiornamento con requestAnimationFrame\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      if (gameState.isGameOver) return;\n      setBall(prev => {\n        let { x, y, vx, vy, isOnGround, isJumping } = prev;\n        const currentPressed = pressedButtonsRef.current || {};\n\n        if (currentPressed[BUTTONS.LEFT]) vx -= horizontalAcceleration;\n        if (currentPressed[BUTTONS.RIGHT]) vx += horizontalAcceleration;\n        if (!currentPressed[BUTTONS.LEFT] && !currentPressed[BUTTONS.RIGHT]) {\n          if (vx > 0) vx = Math.max(vx - friction, 0);\n          else if (vx < 0) vx = Math.min(vx + friction, 0);\n        }\n        vx = Math.min(Math.max(vx, -maxHorizontalSpeed), maxHorizontalSpeed);\n\n        if (currentPressed[BUTTONS.A] && isOnGround) {\n          vy = jumpVelocity;\n          isOnGround = false;\n          isJumping = true;\n        } else if (!currentPressed[BUTTONS.A]) {\n          isJumping = false;\n        }\n\n        vy += gravity;\n        const newX = x + vx;\n        const newY = y + vy;\n\n        const collision = checkPlatformCollision(newX, newY, vx, vy);\n        if (collision.collision) {\n          x = collision.x !== undefined ? collision.x : newX;\n          y = collision.y !== undefined ? collision.y : newY;\n          vx = collision.vx !== undefined ? collision.vx : vx;\n          vy = collision.vy !== undefined ? collision.vy : vy;\n          isOnGround = collision.isOnGround !== undefined ? collision.isOnGround : isOnGround;\n        } else {\n          x = newX;\n          y = newY;\n          isOnGround = false;\n        }\n\n        if (checkHazardCollision(x, y)) {\n          playerDeath();\n        }\n\n        if (checkFinishCollision(x, y)) {\n          completeLevel();\n        }\n\n        if (y < -10) {\n          playerDeath();\n          return { x, y: 0, vx: 0, vy: 0, isOnGround: false, isJumping: false };\n        }\n\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 100 - ballSize) {\n          x = 100 - ballSize;\n          vx = 0;\n        }\n\n        // Esegui il reset solo se il pulsante START viene premuto una volta\n        if (currentPressed[BUTTONS.START] && GAME_LEVELS[currentLevel]) {\n          const { startPosition } = GAME_LEVELS[currentLevel];\n          return { x: startPosition.x, y: startPosition.y, vx: 0, vy: 0, isOnGround: false, isJumping: false };\n        }\n\n        // Passa al livello successivo con SELECT solo se non siamo già in transizione\n        if (currentPressed[BUTTONS.SELECT] && !levelTransitioning) {\n          setLevelTransitioning(true);\n          setTimeout(() => {\n            setCurrentLevel(prev => (prev + 1) % GAME_LEVELS.length);\n            setLevelTransitioning(false);\n          }, 500);\n        }\n\n        if (currentPressed[BUTTONS.DOWN] && !isOnGround) {\n          vy -= 0.5;\n        }\n\n        return { x, y, vx, vy, isOnGround, isJumping };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [currentLevel, gameState.isGameOver, levelTransitioning]);\n\n  const renderLevel = () => {\n    if (!GAME_LEVELS[currentLevel]) return null;\n    const level = GAME_LEVELS[currentLevel];\n    return (\n      <>\n        {level.elements.map((element, index) => {\n          if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[index]) return null;\n          if (element.type === \"collectable\") return null;\n          let elementX = element.x;\n          let elementY = element.y;\n          if (element.type === LEVEL_TYPES.MOVING) {\n            const time = Date.now() / 1000;\n            const cycle = Math.sin(time * element.speed);\n            elementX = element.x + element.moveX * cycle;\n            elementY = element.y + element.moveY * cycle;\n          }\n          const commonStyle = {\n            left: `${elementX}%`,\n            bottom: `${elementY}%`,\n            width: `${element.width}%`,\n            height: `${element.height}%`\n          };\n          switch (element.type) {\n            case LEVEL_TYPES.PLATFORM:\n              return <div key={index} className=\"platform\" style={commonStyle} />;\n            case LEVEL_TYPES.MOVING:\n              return <div key={index} className=\"platform moving\" style={commonStyle} />;\n            case LEVEL_TYPES.BOUNCE:\n              return <div key={index} className=\"platform bounce\" style={commonStyle} />;\n            case LEVEL_TYPES.DISAPPEARING:\n              return <div key={index} className=\"platform disappearing\" style={commonStyle} />;\n            case LEVEL_TYPES.ENEMY:\n              return <div key={index} className=\"enemy\" style={commonStyle} />;\n            case LEVEL_TYPES.SPIKE:\n              return <div key={index} className=\"spike\" style={commonStyle} />;\n            case LEVEL_TYPES.FINISH:\n              return (\n                <div\n                  key={index}\n                  className=\"finish\"\n                  style={{ left: `${elementX}%`, bottom: `${elementY}%`, width: \"10%\", height: \"10%\" }}\n                />\n              );\n            default:\n              return null;\n          }\n        })}\n      </>\n    );\n  };\n\n  const renderGameInterface = () => {\n    if (gameState.isGameOver) {\n      return (\n        <div className=\"game-over\">\n          <h2>{gameState.isLevelComplete ? \"Congratulazioni!\" : \"Game Over\"}</h2>\n          <button onClick={() => {\n            setCurrentLevel(0);\n            setGameState({ lives: 3, isGameOver: false, isLevelComplete: false });\n            setLevelTransitioning(false);\n          }}>\n            Ricomincia\n          </button>\n        </div>\n      );\n    }\n    return (\n      <div className=\"game-info\">\n        <div className=\"lives-display\">\n          Vite: {Array.from({ length: gameState.lives }, (_, i) => <span key={i} className=\"life-icon\" />)}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className=\"emu-container\"\n      style={{ backgroundColor: GAME_LEVELS[currentLevel]?.backgroundColor || \"#87CEEB\" }}\n    >\n      {renderLevel()}\n      <div\n        className=\"ball\"\n        style={{\n          left: `${ball.x}%`,\n          bottom: `${ball.y}%`,\n          width: `${ballSize}%`,\n          height: `${ballSize}%`\n        }}\n      ></div>\n      {renderGameInterface()}\n    </div>\n  );\n}\n\nexport default EmuSchermo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}