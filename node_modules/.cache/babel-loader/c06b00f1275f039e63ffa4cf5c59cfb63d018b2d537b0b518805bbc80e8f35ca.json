{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ballSize = 4;\nconst horizontalAcceleration = 0.2;\nconst maxHorizontalSpeed = 1.2;\nconst friction = 0.1;\nconst jumpVelocity = 4;\nconst gravity = -0.5;\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  LEFT: 7,\n  RIGHT: 8\n};\n\n// Parametri per la generazione\nconst screenHeight = 60; // Altezza massima dello schermo\nconst maxX = 100; // Larghezza massima orizzontale\nconst minWidth = 100;\nconst maxWidth = 30;\nconst minVertical = 5;\nconst maxVertical = 13;\nconst marginSafety = 2; // Margine di sicurezza orizzontale per il salto\n\n// Parametri per la generazione pseudo-casuale\nconst a = Math.floor(Math.random() * 10000000000);\nconst c = Math.floor(Math.random() * 10000000000);\nfunction createSeededRandom(seed) {\n  const m = 2 ** 32;\n  let state = seed;\n  return function () {\n    state = (a * state + c) % m;\n    return state / m;\n  };\n}\n\n// Funzione che calcola il tempo di volo disponibile per un salto data la differenza verticale dy\nfunction getFlightTime(dy) {\n  // Se il target è sopra (dy > 0) il tempo di volo è minore\n  if (dy > 0) {\n    // Risolve: 0.5*gravity*t^2 + jumpVelocity*t - dy = 0\n    // Poiché gravity è negativo, usiamo la formula corretta per ottenere il tempo positivo\n    return (jumpVelocity + Math.sqrt(jumpVelocity * jumpVelocity + -2 * gravity * dy)) / -gravity;\n  } else {\n    // Se il target è allo stesso livello o più in basso, consideriamo il tempo d'aria massimo (salto completo)\n    return 2 * jumpVelocity / -gravity;\n  }\n}\n\n// Calcola la distanza orizzontale massima raggiungibile per una data differenza verticale dy\nfunction getMaxHorizontalDistance(dy) {\n  const t = getFlightTime(dy);\n  return maxHorizontalSpeed * t;\n}\nfunction generateLevel(seed) {\n  const rand = createSeededRandom(seed);\n  const platforms = [];\n\n  // Genera la piattaforma di partenza (base)\n  const baseHeight = 20;\n  const firstWidth = Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth;\n  const firstPosStartX = Math.floor(rand() * (maxX - firstWidth));\n  const firstPosEndX = firstPosStartX + firstWidth;\n  platforms.push({\n    type: 'p',\n    // piattaforma hazard: se ci salti sopra, il livello si riavvia\n    height: baseHeight,\n    posStartX: firstPosStartX,\n    posEndX: firstPosEndX\n  });\n  let prev = platforms[0];\n\n  // Genera piattaforme intermedie fino a rimanere entro screenHeight\n  // L'ultima piattaforma verrà forzata ad essere il traguardo (T)\n  while (true) {\n    // Scegli un incremento verticale che non superi l'altezza massima dello schermo\n    const verticalIncrement = Math.floor(rand() * (maxVertical - minVertical + 1)) + minVertical;\n    const newHeight = prev.height + verticalIncrement;\n    if (newHeight > screenHeight - 10) {\n      // Se il prossimo salto supererebbe quasi lo screenHeight, usciamo dal ciclo.\n      break;\n    }\n\n    // Calcola la distanza massima orizzontale raggiungibile per questo salto\n    const maxReach = getMaxHorizontalDistance(verticalIncrement) - marginSafety;\n\n    // Per sicurezza, limitiamo il gap tra le piattaforme a un valore ragionevole (almeno 2 e al massimo quanto raggiungibile o un valore fisso)\n    const gap = Math.floor(Math.min(rand() * (maxReach - 2) + 2, 13 // oppure si può usare 13 se si preferisce una soglia fissa\n    ));\n\n    // Scegli casualmente la direzione: 1 = a destra, -1 = a sinistra\n    let direction = rand() < 0.5 ? 1 : -1;\n    let posStartX;\n    if (direction === 1) {\n      // Prova a posizionare a destra della precedente piattaforma\n      if (prev.posEndX + gap + minWidth <= maxX) {\n        posStartX = prev.posEndX + gap;\n      } else if (prev.posStartX - gap - minWidth >= 0) {\n        // Se non c'è spazio a destra, prova a sinistra\n        direction = -1;\n        posStartX = prev.posStartX - gap - minWidth;\n      } else {\n        // Forza il posizionamento in caso di spazio ristretto\n        posStartX = Math.max(0, maxX - minWidth);\n      }\n    } else {\n      // Prova a posizionare a sinistra della precedente\n      if (prev.posStartX - gap - minWidth >= 0) {\n        posStartX = prev.posStartX - gap - minWidth;\n      } else if (prev.posEndX + gap + minWidth <= maxX) {\n        // Se non c'è spazio a sinistra, prova a destra\n        direction = 1;\n        posStartX = prev.posEndX + gap;\n      } else {\n        posStartX = 0;\n      }\n    }\n\n    // La larghezza della piattaforma la scegliamo casualmente entro i limiti, senza superare il bordo\n    const width = Math.min(Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth, maxX - posStartX);\n    const posEndX = posStartX + width;\n\n    // Determina il tipo: di default è \"p\" (hazard), ma c'è una possibilità del 20% di aggiungere spike (tipo \"s\")\n    let type = \"p\";\n    if (rand() < 0.2) {\n      type = \"s\";\n    }\n    const platform = {\n      type,\n      height: newHeight,\n      posStartX,\n      posEndX\n    };\n    platforms.push(platform);\n    prev = platform;\n  }\n\n  // Aggiungi la piattaforma finale \"T\" (traguardo) in una posizione raggiungibile dall'ultima piattaforma\n  // Per farlo, scegliamo un incremento verticale che faccia rimanere il traguardo entro lo screenHeight\n  const remainingVertical = screenHeight - prev.height;\n  // Se remainingVertical è troppo piccolo, possiamo impostare un piccolo incremento\n  const finalVerticalIncrement = remainingVertical > minVertical ? Math.floor(rand() * (Math.min(maxVertical, remainingVertical) - minVertical + 1)) + minVertical : remainingVertical;\n  const newHeight = prev.height + finalVerticalIncrement;\n  const maxReach = getMaxHorizontalDistance(finalVerticalIncrement) - marginSafety;\n  const gap = Math.floor(Math.min(rand() * (maxReach - 2) + 2, 13));\n  let direction = rand() < 0.5 ? 1 : -1;\n  let posStartX;\n  if (direction === 1) {\n    if (prev.posEndX + gap + minWidth <= maxX) {\n      posStartX = prev.posEndX + gap;\n    } else if (prev.posStartX - gap - minWidth >= 0) {\n      direction = -1;\n      posStartX = prev.posStartX - gap - minWidth;\n    } else {\n      posStartX = Math.max(0, maxX - minWidth);\n    }\n  } else {\n    if (prev.posStartX - gap - minWidth >= 0) {\n      posStartX = prev.posStartX - gap - minWidth;\n    } else if (prev.posEndX + gap + minWidth <= maxX) {\n      direction = 1;\n      posStartX = prev.posEndX + gap;\n    } else {\n      posStartX = 0;\n    }\n  }\n  const width = Math.min(Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth, maxX - posStartX);\n  const posEndX = posStartX + width;\n\n  // La piattaforma finale è il traguardo \"T\"\n  platforms.push({\n    type: \"T\",\n    height: newHeight,\n    posStartX,\n    posEndX\n  });\n  return platforms;\n}\nfunction EmuSchermo({\n  pressedButtons\n}) {\n  _s();\n  const ballSize = 4;\n  const horizontalAcceleration = 0.2;\n  const maxHorizontalSpeed = 1.2;\n  const friction = 0.1;\n  const jumpVelocity = 6;\n  const gravity = -0.5;\n  const [level, setLevel] = useState(1);\n  const [LEVEL, SETLEVEL] = useState(generateLevel(1));\n  const platformsRef = useRef(LEVEL);\n  useEffect(() => {\n    platformsRef.current = LEVEL;\n  }, [LEVEL]);\n  const [ball, setBall] = useState({\n    x: 2,\n    y: 0,\n    vx: 0,\n    vy: 0\n  });\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      setBall(prev => {\n        let {\n          x,\n          y,\n          vx,\n          vy\n        } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione input orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) vx -= horizontalAcceleration;\n        if (currentPressedButtons[BUTTONS.RIGHT]) vx += horizontalAcceleration;\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          vx = vx > 0 ? Math.max(vx - friction, 0) : Math.min(vx + friction, 0);\n        }\n        vx = Math.min(Math.max(vx, -maxHorizontalSpeed), maxHorizontalSpeed);\n\n        // Salto solo se a terra o su piattaforma\n        const isOnGroundOrPlatform = prev.y === 0 || platformsRef.current.some(p => {\n          const platformTop = p.height + 2;\n          const horizontalOverlap = prev.x <= p.posEndX && prev.x + ballSize >= p.posStartX;\n          return prev.y === platformTop && horizontalOverlap;\n        });\n        if (currentPressedButtons[BUTTONS.A] && isOnGroundOrPlatform) {\n          vy = jumpVelocity;\n        }\n        vy += gravity;\n        let newY = y + vy;\n        let newX = x + vx;\n\n        // Collisioni con piattaforme\n        let collided = false;\n        platformsRef.current.forEach(platform => {\n          const platformTop = platform.height + 2; // Top della piattaforma (2% di spessore)\n          const platformBottom = platform.height; // Base della piattaforma\n\n          // 1. Controllo overlap orizzontale\n          const horizontalOverlap = newX < platform.posEndX && newX + ballSize > platform.posStartX;\n\n          // 2. Controllo overlap verticale\n          const verticalOverlap = newY <= platformTop && newY + ballSize >= platformBottom;\n\n          // 3. Determinazione direzione collisione\n          if (horizontalOverlap && verticalOverlap) {\n            const prevBottom = prev.y + ballSize;\n            if (prevBottom <= platformBottom && vy > 0) {\n              // Collisione dal basso (salto contro piattaforma)\n              newY = platformBottom - ballSize;\n              vy = 0;\n            } else if (vy <= 0) {\n              // Collisione dall'alto (atterraggio su piattaforma)\n              newY = platformTop;\n              vy = 0;\n            }\n            collided = true;\n          }\n        });\n\n        // Collisione con il terreno solo se non abbiamo colliso con piattaforme\n        if (!collided && newY < 0) {\n          newY = 0;\n          vy = 0;\n        }\n\n        // Clamping orizzontale\n        newX = Math.max(0, Math.min(newX, 100 - ballSize));\n        platformsRef.current.forEach(platform => {\n          if (platform.type === \"s\") {\n            const spikeLeft = platform.posStartX;\n            const spikeRight = platform.posEndX;\n            const spikeTop = platform.height + 4;\n            const spikeBottom = platform.height;\n            const horizontalCollision = x + ballSize > spikeLeft && x < spikeRight;\n            const verticalCollision = y < spikeTop && y + ballSize > spikeBottom && vy <= 0;\n            if (horizontalCollision && verticalCollision) {\n              newX = 2;\n              newY = 0;\n              vx = 0;\n              vy = 0;\n              SETLEVEL(generateLevel(level));\n            }\n          }\n          if (platform.type === \"T\") {\n            const spikeLeft = platform.posStartX;\n            const spikeRight = platform.posEndX;\n            const spikeTop = platform.height + 3;\n            const spikeBottom = platform.height;\n            const horizontalCollision = x + ballSize > spikeLeft && x < spikeRight;\n            const verticalCollision = y < spikeTop && y + ballSize > spikeBottom && vy <= 0;\n            if (horizontalCollision && verticalCollision) {\n              const newLevel = level + 1;\n              setLevel(newLevel);\n              SETLEVEL(generateLevel(newLevel)); // Aggiorna lo stato correttamente\n              newX = 2;\n              newY = 0;\n              vx = 0;\n              vy = 0;\n            }\n          }\n        });\n        return {\n          x: newX,\n          y: newY,\n          vx,\n          vy\n        };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [level, ballSize, horizontalAcceleration, friction, maxHorizontalSpeed, jumpVelocity, gravity]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emu-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ball\",\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`,\n        width: `${ballSize}%`,\n        height: `${ballSize + 2}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this), LEVEL.map((item, i) => {\n      if (item.type === \"T\") {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"t-platform\",\n          style: {\n            left: `${item.posStartX}%`,\n            width: `${item.posEndX - item.posStartX}%`,\n            bottom: `${item.height}%`,\n            height: \"2%\"\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }, this);\n      } else if (item.type === \"p\") {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"platform\",\n          style: {\n            left: `${item.posStartX}%`,\n            width: `${item.posEndX - item.posStartX}%`,\n            bottom: `${item.height}%`,\n            height: \"2%\"\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spike\",\n          style: {\n            left: `${item.posStartX}%`,\n            width: `${item.posEndX - item.posStartX}%`,\n            bottom: `${item.height}%`,\n            height: \"2%\"\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this);\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 5\n  }, this);\n}\n_s(EmuSchermo, \"W9HxADwyY9lDZR10Sc6DM7DCH8k=\");\n_c = EmuSchermo;\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ballSize","horizontalAcceleration","maxHorizontalSpeed","friction","jumpVelocity","gravity","BUTTONS","A","B","START","SELECT","LEFT","RIGHT","screenHeight","maxX","minWidth","maxWidth","minVertical","maxVertical","marginSafety","a","Math","floor","random","c","createSeededRandom","seed","m","state","getFlightTime","dy","sqrt","getMaxHorizontalDistance","t","generateLevel","rand","platforms","baseHeight","firstWidth","firstPosStartX","firstPosEndX","push","type","height","posStartX","posEndX","prev","verticalIncrement","newHeight","maxReach","gap","min","direction","max","width","platform","remainingVertical","finalVerticalIncrement","EmuSchermo","pressedButtons","_s","level","setLevel","LEVEL","SETLEVEL","platformsRef","current","ball","setBall","x","y","vx","vy","pressedButtonsRef","animationFrameId","update","currentPressedButtons","isOnGroundOrPlatform","some","p","platformTop","horizontalOverlap","newY","newX","collided","forEach","platformBottom","verticalOverlap","prevBottom","spikeLeft","spikeRight","spikeTop","spikeBottom","horizontalCollision","verticalCollision","newLevel","requestAnimationFrame","cancelAnimationFrame","className","children","style","left","bottom","fileName","_jsxFileName","lineNumber","columnNumber","map","item","i","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\n\nconst ballSize = 4;\nconst horizontalAcceleration = 0.2;\nconst maxHorizontalSpeed = 1.2;\nconst friction = 0.1;\nconst jumpVelocity = 4;\nconst gravity = -0.5;\n\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  LEFT: 7,\n  RIGHT: 8,\n};\n\n// Parametri per la generazione\nconst screenHeight = 60; // Altezza massima dello schermo\nconst maxX = 100;        // Larghezza massima orizzontale\nconst minWidth = 100;\nconst maxWidth = 30;\nconst minVertical = 5;\nconst maxVertical = 13;\nconst marginSafety = 2;  // Margine di sicurezza orizzontale per il salto\n\n// Parametri per la generazione pseudo-casuale\nconst a = Math.floor(Math.random() * 10000000000);\nconst c = Math.floor(Math.random() * 10000000000);\n\nfunction createSeededRandom(seed) {\n  const m = 2 ** 32;\n  let state = seed;\n  return function () {\n    state = (a * state + c) % m;\n    return state / m;\n  };\n}\n\n// Funzione che calcola il tempo di volo disponibile per un salto data la differenza verticale dy\nfunction getFlightTime(dy) {\n  // Se il target è sopra (dy > 0) il tempo di volo è minore\n  if (dy > 0) {\n    // Risolve: 0.5*gravity*t^2 + jumpVelocity*t - dy = 0\n    // Poiché gravity è negativo, usiamo la formula corretta per ottenere il tempo positivo\n    return (jumpVelocity + Math.sqrt(jumpVelocity * jumpVelocity + (-2 * gravity * dy))) / (-gravity);\n  } else {\n    // Se il target è allo stesso livello o più in basso, consideriamo il tempo d'aria massimo (salto completo)\n    return 2 * jumpVelocity / (-gravity);\n  }\n}\n\n// Calcola la distanza orizzontale massima raggiungibile per una data differenza verticale dy\nfunction getMaxHorizontalDistance(dy) {\n  const t = getFlightTime(dy);\n  return maxHorizontalSpeed * t;\n}\n\nfunction generateLevel(seed) {\n  const rand = createSeededRandom(seed);\n  const platforms = [];\n\n  // Genera la piattaforma di partenza (base)\n  const baseHeight = 20;\n  const firstWidth = Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth;\n  const firstPosStartX = Math.floor(rand() * (maxX - firstWidth));\n  const firstPosEndX = firstPosStartX + firstWidth;\n  platforms.push({\n    type: 'p', // piattaforma hazard: se ci salti sopra, il livello si riavvia\n    height: baseHeight,\n    posStartX: firstPosStartX,\n    posEndX: firstPosEndX\n  });\n\n  let prev = platforms[0];\n\n  // Genera piattaforme intermedie fino a rimanere entro screenHeight\n  // L'ultima piattaforma verrà forzata ad essere il traguardo (T)\n  while (true) {\n    // Scegli un incremento verticale che non superi l'altezza massima dello schermo\n    const verticalIncrement = Math.floor(rand() * (maxVertical - minVertical + 1)) + minVertical;\n    const newHeight = prev.height + verticalIncrement;\n    if (newHeight > screenHeight - 10) { \n      // Se il prossimo salto supererebbe quasi lo screenHeight, usciamo dal ciclo.\n      break;\n    }\n    \n    // Calcola la distanza massima orizzontale raggiungibile per questo salto\n    const maxReach = getMaxHorizontalDistance(verticalIncrement) - marginSafety;\n    \n    // Per sicurezza, limitiamo il gap tra le piattaforme a un valore ragionevole (almeno 2 e al massimo quanto raggiungibile o un valore fisso)\n    const gap = Math.floor(Math.min(\n      (rand() * (maxReach - 2) + 2),\n      13  // oppure si può usare 13 se si preferisce una soglia fissa\n    ));\n    \n    // Scegli casualmente la direzione: 1 = a destra, -1 = a sinistra\n    let direction = rand() < 0.5 ? 1 : -1;\n    let posStartX;\n    \n    if (direction === 1) {\n      // Prova a posizionare a destra della precedente piattaforma\n      if (prev.posEndX + gap + minWidth <= maxX) {\n        posStartX = prev.posEndX + gap;\n      } else if (prev.posStartX - gap - minWidth >= 0) {\n        // Se non c'è spazio a destra, prova a sinistra\n        direction = -1;\n        posStartX = prev.posStartX - gap - minWidth;\n      } else {\n        // Forza il posizionamento in caso di spazio ristretto\n        posStartX = Math.max(0, maxX - minWidth);\n      }\n    } else {\n      // Prova a posizionare a sinistra della precedente\n      if (prev.posStartX - gap - minWidth >= 0) {\n        posStartX = prev.posStartX - gap - minWidth;\n      } else if (prev.posEndX + gap + minWidth <= maxX) {\n        // Se non c'è spazio a sinistra, prova a destra\n        direction = 1;\n        posStartX = prev.posEndX + gap;\n      } else {\n        posStartX = 0;\n      }\n    }\n    \n    // La larghezza della piattaforma la scegliamo casualmente entro i limiti, senza superare il bordo\n    const width = Math.min(\n      Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth,\n      maxX - posStartX\n    );\n    const posEndX = posStartX + width;\n    \n    // Determina il tipo: di default è \"p\" (hazard), ma c'è una possibilità del 20% di aggiungere spike (tipo \"s\")\n    let type = \"p\";\n    if (rand() < 0.2) {\n      type = \"s\";\n    }\n    \n    const platform = {\n      type,\n      height: newHeight,\n      posStartX,\n      posEndX\n    };\n    platforms.push(platform);\n    prev = platform;\n  }\n  \n  // Aggiungi la piattaforma finale \"T\" (traguardo) in una posizione raggiungibile dall'ultima piattaforma\n  // Per farlo, scegliamo un incremento verticale che faccia rimanere il traguardo entro lo screenHeight\n  const remainingVertical = screenHeight - prev.height;\n  // Se remainingVertical è troppo piccolo, possiamo impostare un piccolo incremento\n  const finalVerticalIncrement = remainingVertical > minVertical ? \n    Math.floor(rand() * (Math.min(maxVertical, remainingVertical) - minVertical + 1)) + minVertical :\n    remainingVertical;\n  const newHeight = prev.height + finalVerticalIncrement;\n  const maxReach = getMaxHorizontalDistance(finalVerticalIncrement) - marginSafety;\n  const gap = Math.floor(Math.min((rand() * (maxReach - 2) + 2), 13));\n  let direction = rand() < 0.5 ? 1 : -1;\n  let posStartX;\n  \n  if (direction === 1) {\n    if (prev.posEndX + gap + minWidth <= maxX) {\n      posStartX = prev.posEndX + gap;\n    } else if (prev.posStartX - gap - minWidth >= 0) {\n      direction = -1;\n      posStartX = prev.posStartX - gap - minWidth;\n    } else {\n      posStartX = Math.max(0, maxX - minWidth);\n    }\n  } else {\n    if (prev.posStartX - gap - minWidth >= 0) {\n      posStartX = prev.posStartX - gap - minWidth;\n    } else if (prev.posEndX + gap + minWidth <= maxX) {\n      direction = 1;\n      posStartX = prev.posEndX + gap;\n    } else {\n      posStartX = 0;\n    }\n  }\n  \n  const width = Math.min(\n    Math.floor(rand() * (maxWidth - minWidth + 1)) + minWidth,\n    maxX - posStartX\n  );\n  const posEndX = posStartX + width;\n  \n  // La piattaforma finale è il traguardo \"T\"\n  platforms.push({\n    type: \"T\",\n    height: newHeight,\n    posStartX,\n    posEndX\n  });\n  \n  return platforms;\n}\n\n\n\nfunction EmuSchermo({ pressedButtons }) {\n  const ballSize = 4;\n  const horizontalAcceleration = 0.2;\n  const maxHorizontalSpeed = 1.2;\n  const friction = 0.1;\n  const jumpVelocity = 6;\n  const gravity = -0.5;\n  const [level, setLevel] = useState(1);\n  const [LEVEL, SETLEVEL] = useState(generateLevel(1));\n  const platformsRef = useRef(LEVEL);\n\n  useEffect(() => {\n    platformsRef.current = LEVEL;\n  }, [LEVEL]);\n\n  const [ball, setBall] = useState({\n    x: 2,\n    y: 0,\n    vx: 0,\n    vy: 0,\n  });\n\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  const animationFrameId = useRef(null);\n\n  useEffect(() => {\n    const update = () => {\n      setBall((prev) => {\n        let { x, y, vx, vy } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione input orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) vx -= horizontalAcceleration;\n        if (currentPressedButtons[BUTTONS.RIGHT]) vx += horizontalAcceleration;\n\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          vx = vx > 0 ? Math.max(vx - friction, 0) : Math.min(vx + friction, 0);\n        }\n\n        vx = Math.min(Math.max(vx, -maxHorizontalSpeed), maxHorizontalSpeed);\n\n        // Salto solo se a terra o su piattaforma\n        const isOnGroundOrPlatform =\n          prev.y === 0 ||\n          platformsRef.current.some(p => {\n            const platformTop = p.height + 2;\n            const horizontalOverlap = (\n              prev.x <= p.posEndX &&\n              (prev.x + ballSize) >= p.posStartX\n            );\n            return prev.y === platformTop && horizontalOverlap;\n          });\n\n        if (currentPressedButtons[BUTTONS.A] && isOnGroundOrPlatform) {\n          vy = jumpVelocity;\n        }\n\n        vy += gravity;\n        let newY = y + vy;\n        let newX = x + vx;\n\n        // Collisioni con piattaforme\n        let collided = false;\n\n        platformsRef.current.forEach(platform => {\n          const platformTop = platform.height + 2; // Top della piattaforma (2% di spessore)\n          const platformBottom = platform.height;   // Base della piattaforma\n\n          // 1. Controllo overlap orizzontale\n          const horizontalOverlap = (\n            newX < platform.posEndX &&\n            (newX + ballSize) > platform.posStartX\n          );\n\n          // 2. Controllo overlap verticale\n          const verticalOverlap = (\n            newY <= platformTop &&\n            (newY + ballSize) >= platformBottom\n          );\n\n          // 3. Determinazione direzione collisione\n          if (horizontalOverlap && verticalOverlap) {\n            const prevBottom = prev.y + ballSize;\n            if (prevBottom <= platformBottom && vy > 0) {\n              // Collisione dal basso (salto contro piattaforma)\n              newY = platformBottom - ballSize;\n              vy = 0;\n            } else if (vy <= 0) {\n              // Collisione dall'alto (atterraggio su piattaforma)\n              newY = platformTop;\n              vy = 0;\n            }\n            collided = true;\n          }\n        });\n\n        // Collisione con il terreno solo se non abbiamo colliso con piattaforme\n        if (!collided && newY < 0) {\n          newY = 0;\n          vy = 0;\n        }\n\n        // Clamping orizzontale\n        newX = Math.max(0, Math.min(newX, 100 - ballSize));\n\n        platformsRef.current.forEach(platform => {\n          if (platform.type === \"s\") {\n            const spikeLeft = platform.posStartX;\n            const spikeRight = platform.posEndX;\n            const spikeTop = platform.height + 4;\n            const spikeBottom = platform.height;\n\n            const horizontalCollision = (\n              x + ballSize > spikeLeft &&\n              x < spikeRight\n            );\n\n            const verticalCollision = (\n              y  < spikeTop &&\n              y + ballSize  > spikeBottom &&\n              vy <= 0\n            );\n\n            if (horizontalCollision && verticalCollision) {\n              newX = 2;\n              newY = 0;\n              vx = 0;\n              vy = 0;\n              SETLEVEL(generateLevel(level));\n            }\n          }\n          if (platform.type === \"T\") {\n            const spikeLeft = platform.posStartX;\n            const spikeRight = platform.posEndX;\n            const spikeTop = platform.height + 3;\n            const spikeBottom = platform.height ;\n\n            const horizontalCollision = (\n              x + ballSize > spikeLeft &&\n              x < spikeRight\n            );\n\n            const verticalCollision = (\n              y < spikeTop &&\n              y + ballSize > spikeBottom &&\n              vy <= 0\n            );\n\n            if (horizontalCollision && verticalCollision) {\n              const newLevel = level + 1;\n              setLevel(newLevel);\n              SETLEVEL(generateLevel(newLevel)); // Aggiorna lo stato correttamente\n              newX = 2;\n              newY = 0;\n              vx = 0;\n              vy = 0;\n            }\n          }\n        });\n        return { x: newX, y: newY, vx, vy };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [level, ballSize, horizontalAcceleration, friction, maxHorizontalSpeed, jumpVelocity, gravity]);\n\n  return (\n    <div className=\"emu-container\">\n      <div\n        className=\"ball\"\n        style={{\n          left: `${ball.x}%`,\n          bottom: `${ball.y}%`,\n          width: `${ballSize}%`,\n          height: `${ballSize + 2}%`,\n        }}\n      ></div>\n\n      {LEVEL.map((item, i) => {\n        if (item.type === \"T\") {\n          return (\n            <div\n              key={i}\n              className=\"t-platform\"\n              style={{\n                left: `${item.posStartX}%`,\n                width: `${item.posEndX - item.posStartX}%`,\n                bottom: `${item.height}%`,\n                height: \"2%\",\n              }}\n            />\n          );\n        } else if (item.type === \"p\") {\n          return (\n            <div\n              key={i}\n              className=\"platform\"\n              style={{\n                left: `${item.posStartX}%`,\n                width: `${item.posEndX - item.posStartX}%`,\n                bottom: `${item.height}%`,\n                height: \"2%\",\n              }}\n            />\n          );\n        } else {\n          return (\n            <div\n              key={i}\n              className=\"spike\"\n              style={{\n                left: `${item.posStartX}%`,\n                width: `${item.posEndX - item.posStartX}%`,\n                bottom: `${item.height}%`,\n                height: \"2%\",\n              }}\n            />\n          );\n        }\n      })}\n    </div>\n  );\n}\n\nexport default EmuSchermo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}