{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\n\n// Costanti per la fisica della pallina\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst horizontalAcceleration = 0.2;\nconst maxHorizontalSpeed = 2;\nconst friction = 0.1;\nconst jumpVelocity = 7;\nconst gravity = -0.5;\nconst BALL_SIZE = 5; // dimensione in percentuale (larghezza e altezza)\n\nfunction EmuSchermo() {\n  _s();\n  // Stato della pallina: posizione, velocità, stato sul pavimento\n  const [ball, setBall] = useState({\n    x: 50,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    isOnGround: true\n  });\n\n  // Stato per le vite\n  const [lives, setLives] = useState(3);\n\n  // Array di oggetti che rappresentano piattaforme volanti e parti spinate\n  // Le piattaforme hanno proprietà: x, y, width, height, dx (velocità orizzontale) e type (\"platform\" oppure \"spike\")\n  const [platforms, setPlatforms] = useState([{\n    id: 1,\n    x: 10,\n    y: 30,\n    width: 20,\n    height: 5,\n    dx: 0.15,\n    type: \"platform\"\n  }, {\n    id: 2,\n    x: 60,\n    y: 50,\n    width: 20,\n    height: 5,\n    dx: -0.2,\n    type: \"platform\"\n  }, {\n    id: 3,\n    x: 40,\n    y: 70,\n    width: 15,\n    height: 5,\n    dx: 0.1,\n    type: \"spike\"\n  }]);\n\n  // Riferimento per tenere traccia dei tasti premuti const keysPressedRef = useRef({});\n\n  useEffect(() => {\n    const handleKeyDown = e => {\n      keysPressedRef.current[e.code] = true;\n    };\n    const handleKeyUp = e => {\n      keysPressedRef.current[e.code] = false;\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n  const animationFrameRef = useRef(null);\n\n  // Funzione per il controllo delle collisioni tra la pallina e un rettangolo (piattaforma o spike) const isColliding = (ballObj, rect) => { // Approssimiamo la pallina come un quadrato di dimensione BALL_SIZE return ( ballObj.x < rect.x + rect.width && ballObj.x + BALL_SIZE > rect.x && ballObj.y < rect.y + rect.height && ballObj.y + BALL_SIZE > rect.y ); };\n\n  // Funzione per resettare la pallina (in caso di collisione con uno spike) const resetBall = () => { setBall({ x: 50, y: 0, vx: 0, vy: 0, isOnGround: true }); };\n\n  useEffect(() => {\n    const update = () => {\n      setBall(prev => {\n        let {\n          x,\n          y,\n          vx,\n          vy,\n          isOnGround\n        } = prev;\n        const keys = keysPressedRef.current;\n        // Movimento orizzontale con le frecce\n        if (keys[\"ArrowLeft\"]) {\n          vx -= horizontalAcceleration;\n        }\n        if (keys[\"ArrowRight\"]) {\n          vx += horizontalAcceleration;\n        }\n        // Applica attrito se nessun tasto laterale è premuto\n        if (!keys[\"ArrowLeft\"] && !keys[\"ArrowRight\"]) {\n          if (vx > 0) vx = Math.max(vx - friction, 0);\n          if (vx < 0) vx = Math.min(vx + friction, 0);\n        }\n        // Limita la velocità orizzontale\n        vx = Math.max(Math.min(vx, maxHorizontalSpeed), -maxHorizontalSpeed);\n\n        // Salto: se viene premuta la barra spaziatrice e la pallina è sul pavimento o su una piattaforma\n        if (keys[\"Space\"] && isOnGround) {\n          vy = jumpVelocity;\n          isOnGround = false;\n        }\n\n        // Applica gravità\n        vy += gravity;\n\n        // Aggiorna le posizioni\n        x += vx;\n        y += vy;\n\n        // Gestione della collisione con il \"pavimento\" (y = 0)\n        if (y < 0) {\n          y = 0;\n          vy = 0;\n          isOnGround = true;\n        }\n\n        // Limita il movimento orizzontale nel contenitore (da 0% a 95%)\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 95) {\n          x = 95;\n          vx = 0;\n        }\n\n        // Controlla le collisioni con ogni piattaforma/spike\n        platforms.forEach(p => {\n          if (isColliding({\n            x,\n            y\n          }, p)) {\n            if (p.type === \"platform\") {\n              // Se la pallina sta atterrando (vy negativo) e colpisce dall'alto, \"atterra\" sulla piattaforma\n              if (vy <= 0 && y >= p.y + p.height - 2) {\n                y = p.y + p.height;\n                vy = 0;\n                isOnGround = true;\n              }\n            } else if (p.type === \"spike\") {\n              // Collisione con uno spike: toglie una vita e resetta la pallina\n              setLives(prevLives => Math.max(prevLives - 1, 0));\n              resetBall();\n            }\n          }\n        });\n        return {\n          x,\n          y,\n          vx,\n          vy,\n          isOnGround\n        };\n      });\n\n      // Aggiorna le posizioni delle piattaforme\n      setPlatforms(prevPlatforms => prevPlatforms.map(p => {\n        let newX = p.x + p.dx;\n        // Inverte direzione se raggiunge il bordo (0% o 100% - larghezza)\n        if (newX < 0 || newX + p.width > 100) {\n          p.dx = -p.dx;\n          newX = p.x + p.dx;\n        }\n        return {\n          ...p,\n          x: newX\n        };\n      }));\n\n      // Controlla se il gioco è finito (lives esaurite)\n      if (lives <= 0) {\n        cancelAnimationFrame(animationFrameRef.current);\n        // Puoi aggiungere logica per la \"game over\" (es. mostrare un messaggio o un bottone per riprovare)\n        return;\n      }\n      animationFrameRef.current = requestAnimationFrame(update);\n    };\n    animationFrameRef.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameRef.current);\n  }, [lives, platforms]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emu-container\",\n    children: [\" \", \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lives-display\",\n      children: [\"Vite: \", lives]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 79\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ball\",\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 3\n    }, this), platforms.map(p => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: p.type === \"platform\" ? \"platform\" : \"spike\",\n      style: {\n        left: `${p.x}%`,\n        bottom: `${p.y}%`,\n        width: `${p.width}%`,\n        height: `${p.height}%`\n      }\n    }, p.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 14\n  }, this);\n}\n_s(EmuSchermo, \"7cxESvC8DMtm3FJLnZjW2aqClQU=\");\n_c = EmuSchermo;\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","horizontalAcceleration","maxHorizontalSpeed","friction","jumpVelocity","gravity","BALL_SIZE","EmuSchermo","_s","ball","setBall","x","y","vx","vy","isOnGround","lives","setLives","platforms","setPlatforms","id","width","height","dx","type","handleKeyDown","e","keysPressedRef","current","code","handleKeyUp","window","addEventListener","removeEventListener","animationFrameRef","update","prev","keys","Math","max","min","forEach","p","isColliding","prevLives","resetBall","prevPlatforms","map","newX","cancelAnimationFrame","requestAnimationFrame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","left","bottom","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\"; import \"./EmuSchermo.css\";\n\n// Costanti per la fisica della pallina\nconst horizontalAcceleration = 0.2;\nconst maxHorizontalSpeed = 2;\nconst friction = 0.1;\nconst jumpVelocity = 7;\nconst gravity = -0.5;\n\nconst BALL_SIZE = 5; // dimensione in percentuale (larghezza e altezza)\n\nfunction EmuSchermo() { // Stato della pallina: posizione, velocità, stato sul pavimento\nconst [ball, setBall] = useState({ x: 50, \n y: 0,\nvx: 0,\n vy: 0, \n isOnGround: true, });\n\n// Stato per le vite\nconst [lives, setLives] = useState(3);\n\n// Array di oggetti che rappresentano piattaforme volanti e parti spinate\n// Le piattaforme hanno proprietà: x, y, width, height, dx (velocità orizzontale) e type (\"platform\" oppure \"spike\")\nconst [platforms, setPlatforms] = useState([\n    { id: 1, x: 10, y: 30, width: 20, height: 5, dx: 0.15, type: \"platform\" },\n     { id: 2, x: 60, y: 50, width: 20, height: 5, dx: -0.2, type: \"platform\" },\n      { id: 3, x: 40, y: 70, width: 15, height: 5, dx: 0.1, type: \"spike\" }\n    ]);\n\n// Riferimento per tenere traccia dei tasti premuti const keysPressedRef = useRef({});\n\nuseEffect(() => { const handleKeyDown = (e) => { keysPressedRef.current[e.code] = true; };\nconst handleKeyUp = (e) => {\n    keysPressedRef.current[e.code] = false;\n  };\n  \n  window.addEventListener(\"keydown\", handleKeyDown);\n  window.addEventListener(\"keyup\", handleKeyUp);\n  return () => {\n    window.removeEventListener(\"keydown\", handleKeyDown);\n    window.removeEventListener(\"keyup\", handleKeyUp);\n  };\n}, []);\n\nconst animationFrameRef = useRef(null);\n\n// Funzione per il controllo delle collisioni tra la pallina e un rettangolo (piattaforma o spike) const isColliding = (ballObj, rect) => { // Approssimiamo la pallina come un quadrato di dimensione BALL_SIZE return ( ballObj.x < rect.x + rect.width && ballObj.x + BALL_SIZE > rect.x && ballObj.y < rect.y + rect.height && ballObj.y + BALL_SIZE > rect.y ); };\n\n// Funzione per resettare la pallina (in caso di collisione con uno spike) const resetBall = () => { setBall({ x: 50, y: 0, vx: 0, vy: 0, isOnGround: true }); };\n\nuseEffect(() => { const update = () => { setBall(prev => { let { x, y, vx, vy, isOnGround } = prev; const keys = keysPressedRef.current;\n        // Movimento orizzontale con le frecce\n        if (keys[\"ArrowLeft\"]) {\n            vx -= horizontalAcceleration;\n          }\n          if (keys[\"ArrowRight\"]) {\n            vx += horizontalAcceleration;\n          }\n          // Applica attrito se nessun tasto laterale è premuto\n          if (!keys[\"ArrowLeft\"] && !keys[\"ArrowRight\"]) {\n            if (vx > 0) vx = Math.max(vx - friction, 0);\n            if (vx < 0) vx = Math.min(vx + friction, 0);\n          }\n          // Limita la velocità orizzontale\n          vx = Math.max(Math.min(vx, maxHorizontalSpeed), -maxHorizontalSpeed);\n      \n          // Salto: se viene premuta la barra spaziatrice e la pallina è sul pavimento o su una piattaforma\n          if (keys[\"Space\"] && isOnGround) {\n            vy = jumpVelocity;\n            isOnGround = false;\n          }\n      \n          // Applica gravità\n          vy += gravity;\n      \n          // Aggiorna le posizioni\n          x += vx;\n          y += vy;\n      \n          // Gestione della collisione con il \"pavimento\" (y = 0)\n          if (y < 0) {\n            y = 0;\n            vy = 0;\n            isOnGround = true;\n          }\n      \n          // Limita il movimento orizzontale nel contenitore (da 0% a 95%)\n          if (x < 0) {\n            x = 0;\n            vx = 0;\n          }\n          if (x > 95) {\n            x = 95;\n            vx = 0;\n          }\n      \n          // Controlla le collisioni con ogni piattaforma/spike\n          platforms.forEach(p => {\n            if (isColliding({x, y}, p)) {\n              if (p.type === \"platform\") {\n                // Se la pallina sta atterrando (vy negativo) e colpisce dall'alto, \"atterra\" sulla piattaforma\n                if (vy <= 0 && y >= p.y + p.height - 2) {\n                  y = p.y + p.height;\n                  vy = 0;\n                  isOnGround = true;\n                }\n              } else if (p.type === \"spike\") {\n                // Collisione con uno spike: toglie una vita e resetta la pallina\n                setLives(prevLives => Math.max(prevLives - 1, 0));\n                resetBall();\n              }\n            }\n          });\n      \n          return { x, y, vx, vy, isOnGround };\n        });\n      \n        // Aggiorna le posizioni delle piattaforme\n        setPlatforms(prevPlatforms => prevPlatforms.map(p => {\n          let newX = p.x + p.dx;\n          // Inverte direzione se raggiunge il bordo (0% o 100% - larghezza)\n          if (newX < 0 || newX + p.width > 100) {\n            p.dx = -p.dx;\n            newX = p.x + p.dx;\n          }\n          return { ...p, x: newX };\n        }));\n      \n        // Controlla se il gioco è finito (lives esaurite)\n        if (lives <= 0) {\n          cancelAnimationFrame(animationFrameRef.current);\n          // Puoi aggiungere logica per la \"game over\" (es. mostrare un messaggio o un bottone per riprovare)\n          return;\n        }\n      \n        animationFrameRef.current = requestAnimationFrame(update);\n      };\n      \n      animationFrameRef.current = requestAnimationFrame(update);\n      return () => cancelAnimationFrame(animationFrameRef.current);\n    }, [lives, platforms]);\n\n    return ( <div className=\"emu-container\"> {/* Mostra il numero di vite */} <div className=\"lives-display\">Vite: {lives}</div>\n      {/* Render della pallina */}\n  <div\n    className=\"ball\"\n    style={{\n      left: `${ball.x}%`,\n      bottom: `${ball.y}%`\n    }}\n  />\n  \n  {/* Render delle piattaforme e degli spike */}\n  {platforms.map(p => (\n    <div\n      key={p.id}\n      className={p.type === \"platform\" ? \"platform\" : \"spike\"}\n      style={{\n        left: `${p.x}%`,\n        bottom: `${p.y}%`,\n        width: `${p.width}%`,\n        height: `${p.height}%`\n      }}\n    />\n  ))}\n</div>\n); \n}\n\nexport default EmuSchermo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}