{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { GAME_LEVELS } from \"./Levels\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8\n};\nconst LEVEL_TYPES = {\n  PLATFORM: \"platform\",\n  MOVING: \"moving\",\n  // BOUNCE: \"bounce\",    // Rimosso\n  // ENEMY: \"enemy\",      // Rimosso\n  FINISH: \"finish\",\n  SPIKE: \"spike\",\n  DISAPPEARING: \"disappear\"\n};\n\n// Costanti fisiche e dimensione della pallina\nconst ballSize = 6;\nconst horizontalAcceleration = 0.2;\nconst maxHorizontalSpeed = 2;\nconst friction = 0.1;\nconst jumpVelocity = 7;\nconst gravity = -0.5;\nfunction EmuSchermo({\n  pressedButtons\n}) {\n  _s();\n  var _GAME_LEVELS$currentL;\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [gameState, setGameState] = useState({\n    lives: 3,\n    isGameOver: false,\n    isLevelComplete: false\n  });\n  const [levelTransitioning, setLevelTransitioning] = useState(false);\n  const [disappearingPlatforms, setDisappearingPlatforms] = useState({});\n  const disappearingTimersRef = useRef({});\n  const [ball, setBall] = useState({\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    isOnGround: false,\n    isJumping: false\n  });\n\n  // Inizializza la posizione della pallina e resetta stati per il livello corrente\n  useEffect(() => {\n    if (GAME_LEVELS[currentLevel]) {\n      const {\n        startPosition\n      } = GAME_LEVELS[currentLevel];\n      setBall({\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false\n      });\n      setDisappearingPlatforms({});\n      Object.values(disappearingTimersRef.current).forEach(timer => clearTimeout(timer));\n      disappearingTimersRef.current = {};\n      setLevelTransitioning(false);\n      const container = document.querySelector('.emu-container');\n      if (container) {\n        container.classList.add('level-transition');\n        setTimeout(() => container.classList.remove('level-transition'), 500);\n      }\n    }\n  }, [currentLevel]);\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Funzione per il passaggio al livello successivo (con debounce)\n  const completeLevel = () => {\n    if (levelTransitioning) return;\n    setLevelTransitioning(true);\n    if (currentLevel < GAME_LEVELS.length - 1) {\n      setTimeout(() => {\n        setCurrentLevel(prev => prev + 1);\n        setLevelTransitioning(false);\n      }, 500);\n    } else {\n      setGameState(prev => ({\n        ...prev,\n        isGameOver: true,\n        isLevelComplete: true\n      }));\n    }\n  };\n  const playerDeath = () => {\n    setGameState(prev => {\n      const newLives = prev.lives - 1;\n      if (newLives <= 0) return {\n        ...prev,\n        lives: 0,\n        isGameOver: true\n      };\n      return {\n        ...prev,\n        lives: newLives\n      };\n    });\n    if (GAME_LEVELS[currentLevel]) {\n      const {\n        startPosition\n      } = GAME_LEVELS[currentLevel];\n      setBall({\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false\n      });\n    }\n  };\n\n  // Collisioni con piattaforme (considera solo PLATFORM, MOVING e DISAPPEARING)\n  const checkPlatformCollision = (x, y, vx, vy) => {\n    if (!GAME_LEVELS[currentLevel]) return {\n      collision: false\n    };\n    const elements = GAME_LEVELS[currentLevel].elements;\n    const ballBottom = y;\n    const ballTop = y + ballSize;\n    const ballLeft = x;\n    const ballRight = x + ballSize;\n    const tolerance = 2;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n\n      // Ignora piattaforme scomparse e gli elementi che non sono gestiti (es. BOUNCE e ENEMY)\n      if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[i]) continue;\n      if (![LEVEL_TYPES.PLATFORM, LEVEL_TYPES.MOVING, LEVEL_TYPES.DISAPPEARING].includes(element.type)) continue;\n      let elementX = element.x;\n      let elementY = element.y;\n      if (element.type === LEVEL_TYPES.MOVING) {\n        const time = Date.now() / 1000;\n        const cycle = Math.sin(time * element.speed);\n        elementX = element.x + element.moveX * cycle;\n        elementY = element.y + element.moveY * cycle;\n      }\n      const elementLeft = elementX;\n      const elementRight = elementX + element.width;\n      const elementTop = elementY + element.height;\n      const elementBottom = elementY;\n      if (ballRight > elementLeft && ballLeft < elementRight && ballTop > elementBottom && ballBottom < elementTop) {\n        const fromTop = ballBottom - elementTop;\n        const fromBottom = elementBottom - ballTop;\n        const fromLeft = ballRight - elementLeft;\n        const fromRight = elementRight - ballLeft;\n        const minPenetration = Math.min(Math.abs(fromTop), Math.abs(fromBottom), Math.abs(fromLeft), Math.abs(fromRight));\n\n        // Atterraggio sulla piattaforma\n        if (minPenetration === Math.abs(fromTop) && vy < 0) {\n          if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n            disappearingTimersRef.current[i] = setTimeout(() => {\n              setDisappearingPlatforms(prev => ({\n                ...prev,\n                [i]: true\n              }));\n            }, element.timeout || 1000);\n          }\n          return {\n            collision: true,\n            y: elementTop,\n            vy: 0,\n            isOnGround: true\n          };\n        }\n        // Collisione dal basso\n        if (minPenetration === Math.abs(fromBottom) && vy > 0) {\n          return {\n            collision: true,\n            y: elementBottom - ballSize,\n            vy: -vy * 0.2,\n            isOnGround: false\n          };\n        }\n        // Collisione da sinistra\n        if (minPenetration === Math.abs(fromLeft) && Math.abs(vx) > 0) {\n          return {\n            collision: true,\n            x: elementLeft - ballSize,\n            vx: 0\n          };\n        }\n        // Collisione da destra\n        if (minPenetration === Math.abs(fromRight) && Math.abs(vx) > 0) {\n          return {\n            collision: true,\n            x: elementRight,\n            vx: 0\n          };\n        }\n      }\n\n      // Controllo per atterraggio preciso\n      if (vy < 0 && ballBottom >= elementTop - tolerance && ballBottom <= elementTop + tolerance && ballRight > elementLeft + 1 && ballLeft < elementRight - 1) {\n        if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n          disappearingTimersRef.current[i] = setTimeout(() => {\n            setDisappearingPlatforms(prev => ({\n              ...prev,\n              [i]: true\n            }));\n          }, element.timeout || 1000);\n        }\n        return {\n          collision: true,\n          y: elementTop,\n          vy: 0,\n          isOnGround: true\n        };\n      }\n    }\n    return {\n      collision: false\n    };\n  };\n\n  // Gestione delle collisioni con ostacoli: ora controlla solo le SPIKE\n  const checkHazardCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.SPIKE) {\n        if (x < element.x + element.width && x + ballSize > element.x && y < element.y + element.height && y + ballSize > element.y) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Verifica se il giocatore ha raggiunto il traguardo\n  const checkFinishCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.FINISH) {\n        const finishSize = 10;\n        if (x < element.x + finishSize && x + ballSize > element.x && y < element.y + finishSize && y + ballSize > element.y) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Ciclo di aggiornamento (requestAnimationFrame)\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      if (gameState.isGameOver) return;\n      setBall(prev => {\n        let {\n          x,\n          y,\n          vx,\n          vy,\n          isOnGround,\n          isJumping\n        } = prev;\n        const currentPressed = pressedButtonsRef.current || {};\n        if (currentPressed[BUTTONS.LEFT]) vx -= horizontalAcceleration;\n        if (currentPressed[BUTTONS.RIGHT]) vx += horizontalAcceleration;\n        if (!currentPressed[BUTTONS.LEFT] && !currentPressed[BUTTONS.RIGHT]) {\n          if (vx > 0) vx = Math.max(vx - friction, 0);else if (vx < 0) vx = Math.min(vx + friction, 0);\n        }\n        vx = Math.min(Math.max(vx, -maxHorizontalSpeed), maxHorizontalSpeed);\n        if (currentPressed[BUTTONS.A] && isOnGround) {\n          vy = jumpVelocity;\n          isOnGround = false;\n          isJumping = true;\n        } else if (!currentPressed[BUTTONS.A]) {\n          isJumping = false;\n        }\n        vy += gravity;\n        const newX = x + vx;\n        const newY = y + vy;\n        const collision = checkPlatformCollision(newX, newY, vx, vy);\n        if (collision.collision) {\n          x = collision.x !== undefined ? collision.x : newX;\n          y = collision.y !== undefined ? collision.y : newY;\n          vx = collision.vx !== undefined ? collision.vx : vx;\n          vy = collision.vy !== undefined ? collision.vy : vy;\n          isOnGround = collision.isOnGround !== undefined ? collision.isOnGround : isOnGround;\n        } else {\n          x = newX;\n          y = newY;\n          isOnGround = false;\n        }\n        if (checkHazardCollision(x, y)) {\n          playerDeath();\n        }\n        if (checkFinishCollision(x, y)) {\n          completeLevel();\n        }\n        if (y < -10) {\n          playerDeath();\n          return {\n            x,\n            y: 0,\n            vx: 0,\n            vy: 0,\n            isOnGround: false,\n            isJumping: false\n          };\n        }\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 100 - ballSize) {\n          x = 100 - ballSize;\n          vx = 0;\n        }\n        if (currentPressed[BUTTONS.START] && GAME_LEVELS[currentLevel]) {\n          const {\n            startPosition\n          } = GAME_LEVELS[currentLevel];\n          return {\n            x: startPosition.x,\n            y: startPosition.y,\n            vx: 0,\n            vy: 0,\n            isOnGround: false,\n            isJumping: false\n          };\n        }\n        if (currentPressed[BUTTONS.SELECT] && !levelTransitioning) {\n          setLevelTransitioning(true);\n          setTimeout(() => {\n            setCurrentLevel(prev => (prev + 1) % GAME_LEVELS.length);\n            setLevelTransitioning(false);\n          }, 500);\n        }\n        if (currentPressed[BUTTONS.DOWN] && !isOnGround) {\n          vy -= 0.5;\n        }\n        return {\n          x,\n          y,\n          vx,\n          vy,\n          isOnGround,\n          isJumping\n        };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [currentLevel, gameState.isGameOver, levelTransitioning]);\n  const renderLevel = () => {\n    if (!GAME_LEVELS[currentLevel]) return null;\n    const level = GAME_LEVELS[currentLevel];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: level.elements.map((element, index) => {\n        // Ignora gli elementi di tipo DISAPPEARING se già scomparsi\n        if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[index]) return null;\n        // Ignora i COLLECTABLE (se non sono più gestiti) oppure gli ENEMY e BOUNCE\n        if (element.type === \"coin\" || element.type === \"bounce\" || element.type === \"enemy\") return null;\n        let elementX = element.x;\n        let elementY = element.y;\n        if (element.type === LEVEL_TYPES.MOVING) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n          elementY = element.y + element.moveY * cycle;\n        }\n        const commonStyle = {\n          left: `${elementX}%`,\n          bottom: `${elementY}%`,\n          width: `${element.width}%`,\n          height: `${element.height}%`\n        };\n        switch (element.type) {\n          case LEVEL_TYPES.PLATFORM:\n          case LEVEL_TYPES.MOVING:\n          case LEVEL_TYPES.DISAPPEARING:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform\",\n              style: commonStyle\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 22\n            }, this);\n          case LEVEL_TYPES.FINISH:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"finish\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: \"10%\",\n                height: \"10%\"\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.SPIKE:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spike\",\n              style: commonStyle\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 22\n            }, this);\n          default:\n            return null;\n        }\n      })\n    }, void 0, false);\n  };\n  const renderGameInterface = () => {\n    if (gameState.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: gameState.isLevelComplete ? \"Congratulazioni!\" : \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setCurrentLevel(0);\n            setGameState({\n              lives: 3,\n              isGameOver: false,\n              isLevelComplete: false\n            });\n            setLevelTransitioning(false);\n          },\n          children: \"Ricomincia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lives-display\",\n        children: [\"Vite: \", Array.from({\n          length: gameState.lives\n        }, (_, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"life-icon\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 68\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emu-container\",\n    style: {\n      backgroundColor: ((_GAME_LEVELS$currentL = GAME_LEVELS[currentLevel]) === null || _GAME_LEVELS$currentL === void 0 ? void 0 : _GAME_LEVELS$currentL.backgroundColor) || \"#87CEEB\"\n    },\n    children: [renderLevel(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ball\",\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`,\n        width: `${ballSize}%`,\n        height: `${ballSize}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), renderGameInterface()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 5\n  }, this);\n}\n_s(EmuSchermo, \"LiQi+dP8dnqaARczkisorWHXwVc=\");\n_c = EmuSchermo;\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GAME_LEVELS","jsxDEV","_jsxDEV","Fragment","_Fragment","BUTTONS","A","B","START","SELECT","UP","DOWN","LEFT","RIGHT","LEVEL_TYPES","PLATFORM","MOVING","FINISH","SPIKE","DISAPPEARING","ballSize","horizontalAcceleration","maxHorizontalSpeed","friction","jumpVelocity","gravity","EmuSchermo","pressedButtons","_s","_GAME_LEVELS$currentL","currentLevel","setCurrentLevel","gameState","setGameState","lives","isGameOver","isLevelComplete","levelTransitioning","setLevelTransitioning","disappearingPlatforms","setDisappearingPlatforms","disappearingTimersRef","ball","setBall","x","y","vx","vy","isOnGround","isJumping","startPosition","Object","values","current","forEach","timer","clearTimeout","container","document","querySelector","classList","add","setTimeout","remove","pressedButtonsRef","completeLevel","length","prev","playerDeath","newLives","checkPlatformCollision","collision","elements","ballBottom","ballTop","ballLeft","ballRight","tolerance","i","element","type","includes","elementX","elementY","time","Date","now","cycle","Math","sin","speed","moveX","moveY","elementLeft","elementRight","width","elementTop","height","elementBottom","fromTop","fromBottom","fromLeft","fromRight","minPenetration","min","abs","timeout","checkHazardCollision","checkFinishCollision","finishSize","animationFrameId","update","currentPressed","max","newX","newY","undefined","requestAnimationFrame","cancelAnimationFrame","renderLevel","level","children","map","index","commonStyle","left","bottom","className","style","fileName","_jsxFileName","lineNumber","columnNumber","renderGameInterface","onClick","Array","from","_","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { GAME_LEVELS } from \"./Levels\";\n\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8,\n};\n\nconst LEVEL_TYPES = {\n  PLATFORM: \"platform\",\n  MOVING: \"moving\",\n  // BOUNCE: \"bounce\",    // Rimosso\n  // ENEMY: \"enemy\",      // Rimosso\n  FINISH: \"finish\",\n  SPIKE: \"spike\",\n  DISAPPEARING: \"disappear\"\n};\n\n// Costanti fisiche e dimensione della pallina\nconst ballSize = 6;\nconst horizontalAcceleration = 0.2;\nconst maxHorizontalSpeed = 2;\nconst friction = 0.1;\nconst jumpVelocity = 7;\nconst gravity = -0.5;\n\nfunction EmuSchermo({ pressedButtons }) {\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [gameState, setGameState] = useState({\n    lives: 3,\n    isGameOver: false,\n    isLevelComplete: false,\n  });\n  const [levelTransitioning, setLevelTransitioning] = useState(false);\n  const [disappearingPlatforms, setDisappearingPlatforms] = useState({});\n  const disappearingTimersRef = useRef({});\n\n  const [ball, setBall] = useState({\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    isOnGround: false,\n    isJumping: false,\n  });\n\n  // Inizializza la posizione della pallina e resetta stati per il livello corrente\n  useEffect(() => {\n    if (GAME_LEVELS[currentLevel]) {\n      const { startPosition } = GAME_LEVELS[currentLevel];\n      setBall({\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false,\n      });\n      setDisappearingPlatforms({});\n      Object.values(disappearingTimersRef.current).forEach(timer => clearTimeout(timer));\n      disappearingTimersRef.current = {};\n      setLevelTransitioning(false);\n\n      const container = document.querySelector('.emu-container');\n      if (container) {\n        container.classList.add('level-transition');\n        setTimeout(() => container.classList.remove('level-transition'), 500);\n      }\n    }\n  }, [currentLevel]);\n\n  const pressedButtonsRef = useRef(pressedButtons);\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Funzione per il passaggio al livello successivo (con debounce)\n  const completeLevel = () => {\n    if (levelTransitioning) return;\n    setLevelTransitioning(true);\n    if (currentLevel < GAME_LEVELS.length - 1) {\n      setTimeout(() => {\n        setCurrentLevel(prev => prev + 1);\n        setLevelTransitioning(false);\n      }, 500);\n    } else {\n      setGameState(prev => ({ ...prev, isGameOver: true, isLevelComplete: true }));\n    }\n  };\n\n  const playerDeath = () => {\n    setGameState(prev => {\n      const newLives = prev.lives - 1;\n      if (newLives <= 0) return { ...prev, lives: 0, isGameOver: true };\n      return { ...prev, lives: newLives };\n    });\n    if (GAME_LEVELS[currentLevel]) {\n      const { startPosition } = GAME_LEVELS[currentLevel];\n      setBall({\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false,\n      });\n    }\n  };\n\n  // Collisioni con piattaforme (considera solo PLATFORM, MOVING e DISAPPEARING)\n  const checkPlatformCollision = (x, y, vx, vy) => {\n    if (!GAME_LEVELS[currentLevel]) return { collision: false };\n    const elements = GAME_LEVELS[currentLevel].elements;\n    const ballBottom = y;\n    const ballTop = y + ballSize;\n    const ballLeft = x;\n    const ballRight = x + ballSize;\n    const tolerance = 2;\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n\n      // Ignora piattaforme scomparse e gli elementi che non sono gestiti (es. BOUNCE e ENEMY)\n      if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[i]) continue;\n      if (![LEVEL_TYPES.PLATFORM, LEVEL_TYPES.MOVING, LEVEL_TYPES.DISAPPEARING].includes(element.type)) continue;\n\n      let elementX = element.x;\n      let elementY = element.y;\n      if (element.type === LEVEL_TYPES.MOVING) {\n        const time = Date.now() / 1000;\n        const cycle = Math.sin(time * element.speed);\n        elementX = element.x + element.moveX * cycle;\n        elementY = element.y + element.moveY * cycle;\n      }\n      const elementLeft = elementX;\n      const elementRight = elementX + element.width;\n      const elementTop = elementY + element.height;\n      const elementBottom = elementY;\n\n      if (ballRight > elementLeft && ballLeft < elementRight && ballTop > elementBottom && ballBottom < elementTop) {\n        const fromTop = ballBottom - elementTop;\n        const fromBottom = elementBottom - ballTop;\n        const fromLeft = ballRight - elementLeft;\n        const fromRight = elementRight - ballLeft;\n        const minPenetration = Math.min(Math.abs(fromTop), Math.abs(fromBottom), Math.abs(fromLeft), Math.abs(fromRight));\n\n        // Atterraggio sulla piattaforma\n        if (minPenetration === Math.abs(fromTop) && vy < 0) {\n          if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n            disappearingTimersRef.current[i] = setTimeout(() => {\n              setDisappearingPlatforms(prev => ({ ...prev, [i]: true }));\n            }, element.timeout || 1000);\n          }\n          return { collision: true, y: elementTop, vy: 0, isOnGround: true };\n        }\n        // Collisione dal basso\n        if (minPenetration === Math.abs(fromBottom) && vy > 0) {\n          return { collision: true, y: elementBottom - ballSize, vy: -vy * 0.2, isOnGround: false };\n        }\n        // Collisione da sinistra\n        if (minPenetration === Math.abs(fromLeft) && Math.abs(vx) > 0) {\n          return { collision: true, x: elementLeft - ballSize, vx: 0 };\n        }\n        // Collisione da destra\n        if (minPenetration === Math.abs(fromRight) && Math.abs(vx) > 0) {\n          return { collision: true, x: elementRight, vx: 0 };\n        }\n      }\n\n      // Controllo per atterraggio preciso\n      if (\n        vy < 0 &&\n        ballBottom >= elementTop - tolerance &&\n        ballBottom <= elementTop + tolerance &&\n        ballRight > elementLeft + 1 &&\n        ballLeft < elementRight - 1\n      ) {\n        if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n          disappearingTimersRef.current[i] = setTimeout(() => {\n            setDisappearingPlatforms(prev => ({ ...prev, [i]: true }));\n          }, element.timeout || 1000);\n        }\n        return { collision: true, y: elementTop, vy: 0, isOnGround: true };\n      }\n    }\n    return { collision: false };\n  };\n\n  // Gestione delle collisioni con ostacoli: ora controlla solo le SPIKE\n  const checkHazardCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.SPIKE) {\n        if (\n          x < element.x + element.width &&\n          x + ballSize > element.x &&\n          y < element.y + element.height &&\n          y + ballSize > element.y\n        ) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Verifica se il giocatore ha raggiunto il traguardo\n  const checkFinishCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.FINISH) {\n        const finishSize = 10;\n        if (\n          x < element.x + finishSize &&\n          x + ballSize > element.x &&\n          y < element.y + finishSize &&\n          y + ballSize > element.y\n        ) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Ciclo di aggiornamento (requestAnimationFrame)\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      if (gameState.isGameOver) return;\n      setBall(prev => {\n        let { x, y, vx, vy, isOnGround, isJumping } = prev;\n        const currentPressed = pressedButtonsRef.current || {};\n\n        if (currentPressed[BUTTONS.LEFT]) vx -= horizontalAcceleration;\n        if (currentPressed[BUTTONS.RIGHT]) vx += horizontalAcceleration;\n        if (!currentPressed[BUTTONS.LEFT] && !currentPressed[BUTTONS.RIGHT]) {\n          if (vx > 0) vx = Math.max(vx - friction, 0);\n          else if (vx < 0) vx = Math.min(vx + friction, 0);\n        }\n        vx = Math.min(Math.max(vx, -maxHorizontalSpeed), maxHorizontalSpeed);\n\n        if (currentPressed[BUTTONS.A] && isOnGround) {\n          vy = jumpVelocity;\n          isOnGround = false;\n          isJumping = true;\n        } else if (!currentPressed[BUTTONS.A]) {\n          isJumping = false;\n        }\n\n        vy += gravity;\n        const newX = x + vx;\n        const newY = y + vy;\n\n        const collision = checkPlatformCollision(newX, newY, vx, vy);\n        if (collision.collision) {\n          x = collision.x !== undefined ? collision.x : newX;\n          y = collision.y !== undefined ? collision.y : newY;\n          vx = collision.vx !== undefined ? collision.vx : vx;\n          vy = collision.vy !== undefined ? collision.vy : vy;\n          isOnGround = collision.isOnGround !== undefined ? collision.isOnGround : isOnGround;\n        } else {\n          x = newX;\n          y = newY;\n          isOnGround = false;\n        }\n\n        if (checkHazardCollision(x, y)) {\n          playerDeath();\n        }\n\n        if (checkFinishCollision(x, y)) {\n          completeLevel();\n        }\n\n        if (y < -10) {\n          playerDeath();\n          return { x, y: 0, vx: 0, vy: 0, isOnGround: false, isJumping: false };\n        }\n\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 100 - ballSize) {\n          x = 100 - ballSize;\n          vx = 0;\n        }\n\n        if (currentPressed[BUTTONS.START] && GAME_LEVELS[currentLevel]) {\n          const { startPosition } = GAME_LEVELS[currentLevel];\n          return { x: startPosition.x, y: startPosition.y, vx: 0, vy: 0, isOnGround: false, isJumping: false };\n        }\n\n        if (currentPressed[BUTTONS.SELECT] && !levelTransitioning) {\n          setLevelTransitioning(true);\n          setTimeout(() => {\n            setCurrentLevel(prev => (prev + 1) % GAME_LEVELS.length);\n            setLevelTransitioning(false);\n          }, 500);\n        }\n\n        if (currentPressed[BUTTONS.DOWN] && !isOnGround) {\n          vy -= 0.5;\n        }\n\n        return { x, y, vx, vy, isOnGround, isJumping };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [currentLevel, gameState.isGameOver, levelTransitioning]);\n\n  const renderLevel = () => {\n    if (!GAME_LEVELS[currentLevel]) return null;\n    const level = GAME_LEVELS[currentLevel];\n    return (\n      <>\n        {level.elements.map((element, index) => {\n          // Ignora gli elementi di tipo DISAPPEARING se già scomparsi\n          if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[index]) return null;\n          // Ignora i COLLECTABLE (se non sono più gestiti) oppure gli ENEMY e BOUNCE\n          if (element.type === \"coin\" || element.type === \"bounce\" || element.type === \"enemy\") return null;\n          \n          let elementX = element.x;\n          let elementY = element.y;\n          if (element.type === LEVEL_TYPES.MOVING) {\n            const time = Date.now() / 1000;\n            const cycle = Math.sin(time * element.speed);\n            elementX = element.x + element.moveX * cycle;\n            elementY = element.y + element.moveY * cycle;\n          }\n          const commonStyle = {\n            left: `${elementX}%`,\n            bottom: `${elementY}%`,\n            width: `${element.width}%`,\n            height: `${element.height}%`\n          };\n          switch (element.type) {\n            case LEVEL_TYPES.PLATFORM:\n            case LEVEL_TYPES.MOVING:\n            case LEVEL_TYPES.DISAPPEARING:\n              return <div key={index} className=\"platform\" style={commonStyle} />;\n            case LEVEL_TYPES.FINISH:\n              return (\n                <div\n                  key={index}\n                  className=\"finish\"\n                  style={{ left: `${elementX}%`, bottom: `${elementY}%`, width: \"10%\", height: \"10%\" }}\n                />\n              );\n            case LEVEL_TYPES.SPIKE:\n              return <div key={index} className=\"spike\" style={commonStyle} />;\n            default:\n              return null;\n          }\n        })}\n      </>\n    );\n  };\n\n  const renderGameInterface = () => {\n    if (gameState.isGameOver) {\n      return (\n        <div className=\"game-over\">\n          <h2>{gameState.isLevelComplete ? \"Congratulazioni!\" : \"Game Over\"}</h2>\n          <button onClick={() => {\n            setCurrentLevel(0);\n            setGameState({ lives: 3, isGameOver: false, isLevelComplete: false });\n            setLevelTransitioning(false);\n          }}>\n            Ricomincia\n          </button>\n        </div>\n      );\n    }\n    return (\n      <div className=\"game-info\">\n        <div className=\"lives-display\">\n          Vite: {Array.from({ length: gameState.lives }, (_, i) => <span key={i} className=\"life-icon\" />)}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"emu-container\" style={{ backgroundColor: GAME_LEVELS[currentLevel]?.backgroundColor || \"#87CEEB\" }}>\n      {renderLevel()}\n      <div\n        className=\"ball\"\n        style={{\n          left: `${ball.x}%`,\n          bottom: `${ball.y}%`,\n          width: `${ballSize}%`,\n          height: `${ballSize}%`\n        }}\n      ></div>\n      {renderGameInterface()}\n    </div>\n  );\n}\n\nexport default EmuSchermo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}