{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { GAME_LEVELS } from \"./Levels\"; // Importa i livelli dal file creato\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8\n};\nconst LEVEL_TYPES = {\n  PLATFORM: \"platform\",\n  MOVING: \"moving\",\n  BOUNCE: \"bounce\",\n  ENEMY: \"enemy\",\n  COLLECTABLE: \"coin\",\n  FINISH: \"finish\",\n  SPIKE: \"spike\",\n  DISAPPEARING: \"disappear\"\n};\nconst PHYSICS_CONFIG = {\n  ballSize: 6,\n  horizontalAcceleration: 0.2,\n  maxHorizontalSpeed: 2,\n  friction: 0.1,\n  jumpVelocity: 7,\n  gravity: -0.5,\n  bounceMultiplier: 1.5,\n  invulnerabilityDuration: 2000,\n  blinkInterval: 150,\n  collisionTolerance: 2\n};\nconst initialGameState = {\n  lives: 3,\n  score: 0,\n  collectables: 0,\n  isGameOver: false,\n  isLevelComplete: false\n};\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case 'RESET':\n      return {\n        ...initialGameState\n      };\n    case 'COLLECT_COIN':\n      return {\n        ...state,\n        score: state.score + 100,\n        collectables: state.collectables + 1\n      };\n    case 'LOSE_LIFE':\n      const newLives = state.lives - 1;\n      return {\n        ...state,\n        lives: newLives,\n        isGameOver: newLives <= 0\n      };\n    case 'COMPLETE_LEVEL':\n      return {\n        ...state,\n        isLevelComplete: true,\n        isGameOver: action.isFinalLevel\n      };\n    default:\n      return state;\n  }\n}\nfunction useCollisionDetection(level, collectedItems, disappearingPlatforms) {\n  _s();\n  const checkCollision = useCallback((ballX, ballY, ballVx, ballVy) => {\n    // Collision detection logic here\n    // (Moved from original checkPlatformCollision)\n    return {\n      collision: false\n    };\n  }, [level, collectedItems, disappearingPlatforms]);\n  return {\n    checkCollision\n  };\n}\n_s(useCollisionDetection, \"lJljdECk671/rjxPf/Fr2SE8+Eg=\");\nfunction EmuSchermo({\n  pressedButtons\n}) {\n  _s2();\n  var _GAME_LEVELS$currentL;\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [gameState, dispatch] = useReducer(gameReducer, initialGameState);\n  const [ball, setBall] = useState({\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    isOnGround: false\n  });\n  const [collectedItems, setCollectedItems] = useState(new Set());\n  const [disappearingPlatforms, setDisappearingPlatforms] = useState(new Set());\n  const [isInvulnerable, setIsInvulnerable] = useState(false);\n  const pressedButtonsRef = useRef(pressedButtons);\n  const disappearingTimersRef = useRef(new Map());\n  const invulnerabilityTimerRef = useRef(null);\n  const lastFrameTime = useRef(0);\n  const {\n    checkCollision\n  } = useCollisionDetection(GAME_LEVELS[currentLevel], collectedItems, disappearingPlatforms);\n\n  // Inizializza la posizione della pallina all'inizio del livello\n  useEffect(() => {\n    const level = GAME_LEVELS[currentLevel];\n    if (!level) return;\n    setBall({\n      x: level.startPosition.x,\n      y: level.startPosition.y,\n      vx: 0,\n      vy: 0,\n      isOnGround: false\n    });\n    setCollectedItems(new Set());\n    setDisappearingPlatforms(new Set());\n    disappearingTimersRef.current.clear();\n    const container = document.querySelector('.emu-container');\n    container === null || container === void 0 ? void 0 : container.classList.add('level-transition');\n    setTimeout(() => container === null || container === void 0 ? void 0 : container.classList.remove('level-transition'), 500);\n  }, [currentLevel]);\n\n  // Usiamo un ref per tenere traccia dell'ultimo valore di pressedButtons\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Verifica se c'è una collisione con una piattaforma\n  const checkPlatformCollision = (x, y, vx, vy) => {\n    if (!GAME_LEVELS[currentLevel]) return {\n      collision: false\n    };\n    const elements = GAME_LEVELS[currentLevel].elements;\n    const ballBottom = y;\n    const ballTop = y + ballSize;\n    const ballLeft = x;\n    const ballRight = x + ballSize;\n    const tolerance = 2; // Tolleranza per una collisione più precisa\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n\n      // Salta se la piattaforma è scomparsa\n      if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[i]) {\n        continue;\n      }\n      if (element.type === LEVEL_TYPES.PLATFORM || element.type === LEVEL_TYPES.MOVING || element.type === LEVEL_TYPES.BOUNCE || element.type === LEVEL_TYPES.DISAPPEARING) {\n        // Ottieni posizione effettiva per piattaforme in movimento\n        let elementX = element.x;\n        let elementY = element.y;\n        if (element.type === LEVEL_TYPES.MOVING) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n          elementY = element.y + element.moveY * cycle;\n        }\n        const elementLeft = elementX;\n        const elementRight = elementX + element.width;\n        const elementTop = elementY + element.height;\n        const elementBottom = elementY;\n\n        // Verifica se c'è una sovrapposizione tra la pallina e la piattaforma\n        if (ballRight > elementLeft && ballLeft < elementRight && ballTop > elementBottom && ballBottom < elementTop) {\n          // Calcola le distanze di penetrazione\n          const fromTop = ballBottom - elementTop;\n          const fromBottom = elementBottom - ballTop;\n          const fromLeft = ballRight - elementLeft;\n          const fromRight = elementRight - ballLeft;\n\n          // Trova la direzione di minima penetrazione\n          const minPenetration = Math.min(Math.abs(fromTop), Math.abs(fromBottom), Math.abs(fromLeft), Math.abs(fromRight));\n\n          // Collisione dall'alto (atterraggio sulla piattaforma)\n          if (minPenetration === Math.abs(fromTop) && vy < 0) {\n            // Fa scomparire la piattaforma se è di tipo DISAPPEARING\n            if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n              disappearingTimersRef.current[i] = setTimeout(() => {\n                setDisappearingPlatforms(prev => ({\n                  ...prev,\n                  [i]: true\n                }));\n              }, element.timeout || 1000);\n            }\n\n            // Rimbalza se la piattaforma è di tipo BOUNCE\n            if (element.type === LEVEL_TYPES.BOUNCE) {\n              return {\n                collision: true,\n                y: elementTop,\n                vy: jumpVelocity * (element.power || bounceMultiplier),\n                isOnGround: false\n              };\n            }\n\n            // Atterraggio normale\n            return {\n              collision: true,\n              y: elementTop,\n              vy: 0,\n              isOnGround: true\n            };\n          }\n\n          // Collisione dal basso (colpire una piattaforma saltando)\n          if (minPenetration === Math.abs(fromBottom) && vy > 0) {\n            return {\n              collision: true,\n              y: elementBottom - ballSize,\n              vy: -vy * 0.2,\n              // Rimbalza leggermente verso il basso\n              isOnGround: false\n            };\n          }\n\n          // Collisione da sinistra\n          if (minPenetration === Math.abs(fromLeft) && Math.abs(vx) > 0) {\n            return {\n              collision: true,\n              x: elementLeft - ballSize,\n              vx: 0\n            };\n          }\n\n          // Collisione da destra\n          if (minPenetration === Math.abs(fromRight) && Math.abs(vx) > 0) {\n            return {\n              collision: true,\n              x: elementRight,\n              vx: 0\n            };\n          }\n        }\n\n        // Gestione speciale per l'atterraggio più preciso\n        // Verifica se stiamo cadendo appena sopra una piattaforma\n        if (vy < 0 && ballBottom >= elementTop - tolerance && ballBottom <= elementTop + tolerance && ballRight > elementLeft + 1 && ballLeft < elementRight - 1) {\n          // Fa scomparire la piattaforma se è di tipo DISAPPEARING\n          if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n            disappearingTimersRef.current[i] = setTimeout(() => {\n              setDisappearingPlatforms(prev => ({\n                ...prev,\n                [i]: true\n              }));\n            }, element.timeout || 1000);\n          }\n\n          // Rimbalza se la piattaforma è di tipo BOUNCE\n          if (element.type === LEVEL_TYPES.BOUNCE) {\n            return {\n              collision: true,\n              y: elementTop,\n              vy: jumpVelocity * (element.power || bounceMultiplier),\n              isOnGround: false\n            };\n          }\n\n          // Atterraggio normale con aggancio alla piattaforma\n          return {\n            collision: true,\n            y: elementTop,\n            vy: 0,\n            isOnGround: true\n          };\n        }\n      }\n    }\n    return {\n      collision: false\n    };\n  };\n\n  // Controlla se c'è una collisione con un oggetto collezionabile\n  const checkCollectableCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.COLLECTABLE) {\n        // Salta se l'oggetto è già stato raccolto\n        if (collectedItems.includes(i)) continue;\n\n        // Controllo collisione (oggetto collezionabile è un punto)\n        const collectableSize = 5; // Dimensione approssimativa dell'oggetto\n        if (x < element.x + collectableSize && x + ballSize > element.x && y < element.y + collectableSize && y + ballSize > element.y) {\n          // Aggiorna lo stato di gioco\n          setGameState(prev => ({\n            ...prev,\n            score: prev.score + 100,\n            collectables: prev.collectables + 1\n          }));\n\n          // Aggiorna l'array degli oggetti raccolti\n          setCollectedItems(prev => [...prev, i]);\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Controlla se c'è una collisione con un nemico o una punta\n  const checkHazardCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.ENEMY || element.type === LEVEL_TYPES.SPIKE) {\n        let elementX = element.x;\n        let elementY = element.y;\n\n        // Aggiorna la posizione per nemici in movimento\n        if (element.type === LEVEL_TYPES.ENEMY && element.moveX) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n        }\n\n        // Controllo collisione\n        if (x < elementX + element.width && x + ballSize > elementX && y < elementY + element.height && y + ballSize > elementY) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Controlla se il giocatore ha raggiunto il traguardo\n  const checkFinishCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n    const elements = GAME_LEVELS[currentLevel].elements;\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (element.type === LEVEL_TYPES.FINISH) {\n        const finishSize = 10; // Dimensione approssimativa del traguardo\n        if (x < element.x + finishSize && x + ballSize > element.x && y < element.y + finishSize && y + ballSize > element.y) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // Gestisce il completamento del livello\n  const completeLevel = () => {\n    // Verifica se ci sono altri livelli\n    if (currentLevel < GAME_LEVELS.length - 1) {\n      // Passa al livello successivo\n      setCurrentLevel(prev => prev + 1);\n    } else {\n      // Hai completato tutti i livelli\n      setGameState(prev => ({\n        ...prev,\n        isGameOver: true,\n        isLevelComplete: true\n      }));\n    }\n  };\n\n  // Gestisce la morte del giocatore\n  const playerDeath = () => {\n    // Se il giocatore è già invulnerabile, ignora la collisione\n    if (isInvulnerable) return;\n\n    // Riduce il numero di vite\n    setGameState(prev => {\n      const newLives = prev.lives - 1;\n\n      // Game over se non ci sono più vite\n      if (newLives <= 0) {\n        return {\n          ...prev,\n          lives: 0,\n          isGameOver: true\n        };\n      }\n      return {\n        ...prev,\n        lives: newLives\n      };\n    });\n\n    // Rendi il giocatore invulnerabile temporaneamente\n    setIsInvulnerable(true);\n\n    // Effetto di lampeggiamento\n    const startBlinking = () => {\n      // Attiva/disattiva l'effetto lampeggiante ogni 150ms\n      setBlinkEffect(prev => !prev);\n    };\n\n    // Imposta l'intervallo di lampeggiamento\n    blinkTimerRef.current = setInterval(startBlinking, 150);\n\n    // Termina l'invulnerabilità dopo 2 secondi\n    invulnerabilityTimerRef.current = setTimeout(() => {\n      setIsInvulnerable(false);\n      clearInterval(blinkTimerRef.current);\n      setBlinkEffect(false);\n    }, 2000);\n\n    // Reimposta la posizione della pallina all'inizio del livello\n    if (GAME_LEVELS[currentLevel]) {\n      const {\n        startPosition\n      } = GAME_LEVELS[currentLevel];\n      setBall(prev => ({\n        ...prev,\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false\n      }));\n    }\n  };\n\n  // Pulizia dei timer\n  useEffect(() => {\n    return () => {\n      clearTimeout(invulnerabilityTimerRef.current);\n      clearInterval(blinkTimerRef.current);\n      Object.values(disappearingTimersRef.current).forEach(timer => clearTimeout(timer));\n    };\n  }, []);\n\n  // Ciclo di animazione continuo con requestAnimationFrame\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      // Salta l'aggiornamento se il gioco è in pausa o finito\n      if (gameState.isGameOver) {\n        return;\n      }\n      setBall(prev => {\n        let {\n          x,\n          y,\n          vx,\n          vy,\n          isOnGround,\n          isJumping\n        } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione dell'accelerazione orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) {\n          vx -= horizontalAcceleration;\n        }\n        if (currentPressedButtons[BUTTONS.RIGHT]) {\n          vx += horizontalAcceleration;\n        }\n\n        // Se non ci sono input orizzontali, applica attrito\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          // Applica attrito per rallentare gradualmente\n          if (vx > 0) {\n            vx = Math.max(vx - friction, 0);\n          } else if (vx < 0) {\n            vx = Math.min(vx + friction, 0);\n          }\n        }\n\n        // Limita la velocità orizzontale\n        if (vx > maxHorizontalSpeed) vx = maxHorizontalSpeed;\n        if (vx < -maxHorizontalSpeed) vx = -maxHorizontalSpeed;\n\n        // Gestione per il pulsante A (salto)\n        if (currentPressedButtons[BUTTONS.A] && isOnGround) {\n          vy = jumpVelocity;\n          isOnGround = false;\n          isJumping = true;\n        } else if (!currentPressedButtons[BUTTONS.A]) {\n          isJumping = false;\n        }\n\n        // Applica la gravità alla velocità verticale\n        vy += gravity;\n\n        // Aggiorna le posizioni\n        const newX = x + vx;\n        const newY = y + vy;\n\n        // Controlla collisioni con le piattaforme\n        const platformCollision = checkPlatformCollision(newX, newY, vx, vy);\n        if (platformCollision.collision) {\n          // Aggiorna posizione e velocità in base alla collisione\n          x = platformCollision.x !== undefined ? platformCollision.x : newX;\n          y = platformCollision.y !== undefined ? platformCollision.y : newY;\n          vx = platformCollision.vx !== undefined ? platformCollision.vx : vx;\n          vy = platformCollision.vy !== undefined ? platformCollision.vy : vy;\n          isOnGround = platformCollision.isOnGround !== undefined ? platformCollision.isOnGround : isOnGround;\n        } else {\n          // Nessuna collisione, aggiorna normalmente\n          x = newX;\n          y = newY;\n          isOnGround = false;\n        }\n\n        // Controlla se è stato raccolto un oggetto collezionabile\n        checkCollectableCollision(x, y);\n\n        // Controlla collisioni con nemici o punte\n        if (checkHazardCollision(x, y) && !isInvulnerable) {\n          playerDeath();\n        }\n\n        // Controlla se il giocatore ha raggiunto il traguardo\n        if (checkFinishCollision(x, y)) {\n          completeLevel();\n        }\n\n        // Controllo se il giocatore è caduto dal livello\n        if (y < -10) {\n          playerDeath();\n          return {\n            x,\n            y: 0,\n            vx: 0,\n            vy: 0,\n            isOnGround: false,\n            isJumping: false\n          };\n        }\n\n        // Clamping della posizione orizzontale nel container\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 100 - ballSize) {\n          x = 100 - ballSize;\n          vx = 0;\n        }\n\n        // Gestione dei pulsanti START e SELECT\n        if (currentPressedButtons[BUTTONS.START]) {\n          // Reimposta il livello\n          if (GAME_LEVELS[currentLevel]) {\n            const {\n              startPosition\n            } = GAME_LEVELS[currentLevel];\n            return {\n              x: startPosition.x,\n              y: startPosition.y,\n              vx: 0,\n              vy: 0,\n              isOnGround: false,\n              isJumping: false\n            };\n          }\n        }\n        if (currentPressedButtons[BUTTONS.SELECT]) {\n          // Cambia il livello\n          setCurrentLevel(prev => (prev + 1) % GAME_LEVELS.length);\n        }\n\n        // Supporto per la pressione DOWN (abbassarsi o accelerare la caduta)\n        if (currentPressedButtons[BUTTONS.DOWN] && !isOnGround) {\n          vy -= 0.5; // Accelera la caduta\n        }\n        return {\n          x,\n          y,\n          vx,\n          vy,\n          isOnGround,\n          isJumping\n        };\n      });\n      animationFrameId.current = requestAnimationFrame(update);\n    };\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [currentLevel, gameState.isGameOver]);\n\n  // Renderizza il livello corrente\n  const renderLevel = () => {\n    if (!GAME_LEVELS[currentLevel]) return null;\n    const level = GAME_LEVELS[currentLevel];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: level.elements.map((element, index) => {\n        // Salta se la piattaforma è scomparsa\n        if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[index]) {\n          return null;\n        }\n\n        // Salta se l'oggetto collezionabile è stato raccolto\n        if (element.type === LEVEL_TYPES.COLLECTABLE && collectedItems.includes(index)) {\n          return null;\n        }\n\n        // Calcola la posizione per elementi in movimento\n        let elementX = element.x;\n        let elementY = element.y;\n        if (element.type === LEVEL_TYPES.MOVING) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          const offset = element.offset || 0;\n          elementX = element.x + element.moveX * cycle;\n          elementY = element.y + element.moveY * cycle;\n        }\n\n        // Renderizza in base al tipo\n        switch (element.type) {\n          case LEVEL_TYPES.PLATFORM:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.MOVING:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform moving\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.BOUNCE:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform bounce\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.DISAPPEARING:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"platform disappearing\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.ENEMY:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"enemy\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.SPIKE:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spike\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: `${element.width}%`,\n                height: `${element.height}%`\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.COLLECTABLE:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"collectable\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: \"5%\",\n                height: \"5%\"\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 17\n            }, this);\n          case LEVEL_TYPES.FINISH:\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"finish\",\n              style: {\n                left: `${elementX}%`,\n                bottom: `${elementY}%`,\n                width: \"10%\",\n                height: \"10%\"\n              }\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 17\n            }, this);\n          default:\n            return null;\n        }\n      })\n    }, void 0, false);\n  };\n\n  // Renderizza l'interfaccia di gioco\n  const renderGameInterface = () => {\n    if (gameState.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: gameState.isLevelComplete ? \"Congratulazioni!\" : \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Punteggio: \", gameState.score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Oggetti raccolti: \", gameState.collectables]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setCurrentLevel(0);\n            setGameState({\n              lives: 3,\n              score: 0,\n              collectables: 0,\n              isGameOver: false,\n              isLevelComplete: false\n            });\n          },\n          children: \"Ricomincia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 9\n      }, this);\n    }\n    const renderLives = () => {\n      const livesArray = [];\n      for (let i = 0; i < gameState.lives; i++) {\n        livesArray.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"life-icon\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 25\n        }, this));\n      }\n      return livesArray;\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Punti: \", gameState.score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 774,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lives-display\",\n          children: [\"Vite: \", renderLives()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Monete: \", gameState.collectables]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"level-indicator\",\n        children: [\"Livello \", currentLevel + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emu-container\",\n    style: {\n      backgroundColor: ((_GAME_LEVELS$currentL = GAME_LEVELS[currentLevel]) === null || _GAME_LEVELS$currentL === void 0 ? void 0 : _GAME_LEVELS$currentL.backgroundColor) || \"#87CEEB\"\n    },\n    children: [renderLevel(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `ball ${blinkEffect ? 'blink' : ''}`,\n      style: {\n        left: `${ball.x}%`,\n        bottom: `${ball.y}%`,\n        width: `${ballSize}%`,\n        height: `${ballSize}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 7\n    }, this), renderGameInterface()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 786,\n    columnNumber: 5\n  }, this);\n}\n_s2(EmuSchermo, \"jpL1WirjW7L0KC8TmsPWH43MraU=\", false, function () {\n  return [useCollisionDetection];\n});\n_c = EmuSchermo;\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GAME_LEVELS","jsxDEV","_jsxDEV","Fragment","_Fragment","BUTTONS","A","B","START","SELECT","UP","DOWN","LEFT","RIGHT","LEVEL_TYPES","PLATFORM","MOVING","BOUNCE","ENEMY","COLLECTABLE","FINISH","SPIKE","DISAPPEARING","PHYSICS_CONFIG","ballSize","horizontalAcceleration","maxHorizontalSpeed","friction","jumpVelocity","gravity","bounceMultiplier","invulnerabilityDuration","blinkInterval","collisionTolerance","initialGameState","lives","score","collectables","isGameOver","isLevelComplete","gameReducer","state","action","type","newLives","isFinalLevel","useCollisionDetection","level","collectedItems","disappearingPlatforms","_s","checkCollision","useCallback","ballX","ballY","ballVx","ballVy","collision","EmuSchermo","pressedButtons","_s2","_GAME_LEVELS$currentL","currentLevel","setCurrentLevel","gameState","dispatch","useReducer","ball","setBall","x","y","vx","vy","isOnGround","setCollectedItems","Set","setDisappearingPlatforms","isInvulnerable","setIsInvulnerable","pressedButtonsRef","disappearingTimersRef","Map","invulnerabilityTimerRef","lastFrameTime","startPosition","current","clear","container","document","querySelector","classList","add","setTimeout","remove","checkPlatformCollision","elements","ballBottom","ballTop","ballLeft","ballRight","tolerance","i","length","element","elementX","elementY","time","Date","now","cycle","Math","sin","speed","moveX","moveY","elementLeft","elementRight","width","elementTop","height","elementBottom","fromTop","fromBottom","fromLeft","fromRight","minPenetration","min","abs","prev","timeout","power","checkCollectableCollision","includes","collectableSize","setGameState","checkHazardCollision","checkFinishCollision","finishSize","completeLevel","playerDeath","startBlinking","setBlinkEffect","blinkTimerRef","setInterval","clearInterval","isJumping","clearTimeout","Object","values","forEach","timer","animationFrameId","update","currentPressedButtons","max","newX","newY","platformCollision","undefined","requestAnimationFrame","cancelAnimationFrame","renderLevel","children","map","index","offset","className","style","left","bottom","fileName","_jsxFileName","lineNumber","columnNumber","renderGameInterface","onClick","renderLives","livesArray","push","backgroundColor","blinkEffect","_c","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./EmuSchermo.css\";\nimport { GAME_LEVELS } from \"./Levels\"; // Importa i livelli dal file creato\n\nconst BUTTONS = {\n  A: 1,\n  B: 2,\n  START: 3,\n  SELECT: 4,\n  UP: 5,\n  DOWN: 6,\n  LEFT: 7,\n  RIGHT: 8,\n};\n\nconst LEVEL_TYPES = {\n  PLATFORM: \"platform\",\n  MOVING: \"moving\",\n  BOUNCE: \"bounce\",\n  ENEMY: \"enemy\",\n  COLLECTABLE: \"coin\",\n  FINISH: \"finish\",\n  SPIKE: \"spike\",\n  DISAPPEARING: \"disappear\"\n};\n\nconst PHYSICS_CONFIG = {\n    ballSize: 6,\n    horizontalAcceleration: 0.2,\n    maxHorizontalSpeed: 2,\n    friction: 0.1,\n    jumpVelocity: 7,\n    gravity: -0.5,\n    bounceMultiplier: 1.5,\n    invulnerabilityDuration: 2000,\n    blinkInterval: 150,\n    collisionTolerance: 2\n  };\n  \n  const initialGameState = {\n    lives: 3,\n    score: 0,\n    collectables: 0,\n    isGameOver: false,\n    isLevelComplete: false\n  };\n\n  function gameReducer(state, action) {\n    switch (action.type) {\n      case 'RESET':\n        return { ...initialGameState };\n      case 'COLLECT_COIN':\n        return { ...state, score: state.score + 100, collectables: state.collectables + 1 };\n      case 'LOSE_LIFE':\n        const newLives = state.lives - 1;\n        return { \n          ...state, \n          lives: newLives, \n          isGameOver: newLives <= 0 \n        };\n      case 'COMPLETE_LEVEL':\n        return {\n          ...state,\n          isLevelComplete: true,\n          isGameOver: action.isFinalLevel\n        };\n      default:\n        return state;\n    }\n  }\n  function useCollisionDetection(level, collectedItems, disappearingPlatforms) {\n    const checkCollision = useCallback((ballX, ballY, ballVx, ballVy) => {\n      // Collision detection logic here\n      // (Moved from original checkPlatformCollision)\n      return { collision: false };\n    }, [level, collectedItems, disappearingPlatforms]);\n  \n    return { checkCollision };\n  }\n\n  function EmuSchermo({ pressedButtons }) {\n    const [currentLevel, setCurrentLevel] = useState(0);\n    const [gameState, dispatch] = useReducer(gameReducer, initialGameState);\n    const [ball, setBall] = useState({ x: 0, y: 0, vx: 0, vy: 0, isOnGround: false });\n    const [collectedItems, setCollectedItems] = useState(new Set());\n    const [disappearingPlatforms, setDisappearingPlatforms] = useState(new Set());\n    const [isInvulnerable, setIsInvulnerable] = useState(false);\n    \n    const pressedButtonsRef = useRef(pressedButtons);\n    const disappearingTimersRef = useRef(new Map());\n    const invulnerabilityTimerRef = useRef(null);\n    const lastFrameTime = useRef(0);\n  \n    const { checkCollision } = useCollisionDetection(\n      GAME_LEVELS[currentLevel],\n      collectedItems,\n      disappearingPlatforms\n    );\n\n  // Inizializza la posizione della pallina all'inizio del livello\n  useEffect(() => {\n    const level = GAME_LEVELS[currentLevel];\n    if (!level) return;\n\n    setBall({\n      x: level.startPosition.x,\n      y: level.startPosition.y,\n      vx: 0,\n      vy: 0,\n      isOnGround: false\n    });\n    \n    setCollectedItems(new Set());\n    setDisappearingPlatforms(new Set());\n    disappearingTimersRef.current.clear();\n\n    const container = document.querySelector('.emu-container');\n    container?.classList.add('level-transition');\n    setTimeout(() => container?.classList.remove('level-transition'), 500);\n  }, [currentLevel]);\n\n  // Usiamo un ref per tenere traccia dell'ultimo valore di pressedButtons\n  useEffect(() => {\n    pressedButtonsRef.current = pressedButtons;\n  }, [pressedButtons]);\n\n  // Verifica se c'è una collisione con una piattaforma\n  const checkPlatformCollision = (x, y, vx, vy) => {\n    if (!GAME_LEVELS[currentLevel]) return { collision: false };\n\n    const elements = GAME_LEVELS[currentLevel].elements;\n    const ballBottom = y;\n    const ballTop = y + ballSize;\n    const ballLeft = x;\n    const ballRight = x + ballSize;\n    const tolerance = 2; // Tolleranza per una collisione più precisa\n  \n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      \n      // Salta se la piattaforma è scomparsa\n      if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[i]) {\n        continue;\n      }\n      \n      if (element.type === LEVEL_TYPES.PLATFORM || \n          element.type === LEVEL_TYPES.MOVING || \n          element.type === LEVEL_TYPES.BOUNCE || \n          element.type === LEVEL_TYPES.DISAPPEARING) {\n        \n        // Ottieni posizione effettiva per piattaforme in movimento\n        let elementX = element.x;\n        let elementY = element.y;\n        \n        if (element.type === LEVEL_TYPES.MOVING) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          \n          elementX = element.x + element.moveX * cycle;\n          elementY = element.y + element.moveY * cycle;\n        }\n        \n        const elementLeft = elementX;\n        const elementRight = elementX + element.width;\n        const elementTop = elementY + element.height;\n        const elementBottom = elementY;\n        \n        // Verifica se c'è una sovrapposizione tra la pallina e la piattaforma\n        if (ballRight > elementLeft && \n            ballLeft < elementRight && \n            ballTop > elementBottom && \n            ballBottom < elementTop) {\n          \n          // Calcola le distanze di penetrazione\n          const fromTop = ballBottom - elementTop;\n          const fromBottom = elementBottom - ballTop;\n          const fromLeft = ballRight - elementLeft;\n          const fromRight = elementRight - ballLeft;\n          \n          // Trova la direzione di minima penetrazione\n          const minPenetration = Math.min(Math.abs(fromTop), Math.abs(fromBottom), Math.abs(fromLeft), Math.abs(fromRight));\n          \n          // Collisione dall'alto (atterraggio sulla piattaforma)\n          if (minPenetration === Math.abs(fromTop) && vy < 0) {\n            // Fa scomparire la piattaforma se è di tipo DISAPPEARING\n            if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n              disappearingTimersRef.current[i] = setTimeout(() => {\n                setDisappearingPlatforms(prev => ({ ...prev, [i]: true }));\n              }, element.timeout || 1000);\n            }\n            \n            // Rimbalza se la piattaforma è di tipo BOUNCE\n            if (element.type === LEVEL_TYPES.BOUNCE) {\n              return { \n                collision: true, \n                y: elementTop, \n                vy: jumpVelocity * (element.power || bounceMultiplier),\n                isOnGround: false\n              };\n            }\n            \n            // Atterraggio normale\n            return { \n              collision: true, \n              y: elementTop, \n              vy: 0,\n              isOnGround: true\n            };\n          }\n          \n          // Collisione dal basso (colpire una piattaforma saltando)\n          if (minPenetration === Math.abs(fromBottom) && vy > 0) {\n            return {\n              collision: true,\n              y: elementBottom - ballSize,\n              vy: -vy * 0.2, // Rimbalza leggermente verso il basso\n              isOnGround: false\n            };\n          }\n          \n          // Collisione da sinistra\n          if (minPenetration === Math.abs(fromLeft) && Math.abs(vx) > 0) {\n            return {\n              collision: true,\n              x: elementLeft - ballSize,\n              vx: 0\n            };\n          }\n          \n          // Collisione da destra\n          if (minPenetration === Math.abs(fromRight) && Math.abs(vx) > 0) {\n            return {\n              collision: true,\n              x: elementRight,\n              vx: 0\n            };\n          }\n        }\n        \n        // Gestione speciale per l'atterraggio più preciso\n        // Verifica se stiamo cadendo appena sopra una piattaforma\n        if (vy < 0 && \n            ballBottom >= elementTop - tolerance && \n            ballBottom <= elementTop + tolerance &&\n            ballRight > elementLeft + 1 && \n            ballLeft < elementRight - 1) {\n          \n          // Fa scomparire la piattaforma se è di tipo DISAPPEARING\n          if (element.type === LEVEL_TYPES.DISAPPEARING && !disappearingPlatforms[i]) {\n            disappearingTimersRef.current[i] = setTimeout(() => {\n              setDisappearingPlatforms(prev => ({ ...prev, [i]: true }));\n            }, element.timeout || 1000);\n          }\n          \n          // Rimbalza se la piattaforma è di tipo BOUNCE\n          if (element.type === LEVEL_TYPES.BOUNCE) {\n            return { \n              collision: true, \n              y: elementTop, \n              vy: jumpVelocity * (element.power || bounceMultiplier),\n              isOnGround: false\n            };\n          }\n          \n          // Atterraggio normale con aggancio alla piattaforma\n          return { \n            collision: true, \n            y: elementTop, \n            vy: 0,\n            isOnGround: true\n          };\n        }\n      }\n    }\n    \n    return { collision: false };\n  };\n\n  // Controlla se c'è una collisione con un oggetto collezionabile\n  const checkCollectableCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n\n    const elements = GAME_LEVELS[currentLevel].elements;\n    \n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      \n      if (element.type === LEVEL_TYPES.COLLECTABLE) {\n        // Salta se l'oggetto è già stato raccolto\n        if (collectedItems.includes(i)) continue;\n        \n        // Controllo collisione (oggetto collezionabile è un punto)\n        const collectableSize = 5; // Dimensione approssimativa dell'oggetto\n        if (x < element.x + collectableSize && \n            x + ballSize > element.x && \n            y < element.y + collectableSize && \n            y + ballSize > element.y) {\n          \n          // Aggiorna lo stato di gioco\n          setGameState(prev => ({\n            ...prev,\n            score: prev.score + 100,\n            collectables: prev.collectables + 1\n          }));\n          \n          // Aggiorna l'array degli oggetti raccolti\n          setCollectedItems(prev => [...prev, i]);\n          \n          return true;\n        }\n      }\n    }\n    \n    return false;\n  };\n\n  // Controlla se c'è una collisione con un nemico o una punta\n  const checkHazardCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n\n    const elements = GAME_LEVELS[currentLevel].elements;\n    \n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      \n      if (element.type === LEVEL_TYPES.ENEMY || element.type === LEVEL_TYPES.SPIKE) {\n        let elementX = element.x;\n        let elementY = element.y;\n        \n        // Aggiorna la posizione per nemici in movimento\n        if (element.type === LEVEL_TYPES.ENEMY && element.moveX) {\n          const time = Date.now() / 1000;\n          const cycle = Math.sin(time * element.speed);\n          elementX = element.x + element.moveX * cycle;\n        }\n        \n        // Controllo collisione\n        if (x < elementX + element.width && \n            x + ballSize > elementX && \n            y < elementY + element.height && \n            y + ballSize > elementY) {\n          \n          return true;\n        }\n      }\n    }\n    \n    return false;\n  };\n\n  // Controlla se il giocatore ha raggiunto il traguardo\n  const checkFinishCollision = (x, y) => {\n    if (!GAME_LEVELS[currentLevel]) return false;\n\n    const elements = GAME_LEVELS[currentLevel].elements;\n    \n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      \n      if (element.type === LEVEL_TYPES.FINISH) {\n        const finishSize = 10; // Dimensione approssimativa del traguardo\n        if (x < element.x + finishSize && \n            x + ballSize > element.x && \n            y < element.y + finishSize && \n            y + ballSize > element.y) {\n          \n          return true;\n        }\n      }\n    }\n    \n    return false;\n  };\n\n  // Gestisce il completamento del livello\n  const completeLevel = () => {\n    // Verifica se ci sono altri livelli\n    if (currentLevel < GAME_LEVELS.length - 1) {\n      // Passa al livello successivo\n      setCurrentLevel(prev => prev + 1);\n    } else {\n      // Hai completato tutti i livelli\n      setGameState(prev => ({\n        ...prev,\n        isGameOver: true,\n        isLevelComplete: true\n      }));\n    }\n  };\n\n  // Gestisce la morte del giocatore\n  const playerDeath = () => {\n    // Se il giocatore è già invulnerabile, ignora la collisione\n    if (isInvulnerable) return;\n    \n    // Riduce il numero di vite\n    setGameState(prev => {\n      const newLives = prev.lives - 1;\n      \n      // Game over se non ci sono più vite\n      if (newLives <= 0) {\n        return {\n          ...prev,\n          lives: 0,\n          isGameOver: true\n        };\n      }\n      \n      return {\n        ...prev,\n        lives: newLives\n      };\n    });\n    \n    // Rendi il giocatore invulnerabile temporaneamente\n    setIsInvulnerable(true);\n    \n    // Effetto di lampeggiamento\n    const startBlinking = () => {\n      // Attiva/disattiva l'effetto lampeggiante ogni 150ms\n      setBlinkEffect(prev => !prev);\n    };\n    \n    // Imposta l'intervallo di lampeggiamento\n    blinkTimerRef.current = setInterval(startBlinking, 150);\n    \n    // Termina l'invulnerabilità dopo 2 secondi\n    invulnerabilityTimerRef.current = setTimeout(() => {\n      setIsInvulnerable(false);\n      clearInterval(blinkTimerRef.current);\n      setBlinkEffect(false);\n    }, 2000);\n    \n    // Reimposta la posizione della pallina all'inizio del livello\n    if (GAME_LEVELS[currentLevel]) {\n      const { startPosition } = GAME_LEVELS[currentLevel];\n      setBall(prev => ({\n        ...prev,\n        x: startPosition.x,\n        y: startPosition.y,\n        vx: 0,\n        vy: 0,\n        isOnGround: false,\n        isJumping: false\n      }));\n    }\n  };\n\n  // Pulizia dei timer\n  useEffect(() => {\n    return () => {\n      clearTimeout(invulnerabilityTimerRef.current);\n      clearInterval(blinkTimerRef.current);\n      Object.values(disappearingTimersRef.current).forEach(timer => clearTimeout(timer));\n    };\n  }, []);\n\n  // Ciclo di animazione continuo con requestAnimationFrame\n  const animationFrameId = useRef(null);\n  useEffect(() => {\n    const update = () => {\n      // Salta l'aggiornamento se il gioco è in pausa o finito\n      if (gameState.isGameOver) {\n        return;\n      }\n      \n      setBall(prev => {\n        let { x, y, vx, vy, isOnGround, isJumping } = prev;\n        const currentPressedButtons = pressedButtonsRef.current || {};\n\n        // Gestione dell'accelerazione orizzontale\n        if (currentPressedButtons[BUTTONS.LEFT]) {\n          vx -= horizontalAcceleration;\n        } \n        if (currentPressedButtons[BUTTONS.RIGHT]) {\n          vx += horizontalAcceleration;\n        } \n        \n        // Se non ci sono input orizzontali, applica attrito\n        if (!currentPressedButtons[BUTTONS.LEFT] && !currentPressedButtons[BUTTONS.RIGHT]) {\n          // Applica attrito per rallentare gradualmente\n          if (vx > 0) {\n            vx = Math.max(vx - friction, 0);\n          } else if (vx < 0) {\n            vx = Math.min(vx + friction, 0);\n          }\n        }\n\n        // Limita la velocità orizzontale\n        if (vx > maxHorizontalSpeed) vx = maxHorizontalSpeed;\n        if (vx < -maxHorizontalSpeed) vx = -maxHorizontalSpeed;\n\n        // Gestione per il pulsante A (salto)\n        if (currentPressedButtons[BUTTONS.A] && isOnGround) {\n          vy = jumpVelocity;\n          isOnGround = false;\n          isJumping = true;\n        } else if (!currentPressedButtons[BUTTONS.A]) {\n          isJumping = false;\n        }\n\n        // Applica la gravità alla velocità verticale\n        vy += gravity;\n\n        // Aggiorna le posizioni\n        const newX = x + vx;\n        const newY = y + vy;\n        \n        // Controlla collisioni con le piattaforme\n        const platformCollision = checkPlatformCollision(newX, newY, vx, vy);\n        \n        if (platformCollision.collision) {\n          // Aggiorna posizione e velocità in base alla collisione\n          x = platformCollision.x !== undefined ? platformCollision.x : newX;\n          y = platformCollision.y !== undefined ? platformCollision.y : newY;\n          vx = platformCollision.vx !== undefined ? platformCollision.vx : vx;\n          vy = platformCollision.vy !== undefined ? platformCollision.vy : vy;\n          isOnGround = platformCollision.isOnGround !== undefined ? platformCollision.isOnGround : isOnGround;\n        } else {\n          // Nessuna collisione, aggiorna normalmente\n          x = newX;\n          y = newY;\n          isOnGround = false;\n        }\n        \n        // Controlla se è stato raccolto un oggetto collezionabile\n        checkCollectableCollision(x, y);\n        \n        // Controlla collisioni con nemici o punte\n        if (checkHazardCollision(x, y) && !isInvulnerable) {\n          playerDeath();\n        }\n        \n        // Controlla se il giocatore ha raggiunto il traguardo\n        if (checkFinishCollision(x, y)) {\n          completeLevel();\n        }\n        \n        // Controllo se il giocatore è caduto dal livello\n        if (y < -10) {\n          playerDeath();\n          return { x, y: 0, vx: 0, vy: 0, isOnGround: false, isJumping: false };\n        }\n\n        // Clamping della posizione orizzontale nel container\n        if (x < 0) {\n          x = 0;\n          vx = 0;\n        }\n        if (x > 100 - ballSize) {\n          x = 100 - ballSize;\n          vx = 0;\n        }\n\n        // Gestione dei pulsanti START e SELECT\n        if (currentPressedButtons[BUTTONS.START]) {\n          // Reimposta il livello\n          if (GAME_LEVELS[currentLevel]) {\n            const { startPosition } = GAME_LEVELS[currentLevel];\n            return {\n              x: startPosition.x,\n              y: startPosition.y,\n              vx: 0,\n              vy: 0,\n              isOnGround: false,\n              isJumping: false\n            };\n          }\n        }\n\n        if (currentPressedButtons[BUTTONS.SELECT]) {\n          // Cambia il livello\n          setCurrentLevel(prev => (prev + 1) % GAME_LEVELS.length);\n        }\n\n        // Supporto per la pressione DOWN (abbassarsi o accelerare la caduta)\n        if (currentPressedButtons[BUTTONS.DOWN] && !isOnGround) {\n          vy -= 0.5; // Accelera la caduta\n        }\n\n        return { x, y, vx, vy, isOnGround, isJumping };\n      });\n      \n      animationFrameId.current = requestAnimationFrame(update);\n    };\n\n    animationFrameId.current = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId.current);\n  }, [currentLevel, gameState.isGameOver]);\n\n  // Renderizza il livello corrente\n  const renderLevel = () => {\n    if (!GAME_LEVELS[currentLevel]) return null;\n    \n    const level = GAME_LEVELS[currentLevel];\n    \n    return (\n      <>\n        {level.elements.map((element, index) => {\n          // Salta se la piattaforma è scomparsa\n          if (element.type === LEVEL_TYPES.DISAPPEARING && disappearingPlatforms[index]) {\n            return null;\n          }\n          \n          // Salta se l'oggetto collezionabile è stato raccolto\n          if (element.type === LEVEL_TYPES.COLLECTABLE && collectedItems.includes(index)) {\n            return null;\n          }\n          \n          // Calcola la posizione per elementi in movimento\n          let elementX = element.x;\n          let elementY = element.y;\n          \n          if (element.type === LEVEL_TYPES.MOVING) {\n            const time = Date.now() / 1000;\n            const cycle = Math.sin(time * element.speed);\n            const offset = element.offset || 0;\n            \n            elementX = element.x + element.moveX * cycle;\n            elementY = element.y + element.moveY * cycle;\n          }\n          \n          // Renderizza in base al tipo\n          switch(element.type) {\n            case LEVEL_TYPES.PLATFORM:\n              return (\n                <div\n                  key={index}\n                  className=\"platform\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.MOVING:\n              return (\n                <div\n                  key={index}\n                  className=\"platform moving\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.BOUNCE:\n              return (\n                <div\n                  key={index}\n                  className=\"platform bounce\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.DISAPPEARING:\n              return (\n                <div\n                  key={index}\n                  className=\"platform disappearing\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.ENEMY:\n              return (\n                <div\n                  key={index}\n                  className=\"enemy\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.SPIKE:\n              return (\n                <div\n                  key={index}\n                  className=\"spike\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: `${element.width}%`,\n                    height: `${element.height}%`\n                  }}\n                />\n              );\n            case LEVEL_TYPES.COLLECTABLE:\n              return (\n                <div\n                  key={index}\n                  className=\"collectable\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: \"5%\",\n                    height: \"5%\"\n                  }}\n                />\n              );\n            case LEVEL_TYPES.FINISH:\n              return (\n                <div\n                  key={index}\n                  className=\"finish\"\n                  style={{\n                    left: `${elementX}%`,\n                    bottom: `${elementY}%`,\n                    width: \"10%\",\n                    height: \"10%\"\n                  }}\n                />\n              );\n            default:\n              return null;\n          }\n        })}\n      </>\n    );\n  };\n\n  // Renderizza l'interfaccia di gioco\n  const renderGameInterface = () => {\n    if (gameState.isGameOver) {\n      return (\n        <div className=\"game-over\">\n          <h2>{gameState.isLevelComplete ? \"Congratulazioni!\" : \"Game Over\"}</h2>\n          <p>Punteggio: {gameState.score}</p>\n          <p>Oggetti raccolti: {gameState.collectables}</p>\n          <button \n            onClick={() => {\n              setCurrentLevel(0);\n              setGameState({\n                lives: 3,\n                score: 0,\n                collectables: 0,\n                isGameOver: false,\n                isLevelComplete: false\n              });\n            }}\n          >\n            Ricomincia\n          </button>\n        </div>\n      );\n    }\n    \n    const renderLives = () => {\n      const livesArray = [];\n      for (let i = 0; i < gameState.lives; i++) {\n        livesArray.push(<span key={i} className=\"life-icon\"></span>);\n      }\n      return livesArray;\n    };\n    \n    return (\n      <>\n        <div className=\"game-info\">\n          <div>Punti: {gameState.score}</div>\n          <div className=\"lives-display\">\n            Vite: {renderLives()}\n          </div>\n          <div>Monete: {gameState.collectables}</div>\n        </div>\n        <div className=\"level-indicator\">Livello {currentLevel + 1}</div>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"emu-container\" style={{ backgroundColor: GAME_LEVELS[currentLevel]?.backgroundColor || \"#87CEEB\" }}>\n      {renderLevel()}\n      \n      <div\n        className={`ball ${blinkEffect ? 'blink' : ''}`}\n        style={{\n          left: `${ball.x}%`,\n          bottom: `${ball.y}%`,\n          width: `${ballSize}%`,\n          height: `${ballSize}%`\n        }}\n      ></div>\n      \n      {renderGameInterface()}\n    </div>\n  );\n}\n\nexport default EmuSchermo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}