{"ast":null,"code":"var _jsxFileName = \"/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js\",\n  _s = $RefreshSig$();\n// EmuSchermo.jsx\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PHYSICS_CONSTANTS = {\n  GRAVITY: 0.5,\n  JUMP_FORCE: -12,\n  MOVE_SPEED: 5,\n  BALL_SIZE: 30\n};\nconst EmuSchermo = ({\n  activeInputs\n}) => {\n  _s();\n  const screenRef = useRef(null);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [velocity, setVelocity] = useState({\n    dx: 0,\n    dy: 0\n  });\n  const [isGrounded, setIsGrounded] = useState(false);\n  const [screenSize, setScreenSize] = useState({\n    width: 0,\n    height: 0\n  });\n\n  // Inizializzazione dimensioni schermo\n  const updateSize = useCallback(() => {\n    if (screenRef.current) {\n      const rect = screenRef.current.getBoundingClientRect();\n      setScreenSize({\n        width: rect.width,\n        height: rect.height\n      });\n      setPosition({\n        x: (rect.width - PHYSICS_CONSTANTS.BALL_SIZE) / 2,\n        y: rect.height - PHYSICS_CONSTANTS.BALL_SIZE - 10\n      });\n    }\n  }, []);\n  useEffect(() => {\n    updateSize();\n    window.addEventListener('resize', updateSize);\n    return () => window.removeEventListener('resize', updateSize);\n  }, [updateSize]);\n\n  // Aggiornamento fisica\n  useEffect(() => {\n    const {\n      GRAVITY,\n      JUMP_FORCE,\n      MOVE_SPEED,\n      BALL_SIZE\n    } = PHYSICS_CONSTANTS;\n    const newVelocity = {\n      dx: activeInputs.has('LEFT') ? -MOVE_SPEED : activeInputs.has('RIGHT') ? MOVE_SPEED : 0,\n      dy: velocity.dy + (isGrounded ? 0 : GRAVITY)\n    };\n    if (activeInputs.has('UP') && isGrounded) {\n      newVelocity.dy = JUMP_FORCE;\n      setIsGrounded(false);\n    }\n    setVelocity(newVelocity);\n  }, [activeInputs, isGrounded]);\n\n  // Aggiornamento posizione\n  useEffect(() => {\n    const {\n      BALL_SIZE\n    } = PHYSICS_CONSTANTS;\n    let animationFrameId;\n    const update = () => {\n      setPosition(prev => {\n        let newX = prev.x + velocity.dx;\n        let newY = prev.y + velocity.dy;\n\n        // Collisioni\n        newX = Math.max(0, Math.min(newX, screenSize.width - BALL_SIZE));\n        newY = Math.max(0, Math.min(newY, screenSize.height - BALL_SIZE));\n\n        // Rilevamento terreno\n        const grounded = newY >= screenSize.height - BALL_SIZE;\n        setIsGrounded(grounded);\n        if (grounded) {\n          newY = screenSize.height - BALL_SIZE;\n        }\n        return {\n          x: newX,\n          y: newY\n        };\n      });\n      animationFrameId = requestAnimationFrame(update);\n    };\n    animationFrameId = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [velocity, screenSize]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"windowEmu\",\n    ref: screenRef,\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative',\n      overflow: 'hidden',\n      backgroundColor: '#9acd32'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ball\",\n      style: {\n        position: 'absolute',\n        left: position.x,\n        top: position.y,\n        width: PHYSICS_CONSTANTS.BALL_SIZE,\n        height: PHYSICS_CONSTANTS.BALL_SIZE,\n        borderRadius: '50%',\n        backgroundColor: 'red',\n        transition: 'left 0.1s linear, top 0.1s ease-out',\n        boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(EmuSchermo, \"iFDn1GIN/UQyGAgAjxstuSYXgL8=\");\n_c = EmuSchermo;\nEmuSchermo.propTypes = {\n  activeInputs: PropTypes.instanceOf(Set).isRequired\n};\nexport default EmuSchermo;\nvar _c;\n$RefreshReg$(_c, \"EmuSchermo\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","PropTypes","jsxDEV","_jsxDEV","PHYSICS_CONSTANTS","GRAVITY","JUMP_FORCE","MOVE_SPEED","BALL_SIZE","EmuSchermo","activeInputs","_s","screenRef","position","setPosition","x","y","velocity","setVelocity","dx","dy","isGrounded","setIsGrounded","screenSize","setScreenSize","width","height","updateSize","current","rect","getBoundingClientRect","window","addEventListener","removeEventListener","newVelocity","has","animationFrameId","update","prev","newX","newY","Math","max","min","grounded","requestAnimationFrame","cancelAnimationFrame","className","ref","style","overflow","backgroundColor","children","left","top","borderRadius","transition","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","instanceOf","Set","isRequired","$RefreshReg$"],"sources":["/Users/giuseppebondi/Documents/GitHub/platform/src/components/EmuSchermo.js"],"sourcesContent":["// EmuSchermo.jsx\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nconst PHYSICS_CONSTANTS = {\n  GRAVITY: 0.5,\n  JUMP_FORCE: -12,\n  MOVE_SPEED: 5,\n  BALL_SIZE: 30\n};\n\nconst EmuSchermo = ({ activeInputs }) => {\n  const screenRef = useRef(null);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [velocity, setVelocity] = useState({ dx: 0, dy: 0 });\n  const [isGrounded, setIsGrounded] = useState(false);\n  const [screenSize, setScreenSize] = useState({ width: 0, height: 0 });\n\n  // Inizializzazione dimensioni schermo\n  const updateSize = useCallback(() => {\n    if(screenRef.current) {\n      const rect = screenRef.current.getBoundingClientRect();\n      setScreenSize({\n        width: rect.width,\n        height: rect.height\n      });\n      setPosition({\n        x: (rect.width - PHYSICS_CONSTANTS.BALL_SIZE) / 2,\n        y: rect.height - PHYSICS_CONSTANTS.BALL_SIZE - 10\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    updateSize();\n    window.addEventListener('resize', updateSize);\n    return () => window.removeEventListener('resize', updateSize);\n  }, [updateSize]);\n\n  // Aggiornamento fisica\n  useEffect(() => {\n    const { GRAVITY, JUMP_FORCE, MOVE_SPEED, BALL_SIZE } = PHYSICS_CONSTANTS;\n    \n    const newVelocity = {\n      dx: activeInputs.has('LEFT') ? -MOVE_SPEED : activeInputs.has('RIGHT') ? MOVE_SPEED : 0,\n      dy: velocity.dy + (isGrounded ? 0 : GRAVITY)\n    };\n\n    if(activeInputs.has('UP') && isGrounded) {\n      newVelocity.dy = JUMP_FORCE;\n      setIsGrounded(false);\n    }\n\n    setVelocity(newVelocity);\n  }, [activeInputs, isGrounded]);\n\n  // Aggiornamento posizione\n  useEffect(() => {\n    const { BALL_SIZE } = PHYSICS_CONSTANTS;\n    let animationFrameId;\n\n    const update = () => {\n      setPosition(prev => {\n        let newX = prev.x + velocity.dx;\n        let newY = prev.y + velocity.dy;\n\n        // Collisioni\n        newX = Math.max(0, Math.min(newX, screenSize.width - BALL_SIZE));\n        newY = Math.max(0, Math.min(newY, screenSize.height - BALL_SIZE));\n\n        // Rilevamento terreno\n        const grounded = newY >= screenSize.height - BALL_SIZE;\n        setIsGrounded(grounded);\n        \n        if(grounded) {\n          newY = screenSize.height - BALL_SIZE;\n        }\n\n        return { x: newX, y: newY };\n      });\n\n      animationFrameId = requestAnimationFrame(update);\n    };\n\n    animationFrameId = requestAnimationFrame(update);\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [velocity, screenSize]);\n\n  return (\n    <div \n      className=\"windowEmu\" \n      ref={screenRef}\n      style={{\n        width: '100%',\n        height: '100%',\n        position: 'relative',\n        overflow: 'hidden',\n        backgroundColor: '#9acd32'\n      }}\n    >\n      <div\n        className=\"ball\"\n        style={{\n          position: 'absolute',\n          left: position.x,\n          top: position.y,\n          width: PHYSICS_CONSTANTS.BALL_SIZE,\n          height: PHYSICS_CONSTANTS.BALL_SIZE,\n          borderRadius: '50%',\n          backgroundColor: 'red',\n          transition: 'left 0.1s linear, top 0.1s ease-out',\n          boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n        }}\n      />\n    </div>\n  );\n};\n\nEmuSchermo.propTypes = {\n  activeInputs: PropTypes.instanceOf(Set).isRequired\n};\n\nexport default EmuSchermo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}